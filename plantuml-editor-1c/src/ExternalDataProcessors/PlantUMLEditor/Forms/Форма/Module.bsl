///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ТипыДиаграмм = ДоступныеТипыДиаграмм();
	ЗаполнитьДоступныеДиаграммы();
	УстановитьУсловноеОформление();
	ИнициализироватьСвойстваТипаЭлементов();
	ИнициализацияУсловийВыводаЭлемента();

КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если КлючУникальности = Неопределено Тогда

		КлючУникальности = Новый УникальныйИдентификатор();

	КонецЕсли;

	СозданиеДиаграммыПоУмолчанию();
	ПроверитьИЗаполнитьАдресСервера(АдресСервераРендеринга);

КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	ПроверитьИЗаполнитьАдресСервера(АдресСервераРендеринга);
	Элементы.ПоказатьТекстUML.Пометка = ПоказатьТекстUML;
	Элементы.РезультатТекстPlantUML.Видимость = ПоказатьТекстUML;

КонецПроцедуры // ПриСохраненииДанныхВНастройкахНаСервере()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если Модифицированность И Не ЗавершениеРаботы Тогда

		ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаЗакрытияФормы", ЭтотОбъект);
		ВывестиВопросОбИзмененииНастройки(ОбработчикОповещения);
		Отказ = Истина;

	КонецЕсли;

КонецПроцедуры // ПередЗакрытием()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РезультатТекстPlantUMLПриИзменении(Элемент)

	СформироватьНаСервере(Ложь);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРедакторДиаграммы

&НаКлиенте
Процедура РедакторДиаграммыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = РедакторДиаграммы.НайтиПоИдентификатору(ВыбраннаяСтрока);

	ИмяТаблицы = ИмяНабораСвойствПоТипуОбъекта(ТекущиеДанные.Тип);
	ИдентификаторЭлемента = ИдентификаторЭлементаДиаграммы(ТекущиеДанные);
	НачатьРедактированиеСвойствОбъекта(
		ИмяТаблицы,
		ИдентификаторЭлемента,
		ТекущиеДанные.ПредставлениеЭлемента,
		ТекущиеДанные.Тип,
		ТекущиеДанные);

КонецПроцедуры // РедакторДиаграммыВыбор()

&НаКлиенте
Процедура РедакторДиаграммыПриАктивизацииСтроки(Элемент)

	// Важно! При формировании в контекстном меню не сразу перерисовыввается подменю по выбору типа элемента.
	ПодключитьОбработчикОжидания("Подключаемый_СформироватьТипыЭлементовСтроки", 0.1, Истина);
	ИспользоватьКомандуТолькоДляОбъекта = Элементы.РедакторДиаграммы.ТекущиеДанные <> Неопределено
		И Элементы.РедакторДиаграммы.ТекущиеДанные.Тип = ДоступныеТипыЭлементов().Объект
		И Не ПустаяСтрока(Элементы.РедакторДиаграммы.ТекущиеДанные.ПутьКМетаданным);
	Элементы.ВыбратьРеквизитыОбъекта.Доступность = ИспользоватьКомандуТолькоДляОбъекта;
	Элементы.ЗаполнитьСвязиОбъекта.Доступность = ИспользоватьКомандуТолькоДляОбъекта;
	Элементы.ПереместитьИзГруппы.Доступность = Элементы.РедакторДиаграммы.ТекущиеДанные <> Неопределено
		И Элементы.РедакторДиаграммы.ТекущиеДанные.Тип = ДоступныеТипыЭлементов().Объект;

КонецПроцедуры // РедакторДиаграммыПриАктивизацииСтроки()

&НаКлиенте
Процедура РедакторДиаграммыПослеУдаления(Элемент)

	ОчиститьСвойстваУдаленныхЭлементовДиаграммы();
	УбратьВидимостьТиповОбъектов();
	ПодключитьОбработчикОжидания("ВывестиРезультатДиаграммы", 0.1, Истина);

КонецПроцедуры // РедакторДиаграммыПослеУдаления()

&НаКлиенте
Процедура РедакторДиаграммыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)

	Отказ = Истина;

	ТекущиеДанные = Элементы.РедакторДиаграммы.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда

		ДобавитьЭлементДиаграммы(ДоступныеТипыЭлементов().Объект, РедакторДиаграммы.ПолучитьЭлементы());

	ИначеЕсли ТекущиеДанные.Тип = ДоступныеТипыЭлементов().Объект Тогда

		РодительОбъекта = ТекущиеДанные.ПолучитьРодителя();
		Если РодительОбъекта = Неопределено Тогда

			РодительНовогоОбъекта = РедакторДиаграммы.ПолучитьЭлементы();

		Иначе

			РодительНовогоОбъекта = РодительОбъекта.ПолучитьЭлементы();

		КонецЕсли;

		ДобавитьЭлементДиаграммы(ДоступныеТипыЭлементов().Объект, РодительНовогоОбъекта, Копирование, ТекущиеДанные);

	ИначеЕсли ТекущиеДанные.Тип = ДоступныеТипыЭлементов().Группа Тогда

		ДобавитьЭлементДиаграммы(
			ДоступныеТипыЭлементов().Группа,
			РедакторДиаграммы.ПолучитьЭлементы(),
			Копирование,
			ТекущиеДанные);

	Иначе

		ДобавитьЭлементДиаграммы(
			ДоступныеТипыЭлементов().Связь,
			ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы(),
			Копирование,
			ТекущиеДанные);

	КонецЕсли;

КонецПроцедуры // РедакторДиаграммыПередНачаломДобавления()

&НаКлиенте
Процедура РедакторДиаграммыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	ПереносТолькоСвязей = Истина;
	ПереносТолькоОбъектов = Истина;

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда

		Для Каждого ЭлементПереноса Из ПараметрыПеретаскивания.Значение Цикл

			СтрокаЭлемента = РедакторДиаграммы.НайтиПоИдентификатору(ЭлементПереноса);
			Если СтрокаЭлемента.Тип <> ДоступныеТипыЭлементов().Объект Тогда

				ПереносТолькоОбъектов = Ложь;

			КонецЕсли;

			Если СтрокаЭлемента.Тип <> ДоступныеТипыЭлементов().Связь Тогда

				ПереносТолькоСвязей = Ложь;

			КонецЕсли;

			Если Не ПереносТолькоОбъектов И Не ПереносТолькоСвязей Тогда

				Прервать;

			КонецЕсли;

		КонецЦикла;

	Иначе

		СтрокаЭлемента = РедакторДиаграммы.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
		ПереносТолькоСвязей = СтрокаЭлемента.Тип = ДоступныеТипыЭлементов().Связь;
		ПереносТолькоОбъектов = СтрокаЭлемента.Тип = ДоступныеТипыЭлементов().Объект;

	КонецЕсли;

	Если Строка = Неопределено Тогда

		ПереносТолькоСвязей = Ложь;

	Иначе

		СтрокаПереноса = РедакторДиаграммы.НайтиПоИдентификатору(Строка);
		Если СтрокаПереноса.Тип = ДоступныеТипыЭлементов().Связь Тогда

			ПереносТолькоОбъектов = Ложь;

		ИначеЕсли СтрокаПереноса.Тип = ДоступныеТипыЭлементов().Группа Тогда

			ПереносТолькоСвязей = Ложь;

		КонецЕсли;

	КонецЕсли;

	Если Не ПереносТолькоСвязей И Не ПереносТолькоОбъектов Тогда

		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;

	КонецЕсли;
	
КонецПроцедуры // РедакторДиаграммыПроверкаПеретаскивания()

&НаКлиенте
Процедура РедакторДиаграммыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	СтандартнаяОбработка = Ложь;

	Если Строка = Неопределено Тогда

		СтрокаРодитель = РедакторДиаграммы;
		КореньЭлементовДиаграммы = Истина;

	Иначе

		СтрокаРодитель = РедакторДиаграммы.НайтиПоИдентификатору(Строка);
	
		Если СтрокаРодитель.Тип = ДоступныеТипыЭлементов().Связь Тогда
	
			СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
	
		КонецЕсли;

		КореньЭлементовДиаграммы = СтрокаРодитель.ПолучитьРодителя() = Неопределено;

	КонецЕсли;

	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда

		Для Каждого ЭлементПереноса Из ПараметрыПеретаскивания.Значение Цикл

			ПеренестиЭлементДиаграммы(Строка, ЭлементПереноса, СтрокаРодитель, КореньЭлементовДиаграммы);

		КонецЦикла;

	Иначе

		ПеренестиЭлементДиаграммы(Строка, ПараметрыПеретаскивания.Значение, СтрокаРодитель, КореньЭлементовДиаграммы);

	КонецЕсли;

	Если Строка <> Неопределено Тогда

		Элементы.РедакторДиаграммы.Развернуть(Строка, Истина);

	КонецЕсли;

	ПодключитьОбработчикОжидания("ВывестиРезультатДиаграммы", 0.1, Истина);

КонецПроцедуры // РедакторДиаграммыПеретаскивание()


&НаКлиенте
Процедура РедакторДиаграммыПриИзменении(Элемент)

	ПодключитьОбработчикОжидания("ВывестиРезультатДиаграммы", 0.1, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)

	ВывестиРезультатДиаграммы();

КонецПроцедуры // Сформировать()

&НаКлиенте
Процедура СохранитьНастройкиВФайл(Команда)

#Если ВебКлиент Тогда

	ОбработчикПродолженияСохраненияНастроек =Новый ОписаниеОповещения(
		"ПродолжитьСохранениеНастройкиДиаграммыВФайл", ЭтотОбъект);

	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ПроверкаРасширенияРаботыСФайлами",
		ЭтотОбъект,
		Новый Структура("ОбработчикОповещения", ОбработчикПродолженияСохраненияНастроек));
	НачатьПодключениеРасширенияРаботыСФайлами(ОбработчикОповещения);
	Возврат;

#КонецЕсли

	ПродолжитьСохранениеНастройкиВФайл(Неопределено);

КонецПроцедуры // СохранитьНастройкиВФайл()

&НаКлиенте
Процедура ЗагрузитьНастройкиИзФайла(Команда)

	Если Модифицированность Тогда

		ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ПродолжитьЗагрузкуНастроек", ЭтотОбъект);
		ВывестиВопросОбИзмененииНастройки(ОбработчикОповещения);
		Возврат;

	КонецЕсли;

	ПродолжитьВыполнениеЗагрузкиНастроек();

КонецПроцедуры // ЗагрузитьНастройкиИзФайла()

&НаКлиенте
Процедура ЗаполнитьПоМетаданным(Команда)

	ОбработчикОповещения = Новый ОписаниеОповещения(
		"Подключаемый_ЗавершениеВыбораМетаданныхДляЗаполнения", ЭтотОбъект);

	ОткрытьФорму(
		"ВнешняяОбработка.PlantUMLEditor.Форма.ФормаВыбораМетаданных", ,
		ЭтотОбъект,
		УникальныйИдентификатор, , ,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры // ЗаполнитьПоМетаданным()

&НаКлиенте
Процедура ОПрограмме(Команда)

	ОткрытьФорму(
		"ВнешняяОбработка.PlantUMLEditor.Форма.ФормаОПрограмме", , ЭтотОбъект, , , , , );

КонецПроцедуры // ОПрограмме()

&НаКлиенте
Процедура ДобавитьОбъект(Команда)

	Если Элементы.РедакторДиаграммы.ТекущаяСтрока = Неопределено Тогда

		Родитель = РедакторДиаграммы.ПолучитьЭлементы();

	Иначе

		ТекущийЭлементДиаграммы = РедакторДиаграммы.НайтиПоИдентификатору(Элементы.РедакторДиаграммы.ТекущаяСтрока);
		Если ТекущийЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Группа Тогда

			Родитель = ТекущийЭлементДиаграммы.ПолучитьЭлементы();

		Иначе

			Если ТекущийЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Связь Тогда
	
				ТекущийОбъект = ТекущийЭлементДиаграммы.ПолучитьРодителя();

			Иначе

				ТекущийОбъект = ТекущийЭлементДиаграммы;

			КонецЕсли;

			РодительОбъекта = ТекущийОбъект.ПолучитьРодителя();
			Если РодительОбъекта = Неопределено Тогда

				Родитель = РедакторДиаграммы.ПолучитьЭлементы();

			Иначе

				Родитель = РодительОбъекта.ПолучитьЭлементы();

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ДобавитьЭлементДиаграммы(ДоступныеТипыЭлементов().Объект, Родитель);

КонецПроцедуры // ДобавитьОбъект()

&НаКлиенте
Процедура ДобавитьСвязь(Команда)

	Родитель = Неопределено;
	Если Элементы.РедакторДиаграммы.ТекущаяСтрока = Неопределено Тогда

		Родитель = РедакторДиаграммы.ПолучитьЭлементы();

	Иначе

		ТекущийЭлементДиаграммы = РедакторДиаграммы.НайтиПоИдентификатору(Элементы.РедакторДиаграммы.ТекущаяСтрока);
		Если ТекущийЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Объект Тогда

			Родитель = ТекущийЭлементДиаграммы.ПолучитьЭлементы();

		ИначеЕсли ТекущийЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Связь Тогда

			Родитель = ТекущийЭлементДиаграммы.ПолучитьРодителя().ПолучитьЭлементы();

		КонецЕсли;

	КонецЕсли;

	Если Родитель = Неопределено Тогда

		СообщениеПользователю = Новый СообщениеПользователю();
		СообщениеПользователю.Текст = НСтр("ru = 'Связь можно добавить только при выделении строки с объектом'");
		СообщениеПользователю.Сообщить();
		Возврат;

	КонецЕсли;

	ДобавитьЭлементДиаграммы(ДоступныеТипыЭлементов().Связь, Родитель);

КонецПроцедуры // ДобавитьСвязь()

&НаКлиенте
Процедура ДобавитьГруппу(Команда)

	ДобавитьЭлементДиаграммы(ДоступныеТипыЭлементов().Группа, РедакторДиаграммы.ПолучитьЭлементы());

КонецПроцедуры // ДобавитьГруппу()

&НаКлиенте
Процедура ОткрытьСвойстваТекущейДиаграммы(Команда)

	НачатьРедактированиеСвойствОбъекта(
			"СвойстваДиаграмм",
			ТекущаяДиаграмма.Ключ,
			ТекущаяДиаграмма.Имя);

КонецПроцедуры // ОткрытьСвойстваТекущейДиаграммы()

&НаКлиенте
Процедура ОткрытьСвойства(Команда)

	ТекущиеДанные = Элементы.РедакторДиаграммы.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда

		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не выбрана строка с элементом диаграммы.'");
		Сообщение.Сообщить();
		Возврат;

	КонецЕсли;

	ИмяТаблицы = ИмяНабораСвойствПоТипуОбъекта(ТекущиеДанные.Тип);
	ИдентификаторЭлемента = ИдентификаторЭлементаДиаграммы(ТекущиеДанные);
	НачатьРедактированиеСвойствОбъекта(
		ИмяТаблицы,
		ИдентификаторЭлемента,
		ТекущиеДанные.ПредставлениеЭлемента,
		ТекущиеДанные.Тип,
		ТекущиеДанные);

КонецПроцедуры // ОткрытьСвойства()

&НаКлиенте
Процедура ОбщиеНастройки(Команда)

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресСервераРендеринга", АдресСервераРендеринга);
	ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ЗавершениеРедактированияОбщихНастроек", ЭтотОбъект);
	ОткрытьФорму(
		"ВнешняяОбработка.PlantUMLEditor.Форма.ФормаОбщиеНастройки",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры // ОбщиеНастройки()

&НаКлиенте
Процедура СохранитьРезультатДиаграммы(Команда)

	ФорматФайла = ФорматРезультатаДиаграммы();
	ИмяФайла = ИмяФайлаДиаграммы();

	ЗаголовокВыбора = НСтр("ru = 'Выберите каталог для сохранения диаграммы'");
	ИмяФайла = СтрШаблон("%1.%2", ИмяФайла, НРег(ФорматФайла));
	ПараметрыДиалога = Новый ПараметрыДиалогаПолученияФайлов(ЗаголовокВыбора, Истина);
	НачатьПолучениеФайлаССервера(АдресКартинкиВоВременномХранилище, ИмяФайла, ПараметрыДиалога);

КонецПроцедуры // СохранитьРезультатДиаграммы()

&НаКлиенте
Процедура ПоказатьТекстUML(Команда)

	ПоказатьТекстUML = Не ПоказатьТекстUML;
	Элементы.ПоказатьТекстUML.Пометка = ПоказатьТекстUML;
	Элементы.РезультатТекстPlantUML.Видимость = ПоказатьТекстUML;

КонецПроцедуры // ПоказатьТекстUML()

&НаКлиенте
Процедура РазвернутьВсе(Команда)

	Для Каждого СтрокаОбъекта Из РедакторДиаграммы.ПолучитьЭлементы() Цикл

		Элементы.РедакторДиаграммы.Развернуть(СтрокаОбъекта.ПолучитьИдентификатор(), Истина);

	КонецЦикла;

КонецПроцедуры // РазвернутьВсе()

&НаКлиенте
Процедура СвернутьВсе(Команда)

	Для Каждого СтрокаОбъекта Из РедакторДиаграммы.ПолучитьЭлементы() Цикл

		Элементы.РедакторДиаграммы.Свернуть(СтрокаОбъекта.ПолучитьИдентификатор());

	КонецЦикла;

КонецПроцедуры // СвернутьВсе()

&НаКлиенте
Процедура СоздатьНовуюДиаграмму(Команда)

	Если РедакторДиаграммы.ПолучитьЭлементы().Количество() = 0
		Или Не Модифицированность Тогда

		СоздатьДиаграмму();
		Возврат;

	КонецЕсли;

	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ЗавершитьСозданиеДиаграммы",
		ЭтотОбъект);
	ВывестиВопросОбИзмененииНастройки(ОбработчикОповещения);

КонецПроцедуры // СоздатьНовуюДиаграмму()

&НаКлиенте
Процедура ВыбратьРеквизитыОбъекта(Команда)

	ТекущийОбъект = Элементы.РедакторДиаграммы.ТекущиеДанные;
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяОбъекта", ТекущийОбъект.Наименование);
	ПараметрыФормы.Вставить("ПутьКМетаданным", ТекущийОбъект.ПутьКМетаданным);

	СтрокаОбъекта = РедакторДиаграммы.НайтиПоИдентификатору(Элементы.РедакторДиаграммы.ТекущаяСтрока);
	ВыбранныеРеквизиты = РеквизитыОбъектаМетаданных(СтрокаОбъекта);
	ПараметрыФормы.Вставить("ВыбранныеРеквизиты", ВыбранныеРеквизиты);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", Элементы.РедакторДиаграммы.ТекущаяСтрока);

	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ЗавершениеВыбораПолейОбъекта",
		ЭтотОбъект,
		ДополнительныеПараметры);

	ОткрытьФорму(
		"ВнешняяОбработка.PlantUMLEditor.Форма.ФормаВыбораПолейОбъекта",
		ПараметрыФормы,
		ЭтотОбъект,
		УникальныйИдентификатор, , , 
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры // ВыбратьРеквизитыОбъекта()

&НаКлиенте
Процедура ЗаполнитьСвязиОбъекта(Команда)

	ВывестиСвязиОбъектаНаСервере();

	Для Каждого СтрокаОбъекта Из РедакторДиаграммы.ПолучитьЭлементы() Цикл

		Элементы.РедакторДиаграммы.Развернуть(СтрокаОбъекта.ПолучитьИдентификатор(), Истина);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьСвязиОбъекта()

&НаКлиенте
Процедура ПереместитьИзГруппы(Команда)

	СтрокаРодитель = РедакторДиаграммы;
	ОбъектПереноса = Элементы.РедакторДиаграммы.ТекущаяСтрока;
	ПеренестиЭлементДиаграммы(Неопределено, ОбъектПереноса, СтрокаРодитель, Истина);
	ПодключитьОбработчикОжидания("ВывестиРезультатДиаграммы", 0.1, Истина);

КонецПроцедуры // ПереместитьИзГруппы()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ДоступныеТипыДиаграмм()

	ОбработкаОбъект = ВнешниеОбработки.Создать("PlantUMLEditor");
	Возврат ОбработкаОбъект.ДоступныеТипыДиаграмм();

КонецФункции // ДоступныеТипыДиаграмм()

&НаСервере
Процедура УстановитьУсловноеОформление()

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("РедакторДиаграммы");

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РедакторДиаграммы.Тип");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = ДоступныеТипыЭлементов().Связь;

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РедакторДиаграммы.ПриемникСвязи");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РедакторДиаграммы.ВыводитьЭлемент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);

КонецПроцедуры // УстановитьУсловноеОформаление()

&НаКлиентеНаСервереБезКонтекста
Функция ДоступныеТипыЭлементов()

	Результат = Новый Структура();

	Результат.Вставить("Объект", "Объект");
	Результат.Вставить("Связь", "Связь");
	Результат.Вставить("Группа", "Группа");

	Возврат Результат;

КонецФункции // ДоступныеТипыЭлементов(ТекущаяДиаграмма, ТипыДиаграмм)

&НаКлиентеНаСервереБезКонтекста
Функция ТипыДиаграммПоИмени(ТипыДиаграмм)

	Результат = Новый Структура();

	Для Каждого ТипДостунойДиаграммы Из ТипыДиаграмм Цикл

		Результат.Вставить(
			ТипДостунойДиаграммы.Ключ,
			ТипДостунойДиаграммы.Значение.Имя);

	КонецЦикла;

	Возврат Результат;

КонецФункции // ДиаграммыПоИмени(ТипыДиаграмм)

&НаКлиенте
Функция ПередатьСвойства(ИмяТаблицыСвойств, ТекущийОбъект, ПредставлениеОбъекта, ТипОбъекта)

	Если Не ЗначениеЗаполнено(ТекущийОбъект) Тогда

		Возврат Новый Соответствие();

	КонецЕсли;

	СвойстваОбъекта = Новый Соответствие();

	Если ТекущийОбъект = ТекущаяДиаграмма.Ключ Тогда

		ПараметрыПоиска = Новый Структура();
		ПараметрыПоиска.Вставить("Диаграмма", ТекущийОбъект);

	Иначе

		СтрокаОбъекта = Новый Структура();
		СтрокаОбъекта.Вставить("Тип", ТипОбъекта);
		СтрокаОбъекта.Вставить("Наименование", ТекущийОбъект);
		СтрокаОбъекта.Вставить("Ключ", ТекущийОбъект);

		ЗначениеПараметров = КлючевыеСвойстваТиповЭлементов(СтрокаОбъекта, ТекущаяДиаграмма);

		ПараметрыПоиска = ЗначениеПараметров.ПоляПоиска;
		ПараметрыПоиска.Удалить("ТипДиаграммы");
		ПараметрыПоиска.Удалить("Свойство");

	КонецЕсли;

	НайденныеСвойстваОбъекта = Объект[ИмяТаблицыСвойств].НайтиСтроки(ПараметрыПоиска);

	Для Каждого СтрокаСвойства Из НайденныеСвойстваОбъекта Цикл

		ТипДиграммыСвойств = СвойстваОбъекта.Получить(СтрокаСвойства.ТипДиаграммы);
		Если ТипДиграммыСвойств = Неопределено Тогда

			СвойстваОбъекта.Вставить(СтрокаСвойства.ТипДиаграммы, Новый Соответствие());
			ТипДиграммыСвойств = СвойстваОбъекта.Получить(СтрокаСвойства.ТипДиаграммы);

		КонецЕсли;

		ТипДиграммыСвойств.Вставить(СтрокаСвойства.Свойство, СтрокаСвойства.Значение);

	КонецЦикла;

	Возврат СвойстваОбъекта;

КонецФункции // ПередатьСвойства()

&НаСервере
Процедура ЗаполнитьДоступныеДиаграммы()

	Для Каждого ТипДостунойДиаграммы Из ТипыДиаграмм Цикл

		НоваяКоманда = Команды.Добавить(ТипДостунойДиаграммы.Ключ);
		НоваяКоманда.Заголовок = ТипДостунойДиаграммы.Значение.Представление;
		НоваяКоманда.Действие = "Подключаемый_СменитьТипДиаграммы";
		НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;

		НоваяКнопка = Элементы.Добавить(НоваяКоманда.Имя, Тип("КнопкаФормы"), Элементы.ПодменюТипДиаграммы);
		НоваяКнопка.ИмяКоманды = ТипДостунойДиаграммы.Ключ;
		ИмяКартинкиТипаДиаграммы = СтрШаблон("Картинка%1", ТипДостунойДиаграммы.Ключ);

		Если Элементы.Найти(ИмяКартинкиТипаДиаграммы) <> Неопределено Тогда

			НоваяКнопка.Картинка = Элементы[ИмяКартинкиТипаДиаграммы].Картинка;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДоступныеДиаграммы()

&НаКлиенте
Процедура ОбработчикЗавершенияРедактированияСвойств(
		РезультатРедактирования,
		ДополнительныеПараметры) Экспорт

	Если РезультатРедактирования = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДополнительныеПараметры.Свойство("ДобавляемаяСтрока") Тогда

		НоваяСтрока = ДополнительныеПараметры.ДобавляемаяСтрока.Родитель.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДополнительныеПараметры.ДобавляемаяСтрока);
		Элементы.РедакторДиаграммы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", НоваяСтрока.ПолучитьИдентификатор());

	КонецЕсли;

	ИдентификаторНовыйИсточникСвязи = Неопределено;
	ИдентификаторСвязи = Неопределено;
	ЗаполнитьСвойства(
		РезультатРедактирования,
		ДополнительныеПараметры.ИмяТаблицыСвойств,
		ДополнительныеПараметры.Значение,
		ИдентификаторНовыйИсточникСвязи,
		ИдентификаторСвязи);

	Если ИдентификаторНовыйИсточникСвязи <> Неопределено Тогда

		Элементы.РедакторДиаграммы.Развернуть(ИдентификаторНовыйИсточникСвязи, Истина);

	КонецЕсли;

	Если ДополнительныеПараметры.ИмяТаблицыСвойств = "СвойстваОбъектов" Тогда

		СтрокаОбъекта = РедакторДиаграммы.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		ПараметрыПоиска = КлючевыеСвойстваТиповЭлементов(СтрокаОбъекта, ТекущаяДиаграмма);
		ЗначенияСвойств = Объект[ПараметрыПоиска.ИмяНабораСвойств].НайтиСтроки(ПараметрыПоиска.ПоляПоиска);

		Если ЗначенияСвойств.Количество() > 0 Тогда

			ДополнитьСвязямиОбъект(СтрокаОбъекта, ЗначенияСвойств[0].Значение);

		КонецЕсли;

	КонецЕсли;

	Если ДополнительныеПараметры.Свойство("ИдентификаторСтроки") Тогда

		ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
		Если ИдентификаторСвязи <> Неопределено Тогда

			ИдентификаторСтроки = ИдентификаторСвязи;

		КонецЕсли;

		СтрокаЭлемента = РедакторДиаграммы.НайтиПоИдентификатору(ИдентификаторСтроки);
		УстановитьКартинкуТипаЭлемента(Объект, Элементы, СтрокаЭлемента, ТекущаяДиаграмма, ТипыОбъектов);
		УстановитьВидимостьЭлементаДиаграммы(СтрокаЭлемента);
		СформироватьПредставлениеЭлемента(СтрокаЭлемента, Объект, ТекущаяДиаграмма);

	КонецЕсли;

	УстановитьТекущийТипДиаграммы();
	ВывестиПараметрыДиаграммы();
	Подключаемый_СформироватьТипыЭлементовСтроки();

	ПодключитьОбработчикОжидания("ВывестиРезультатДиаграммы", 0.1, Истина);

КонецПроцедуры // ОбработчикЗавершенияРедактированияСвойств()

&НаСервере
Процедура ЗаполнитьСвойства(
		РезультатРедактированияСвойств,
		ИмяТаблицы,
		ПараметрОтбора,
		ИдентификаторНовыйИсточникСвязи,
		ИдентификаторСвязи)

	// Удалим ранее сохраненные Свойство.
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ОтборСвойств = ОбъектОбработки.ОтборСвойствПоТаблице(
		ИмяТаблицы, ПараметрОтбора, ТекущаяДиаграмма.Ключ, ТекущаяДиаграмма.Тип);
	ОтборСвойств.Удалить("ТипДиаграммы");

	НайденныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(ОтборСвойств);
	Для Каждого СтрокаСвойств Из НайденныеСтроки Цикл

		Объект[ИмяТаблицы].Удалить(СтрокаСвойств);

	КонецЦикла;

	// Дополним отредактированными свойствами.
	РедактированныеСвойства = ПолучитьИзВременногоХранилища(РезультатРедактированияСвойств);

	Если (РедактированныеСвойства.Свойство("НаименованиеДиаграммы")
		И РедактированныеСвойства.Свойство("ТипДиаграммы"))
		И (РедактированныеСвойства.НаименованиеДиаграммы <> ТекущаяДиаграмма.Имя
		ИЛИ РедактированныеСвойства.ТипДиаграммы <> ТекущаяДиаграмма.Тип) Тогда

		СтрокаДиаграммы = Объект.Диаграммы.НайтиСтроки(Новый Структура("Ключ", ТекущаяДиаграмма.Ключ));
		СтрокаДиаграммы[0].Имя = РедактированныеСвойства.НаименованиеДиаграммы;
		СтрокаДиаграммы[0].Тип = РедактированныеСвойства.ТипДиаграммы;
		ТекущаяДиаграмма = Новый Структура("Имя,Тип,Ключ");
		ТекущаяДиаграмма.Ключ = СтрокаДиаграммы[0].Ключ;
		ТекущаяДиаграмма.Имя = РедактированныеСвойства.НаименованиеДиаграммы;
		ТекущаяДиаграмма.Тип = РедактированныеСвойства.ТипДиаграммы;

	КонецЕсли;

	Если РедактированныеСвойства.Свойство("СвойстваСвязи") Тогда

		ТекущаяСвязь = СвязьДиаграммы(ПараметрОтбора);
		ТекущаяСвязь.Наименование = РедактированныеСвойства.Наименование;
		ТекущаяСвязь.ПриемникСвязи = РедактированныеСвойства.Приемник;

		Если ТекущаяСвязь.ПолучитьРодителя().Наименование <> РедактированныеСвойства.Источник Тогда

			НовыйИсточникСвязи = ОбъектДиаграммы(РедактированныеСвойства.Источник);
			Если НовыйИсточникСвязи = Неопределено Тогда

				СообщениеПользователю = Новый СообщениеПользователю();
				СообщениеПользователю.Текст = НСтр("ru = 'Указанный источник связи не найден.'");
				СообщениеПользователю.Сообщить();

			Иначе

				НоваяСвязь = НовыйИсточникСвязи.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСвязь, ТекущаяСвязь);
				ТекущаяСвязь.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекущаяСвязь);
				ИдентификаторНовыйИсточникСвязи = НовыйИсточникСвязи.ПолучитьИдентификатор();
				ИдентификаторСвязи = НоваяСвязь.ПолучитьИдентификатор();

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если РедактированныеСвойства.Свойство("СвойстваОбъекта")
		Или РедактированныеСвойства.Свойство("СвойстваГруппы") Тогда

		ТекущийОбъектДиаграммы = ОбъектДиаграммы(ПараметрОтбора);
		Если ТекущийОбъектДиаграммы.Тип = ДоступныеТипыЭлементов().Объект
			И РедактированныеСвойства.Наименование <> ТекущийОбъектДиаграммы.Наименование Тогда

			ЗаменитьНаименованиеОбъекта(
				РедакторДиаграммы.ПолучитьЭлементы(),
				ТекущийОбъектДиаграммы.Наименование,
				РедактированныеСвойства.Наименование);

		КонецЕсли;
		ТекущийОбъектДиаграммы.Наименование = РедактированныеСвойства.Наименование;
		ОтборСвойств.Объект = ТекущийОбъектДиаграммы.Наименование;
		Если РедактированныеСвойства.Свойство("ПутьКМетаданным") Тогда

			ТекущийОбъектДиаграммы.ПутьКМетаданным = РедактированныеСвойства.ПутьКМетаданным;

		КонецЕсли;

	КонецЕсли;

	Для Каждого СтрокаСвойств Из РедактированныеСвойства.НаборСвойств Цикл

		Если Не ЗначениеЗаполнено(СтрокаСвойств.Значение) Тогда

			Продолжить;

		КонецЕсли;

		НоваяСтрока = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОтборСвойств);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСвойств);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьСвойства()

&НаСервере
Процедура ЗаменитьНаименованиеОбъекта(ЭлементыДиаграммы, ТекущееИмяОбъекта, НовоеИмяОбъекта)

	Для Каждого ЭлементДиаграммы Из ЭлементыДиаграммы Цикл

		Если ЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Связь
			И ЭлементДиаграммы.ПриемникСвязи = ТекущееИмяОбъекта Тогда

			ЭлементДиаграммы.ПриемникСвязи = НовоеИмяОбъекта;
			СформироватьПредставлениеЭлемента(ЭлементДиаграммы, Объект, ТекущаяДиаграмма);

		КонецЕсли;

		ЗаменитьНаименованиеОбъекта(ЭлементДиаграммы.ПолучитьЭлементы(), ТекущееИмяОбъекта, НовоеИмяОбъекта)

	КонецЦикла;

КонецПроцедуры // ЗаменитьНаименованиеОбъекта()

&НаСервере
Функция СвязьДиаграммы(КлючСвязи)

	Возврат ЭлементДиаграммыПоКлючу("Ключ", КлючСвязи, РедакторДиаграммы.ПолучитьЭлементы());

КонецФункции // СвязьДиаграммы()

&НаСервере
Функция ОбъектДиаграммы(НаименованиеОбъекта)

	Возврат ЭлементДиаграммыПоКлючу("Наименование", НаименованиеОбъекта, РедакторДиаграммы.ПолучитьЭлементы());

КонецФункции // ОбъектДиаграммы()

&НаСервере
Функция ЭлементДиаграммыПоКлючу(Ключ, ЗначениеКлюча, ЭлементыДиаграммы)

	Для Каждого СтрокаЭлементаДиаграммы Из ЭлементыДиаграммы Цикл

		Если СтрокаЭлементаДиаграммы[Ключ] = ЗначениеКлюча Тогда

			Возврат СтрокаЭлементаДиаграммы;

		КонецЕсли;

		НайденныйОбъект =  ЭлементДиаграммыПоКлючу(Ключ, ЗначениеКлюча, СтрокаЭлементаДиаграммы.ПолучитьЭлементы());

		Если НайденныйОбъект <> Неопределено Тогда

			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат НайденныйОбъект;

КонецФункции // ЭлементДиаграммыПоКлючу()

&НаКлиенте
Процедура НачатьРедактированиеСвойствОбъекта(
		ИмяТаблицыСвойств,
		ТекущийОбъект,
		ПредставлениеОбъекта,
		ТипОбъекта = Неопределено,
		ДанныеТекущегоОбъекта = Неопределено)

	ПараметрыЗаполнения = ПараметрыЗаполненияЭлементаДиаграммы(
		ИмяТаблицыСвойств,
		ТекущийОбъект,
		ПредставлениеОбъекта,
		ТипОбъекта);

	ДополнитьПараметрыЗаполненияЭлементовДиаграммы(ПараметрыЗаполнения, ДанныеТекущегоОбъекта);

	ДополнительныеПараметры = ПараметрыЗавершенияРедактированияСвойствЭлементов(
		ИмяТаблицыСвойств,
		ТекущийОбъект,
		ТипОбъекта);
	
	Если ДанныеТекущегоОбъекта <> Неопределено Тогда

		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ДанныеТекущегоОбъекта.ПолучитьИдентификатор());

	КонецЕсли;

	ОткрытьФормуРедактированияЭлементаДиаграммы(ДополнительныеПараметры, ПараметрыЗаполнения);

КонецПроцедуры // НачатьРедактированиеСвойствОбъекта()

&НаКлиенте
Процедура ОткрытьФормуРедактированияЭлементаДиаграммы(Знач ДополнительныеПараметры, ПараметрыЗаполнения)

	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ОбработчикЗавершенияРедактированияСвойств",
		ЭтотОбъект,
		ДополнительныеПараметры);

	ОткрытьФорму(
		"ВнешняяОбработка.PlantUMLEditor.Форма.ФормаНастройкиСвойств",
		ПараметрыЗаполнения,
		ЭтотОбъект,
		УникальныйИдентификатор, , , 
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры // ОткрытьФормуРедактированияЭлементаДиаграммы()

&НаКлиенте
Функция ПараметрыЗавершенияРедактированияСвойствЭлементов(ИмяТаблицыСвойств, ТекущийОбъект, ТипОбъекта)

	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяТаблицыСвойств", ИмяТаблицыСвойств);
	ДополнительныеПараметры.Вставить("ТипОбъекта", ТипОбъекта);
	ДополнительныеПараметры.Вставить("Значение", ТекущийОбъект);

	Возврат ДополнительныеПараметры;

КонецФункции // ПараметрыЗавершенияРедактированияСвойствЭлементов()

&НаКлиенте
Процедура ДополнитьПараметрыЗаполненияЭлементовДиаграммы(ПараметрыЗаполнения, ДанныеТекущегоОбъекта = Неопределено)

	ЗаполненТекущийОбъект = ДанныеТекущегоОбъекта <> Неопределено;

	Если ПараметрыЗаполнения.ТипОбъекта = ДоступныеТипыЭлементов().Связь Тогда

		Если ЗаполненТекущийОбъект Тогда

			Если ТипЗнч(ДанныеТекущегоОбъекта) = Тип("Структура")
				И ДанныеТекущегоОбъекта.Свойство("Источник") Тогда

				ПараметрыЗаполнения.Вставить("Источник", ДанныеТекущегоОбъекта.Источник);

			ИначеЕсли ТипЗнч(ДанныеТекущегоОбъекта) = Тип("Структура")
				И ДанныеТекущегоОбъекта.Свойство("Родитель") Тогда

				ПараметрыЗаполнения.Вставить("Источник", ДанныеТекущегоОбъекта.Родитель.Наименование);

			Иначе

				ПараметрыЗаполнения.Вставить("Источник", ДанныеТекущегоОбъекта.ПолучитьРодителя().Наименование);

			КонецЕсли;
			ПараметрыЗаполнения.Вставить("Приемник", ДанныеТекущегоОбъекта.ПриемникСвязи);
			ПараметрыЗаполнения.Вставить("Наименование", ДанныеТекущегоОбъекта.Наименование);

		КонецЕсли;

		ТекущиеОбъектыДиаграммы = Новый СписокЗначений();
		ТипыЭлементовСпискаВыбора = Новый Массив();
		ТипыЭлементовСпискаВыбора.Добавить(ДоступныеТипыЭлементов().Объект);
	
		ПолучитьВсеОбъекты(
			ТекущиеОбъектыДиаграммы,
			РедакторДиаграммы.ПолучитьЭлементы(),
			ТипыЭлементовСпискаВыбора);

		ПараметрыЗаполнения.Вставить("СписокОбъектов", ТекущиеОбъектыДиаграммы);

	ИначеЕсли ЗаполненТекущийОбъект И (ПараметрыЗаполнения.ТипОбъекта = ДоступныеТипыЭлементов().Объект
		Или ПараметрыЗаполнения.ТипОбъекта = ДоступныеТипыЭлементов().Группа) Тогда

		ПараметрыЗаполнения.Вставить("Наименование", ДанныеТекущегоОбъекта.Наименование);
		ПараметрыЗаполнения.Вставить("ПутьКМетаданным", ДанныеТекущегоОбъекта.ПутьКМетаданным);

	КонецЕсли;

КонецПроцедуры // ДополнитьПараметрыЗаполненияЭлементовДиаграммы()

&НаКлиенте
Функция ПараметрыЗаполненияЭлементаДиаграммы(ИмяТаблицыСвойств, ТекущийОбъект, ПредставлениеОбъекта, ТипОбъекта)

	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Диаграмма", ТекущаяДиаграмма.Ключ);
	ПараметрыЗаполнения.Вставить("НаименованиеДиаграммы", ТекущаяДиаграмма.Имя);
	ПараметрыЗаполнения.Вставить("ТипДиаграммы", ТекущаяДиаграмма.Тип);
	ПараметрыЗаполнения.Вставить("Объект", ТекущийОбъект);
	ПараметрыЗаполнения.Вставить(
		"Свойства",
		ПередатьСвойства(ИмяТаблицыСвойств, ТекущийОбъект, ПредставлениеОбъекта, ТипОбъекта));
	ПараметрыЗаполнения.Вставить("ИмяТаблицы", ИмяТаблицыСвойств);
	ПараметрыЗаполнения.Вставить("ВидСвойств", ИмяСвойствПоИмениНабораСвойств(ИмяТаблицыСвойств));
	ПараметрыЗаполнения.Вставить("ПредставлениеЭлемента", ПредставлениеОбъекта);
	ПараметрыЗаполнения.Вставить("ТипОбъекта", ТипОбъекта);

	Возврат ПараметрыЗаполнения;

КонецФункции // ПараметрыЗаполненияЭлементаДиаграммы()

&НаКлиенте
Функция ИмяСвойствПоИмениНабораСвойств(ИмяТаблицыСвойств)

	ИменаСвойств = Новый Соответствие();
	ИменаСвойств.Вставить("СвойстваДиаграмм", "СвойстваДиаграммы");
	ИменаСвойств.Вставить("СвойстваОбъектов", "СвойстваОбъекта");
	ИменаСвойств.Вставить("СвойстваСвязей", "СвойстваСвязи");
	ИменаСвойств.Вставить("СвойстваГрупп", "СвойстваГруппы");

	Возврат ИменаСвойств.Получить(ИмяТаблицыСвойств);

КонецФункции // НачатьРедактированиеСвойствОбъекта()

&НаКлиенте
Процедура ОбновитьДанныеТекущейДиаграммы(
		СтрокаДиаграммы = Неопределено,
		ВыводитьДиаграмму = Истина,
		ФормироватьДополнительныеПараметры = Истина)

	Результат = Новый Структура();
	Результат.Вставить("Ключ", Неопределено);
	Результат.Вставить("Имя", "");
	Результат.Вставить("Тип", "");

	Если СтрокаДиаграммы <> Неопределено Тогда

		ЗаполнитьЗначенияСвойств(Результат, СтрокаДиаграммы);

	КонецЕсли;

	ТекущаяДиаграмма = Новый ФиксированнаяСтруктура(Результат);
	УстановитьТекущийТипДиаграммы();
	ВывестиПараметрыДиаграммы();
	УстановитьКартинкуДляДобавленияОбъекта();

	Если ФормироватьДополнительныеПараметры Тогда

		ЗаполнитьДополнительныеПараметрыЭлементовДиаграммы(РедакторДиаграммы.ПолучитьЭлементы());

	КонецЕсли;

	Если Не ВыводитьДиаграмму Тогда

		Возврат;

	КонецЕсли;

	ПодключитьОбработчикОжидания("ВывестиРезультатДиаграммы", 0.1, Истина);

КонецПроцедуры // ОбновитьДанныеТекущейДиаграммы()

&НаКлиентеНаСервереБезКонтекста
Функция ПустойИдентификатор(Идентификатор)

	Возврат Идентификатор = Неопределено
		ИЛИ Идентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");

КонецФункции // ПустойИдентификатор()

&НаКлиенте
Процедура Подключаемый_ЗавершениеВыбораМетаданныхДляЗаполнения(
		РезультатВыбора,
		ДополнительныеПараметры = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(РезультатВыбора) Тогда

		Возврат;

	КонецЕсли;

	ДобавитьВыбранныеОбъекты(РезультатВыбора);

	Для Каждого СтрокаОбъекта Из РедакторДиаграммы.ПолучитьЭлементы() Цикл

		Элементы.РедакторДиаграммы.Развернуть(СтрокаОбъекта.ПолучитьИдентификатор(), Истина);

	КонецЦикла;

КонецПроцедуры // Подключаемый_ЗавершениеВыбораМетаданныхДляЗаполнения()

&НаСервере
Процедура ДобавитьВыбранныеОбъекты(РезультатВыбора)

	ЭлементыДиаграммы = РеквизитФормыВЗначение("РедакторДиаграммы");

	УсловиеПоискаОбъекта = Новый Структура();
	УсловиеПоискаОбъекта.Вставить("Тип", ДоступныеТипыЭлементов().Объект);

	ТекущиеОбъектыКонфигурации = ВыбранныеОбъектыКонфигурации(
		ЭлементыДиаграммы.Строки.НайтиСтроки(УсловиеПоискаОбъекта, Истина));

	Для Каждого ВыбранныйОбъект Из РезультатВыбора.ВыбранныеОбъекты Цикл

		ПредставлениеВидаОбъекта = ТипыМетаданныхПоВидуОбъекта(ВыбранныйОбъект.Получить("ВидОбъекта"));
		НаименованиеОбъекта = ВыбранныйОбъект.Получить("ИмяОбъекта");

		УсловиеПоискаОбъекта.Вставить("Наименование", НаименованиеОбъекта);
		НайденныеОбъекты = ЭлементыДиаграммы.Строки.НайтиСтроки(УсловиеПоискаОбъекта);
		Если НайденныеОбъекты.Количество() > 0 Тогда

			// Текущий объект ранее был добавлен в диагарамму.
			Продолжить;

		КонецЕсли;

		РодительНовогоОбъекта = ГруппаОбъектаПоВидуМетаданных(
			ЭлементыДиаграммы,
			ВыбранныйОбъект.Получить("ВидОбъекта"),
			РезультатВыбора.СгруппироватьПоВидамМетаданных);

		ОбъектДиаграммы = РодительНовогоОбъекта.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ОбъектДиаграммы, УсловиеПоискаОбъекта);
		ОбъектДиаграммы.ПутьКМетаданным = ВыбранныйОбъект.Получить("ПутьКМетаданным");

		УстановитьСвойстваВыбранномуОбъектуПоУмолчанию(
			Объект,
			НаименованиеОбъекта,
			ПредставлениеВидаОбъекта);
		УстановитьКартинкуТипаЭлемента(Объект, Элементы, ОбъектДиаграммы, ТекущаяДиаграмма, ТипыОбъектов);
		СформироватьПредставлениеЭлемента(ОбъектДиаграммы, Объект, ТекущаяДиаграмма);

		Если Не РезультатВыбора.ВыводитьСвязиМеждуОбъектами Тогда

			Продолжить;

		КонецЕсли;
		
		ДобавитьСвязиОбъекта(
			ЭлементыДиаграммы,
			ОбъектДиаграммы,
			ВыбранныйОбъект.Получить("ВидОбъекта"),
			ВыбранныйОбъект.Получить("ИмяОбъекта"),
			ТекущиеОбъектыКонфигурации);

	КонецЦикла;

	ЗначениеВДанныеФормы(ЭлементыДиаграммы, РедакторДиаграммы);

	СформироватьНаСервере();

КонецПроцедуры // ДобавитьВыбранныеОбъекты()

&НаСервере
Функция ГруппаОбъектаПоВидуМетаданных(
	ЭлементыДиаграммы,
	ВидМетаданных,
	СгруппироватьПоВидамМетаданных)

	Если Не СгруппироватьПоВидамМетаданных Тогда

		Возврат ЭлементыДиаграммы;

	КонецЕсли;

	УсловиеПоиска = Новый Структура();
	УсловиеПоиска.Вставить("Наименование", ВидМетаданных);
	УсловиеПоиска.Вставить("Тип", ДоступныеТипыЭлементов().Группа);

	НайденныеГруппы = ЭлементыДиаграммы.Строки.НайтиСтроки(УсловиеПоиска, Истина);

	Если НайденныеГруппы.Количество() > 0 Тогда

		Возврат НайденныеГруппы[0];

	КонецЕсли;

	НоваяГруппа = ЭлементыДиаграммы.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяГруппа, УсловиеПоиска);
	НоваяГруппа.Ключ = Новый УникальныйИдентификатор();
	УстановитьКартинкуТипаЭлемента(Объект, Элементы, НоваяГруппа, ТекущаяДиаграмма, ТипыОбъектов);
	СформироватьПредставлениеЭлемента(НоваяГруппа, Объект, ТекущаяДиаграмма);

	Возврат НоваяГруппа;

КонецФункции // ГруппаОбъектаПоВидуМетаданных()

&НаСервере
Процедура УстановитьСвойстваВыбранномуОбъектуПоУмолчанию(
		Объект,
		НаименованиеОбъекта,
		ПредставлениеВидаОбъекта)

		ДобавитьСвойствоОбъектаДиаграммы(
			Объект,
			НаименованиеОбъекта, 
			"ТипОбъекта",
			"class",
			ТекущаяДиаграмма.Ключ,
			ДоступныеТипыДиаграмм().ДиаграммаКлассов.Имя,
			НСтр("ru = 'Класс'"));

		ДобавитьСвойствоОбъектаДиаграммы(
			Объект,
			НаименованиеОбъекта, 
			"ТипОбъекта",
			"do",
			ТекущаяДиаграмма.Ключ,
			ДоступныеТипыДиаграмм().ДиаграммаДеятельности.Имя,
			НСтр("ru = 'Действие'"));

		ДобавитьСвойствоОбъектаДиаграммы(
			Объект,
			НаименованиеОбъекта, 
			"ТипОбъекта",
			"participant",
			ТекущаяДиаграмма.Ключ,
			ДоступныеТипыДиаграмм().ДиаграммаПоследовательностей.Имя,
			НСтр("ru = 'Участник'"));

		ДобавитьСвойствоОбъектаДиаграммы(
			Объект,
			НаименованиеОбъекта, 
			"Дженерик",
			ПредставлениеВидаОбъекта,
			ТекущаяДиаграмма.Ключ,
			ДоступныеТипыДиаграмм().ДиаграммаКлассов.Имя);

КонецПроцедуры // УстановитьСвойстваВыбранномуОбъектуПоУмолчанию()

&НаСервере
Функция ТипыМетаданныхПоВидуОбъекта(ВидОбъекта)

	ВидыОбъектов = Новый Соответствие();
	ВидыОбъектов.Вставить("Справочники", НСтр("ru = 'Справочник'"));
	ВидыОбъектов.Вставить("Документы", НСтр("ru = 'Документ'"));
	ВидыОбъектов.Вставить("РегистрыСведений", НСтр("ru = 'РегистрСведений'"));
	ВидыОбъектов.Вставить("РегистрыНакопления", НСтр("ru = 'РегистрНакопления'"));
	ВидыОбъектов.Вставить("Перечисления", НСтр("ru = 'Перечисление'"));
	ВидыОбъектов.Вставить("ПланыВидовХарактеристик", НСтр("ru = 'ПланВидовХарактеристик'"));
	ВидыОбъектов.Вставить("ПланыСчетов", НСтр("ru = 'ПланСчетов'"));
	ВидыОбъектов.Вставить("ПланыВидовРасчета", НСтр("ru = 'ПланВидовРасчета'"));
	ВидыОбъектов.Вставить("РегистрыБухгалтерии", НСтр("ru = 'РегистрБухгалтерии'"));
	ВидыОбъектов.Вставить("РегистрыРасчета", НСтр("ru = 'РегистрРасчета'"));

	Возврат ВидыОбъектов.Получить(ВидОбъекта);

КонецФункции // ТипыМетаданныхПоВидуОбъекта()

&НаСервере
Процедура ДобавитьСвязиОбъекта(
		ЭлементыДиаграммы,
		ОбъектДиаграммы,
		ВидОбъектов,
		ИмяОбъекта,
		ТекущиеОбъекты)

	Попытка

		МетаданныеОбъекта = Метаданные[ВидОбъектов][ИмяОбъекта];

	Исключение

		ВызватьИсключение НСтр("ru = 'Выбранный объект не найден в метаданных конфигурации.'");

	КонецПопытки;
	ТолькоИспользованиеВДругихОбъектах = Истина;
	СвязанныеОбъекты = Новый Соответствие();

	Если ЭтоРегистр(МетаданныеОбъекта) Тогда

		ЗаполнитьСтандартнымиРеквизитами(МетаданныеОбъекта, ОбъектДиаграммы, ТекущиеОбъекты, СвязанныеОбъекты);
		ЗаполнитьРеквизитами(МетаданныеОбъекта, ОбъектДиаграммы, ТекущиеОбъекты, СвязанныеОбъекты, "Измерения");
		ЗаполнитьРеквизитами(МетаданныеОбъекта, ОбъектДиаграммы, ТекущиеОбъекты, СвязанныеОбъекты, "Ресурсы");
		ЗаполнитьРеквизитами(МетаданныеОбъекта, ОбъектДиаграммы, ТекущиеОбъекты, СвязанныеОбъекты);

	ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеОбъекта) Тогда

		ТолькоИспользованиеВДругихОбъектах = Ложь;

	Иначе

		ЗаполнитьСтандартнымиРеквизитами(МетаданныеОбъекта, ОбъектДиаграммы, ТекущиеОбъекты, СвязанныеОбъекты);
		ЗаполнитьРеквизитами(МетаданныеОбъекта, ОбъектДиаграммы, ТекущиеОбъекты, СвязанныеОбъекты);
		ЗаполнитьОбщимиРеквизитами(МетаданныеОбъекта, ОбъектДиаграммы, ТекущиеОбъекты, СвязанныеОбъекты);
		ТолькоИспользованиеВДругихОбъектах = Ложь;

	КонецЕсли;

	ДополнитьСвязиПоОбъекту(ОбъектДиаграммы, СвязанныеОбъекты);

	Если Не ТолькоИспользованиеВДругихОбъектах Тогда

		ЗаполнитьСвязьВыбраннымОбъектам(ЭлементыДиаграммы, ВидОбъектов, ОбъектДиаграммы, ТекущиеОбъекты);

	КонецЕсли;

	ЧастиПутиКМетаданным = СтрРазделить(ОбъектДиаграммы.ПутьКМетаданным, ".");
	ДобавитьОбъектВВыбранные(ОбъектДиаграммы, ТекущиеОбъекты, ЧастиПутиКМетаданным);

КонецПроцедуры // ДобавитьРеквизитыОбъекта()

&НаСервере
Процедура ЗаполнитьСтандартнымиРеквизитами(МетаданныеОбъекта, ОбъектДиаграммы, ВыбранныеОбъекты, СвязанныеОбъекты)

	ИсключитьРеквизиты = ИсключаемыеСтандартныеРеквизиты();
	Для Каждого ТекРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл

		Если ИсключитьРеквизиты.Найти(ТекРеквизит.Имя) <> Неопределено Тогда

			Продолжить;

		КонецЕсли;

		НайтиСвязиОбъектов(ТекРеквизит, ВыбранныеОбъекты, СвязанныеОбъекты);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьСтандартнымиРеквизитами()

&НаСервере
Процедура ЗаполнитьРеквизитами(
		МетаданныеОбъекта,
		ОбъектДиаграммы,
		ВыбранныеОбъекты,
		СвязанныеОбъекты,
		ИмяРеквизитов = "Реквизиты")

	Для Каждого ТекРеквизит Из МетаданныеОбъекта[ИмяРеквизитов] Цикл

		НайтиСвязиОбъектов(ТекРеквизит, ВыбранныеОбъекты, СвязанныеОбъекты);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьСтандартнымиРеквизитами()

&НаСервере
Процедура ЗаполнитьОбщимиРеквизитами(МетаданныеОбъекта, ОбъектДиаграммы, ВыбранныеОбъекты, СвязанныеОбъекты)

	Для Каждого ТекРеквизит Из Метаданные.ОбщиеРеквизиты Цикл

		ЗначениеСостава = ТекРеквизит.Состав.Найти(МетаданныеОбъекта);

		Если ЗначениеСостава = Неопределено 
			ИЛИ (НЕ ЗначениеСостава.Использование =
				Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать) Тогда

			Продолжить;

		КонецЕсли;

		НайтиСвязиОбъектов(ТекРеквизит, ВыбранныеОбъекты, СвязанныеОбъекты);

	КонецЦикла;

КонецПроцедуры // ЗаполнитьОбщимиРеквизитами()

&НаСервере
Процедура ДополнитьСвязиПоОбъекту(ОбъектДиаграммы, СвязанныеОбъекты)

	ИменаСвязейОбъекта = Новый Соответствие();
	Для Каждого ИмяСвязиОбъекта Из ОбъектДиаграммы.Строки Цикл

		ИменаСвязейОбъекта.Вставить(ИмяСвязиОбъекта.Наименование, ИмяСвязиОбъекта.ПриемникСвязи);

	КонецЦикла;

	Для Каждого ОбъектСвязи Из СвязанныеОбъекты Цикл

		НайденнаяСвязь = ИменаСвязейОбъекта.Получить(ОбъектСвязи.Значение);
		Если НайденнаяСвязь <> Неопределено И ОбъектСвязи.Ключ = НайденнаяСвязь Тогда

			Продолжить;

		КонецЕсли;

		СвязьСОбъектом = ОбъектДиаграммы.Строки.Добавить();
		СвязьСОбъектом.Ключ = Новый УникальныйИдентификатор();
		СвязьСОбъектом.ПриемникСвязи = ОбъектСвязи.Ключ;
		СвязьСОбъектом.Наименование = ОбъектСвязи.Значение;
		СвязьСОбъектом.Тип = ДоступныеТипыЭлементов().Связь;
		УстановитьСвойстваСвязиОбъектаПоУмолчанию(Объект, СвязьСОбъектом.Ключ, ТекущаяДиаграмма.Ключ);
		УстановитьКартинкуТипаЭлемента(Объект, Элементы, СвязьСОбъектом, ТекущаяДиаграмма, ТипыОбъектов);
		СформироватьПредставлениеЭлемента(СвязьСОбъектом, Объект, ТекущаяДиаграмма);

	КонецЦикла;

КонецПроцедуры // ДополнитьСвязиПоОбъекту(

&НаСервере
Процедура НайтиСвязиОбъектов(Реквизит, ВыбранныеОбъекты, СвязанныеОбъекты)

	Для Каждого ОбъектСвязи Из ВыбранныеОбъекты Цикл

		Если Не ЗначениеЗаполнено(ОбъектСвязи.ТабличнаяЧастьОбъекта)
			И ОбъектСвязи.Тип <> Неопределено
			И Реквизит.Тип.СодержитТип(ОбъектСвязи.Тип) Тогда

			Если СвязанныеОбъекты.Получить(ОбъектСвязи.ИмяОбъекта) = Неопределено Тогда

				СвязанныеОбъекты.Вставить(ОбъектСвязи.ИмяОбъекта, Реквизит.Имя);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // НайтиСвязиОбъектов()

&НаСервере
Функция ВыбранныеОбъектыКонфигурации(ТекущиеОбъекты)

	ОписаниеОбъектов = Новый ТаблицаЗначений();
	ОписаниеОбъектов.Колонки.Добавить("Объект");
	ОписаниеОбъектов.Колонки.Добавить("Тип");
	ОписаниеОбъектов.Колонки.Добавить("ТабличнаяЧастьОбъекта");
	ОписаниеОбъектов.Колонки.Добавить("ИмяОбъекта");
	ОписаниеОбъектов.Колонки.Добавить("ВидОбъекта");

	Для Каждого ТекущийОбъект Из ТекущиеОбъекты Цикл

		Если ПустаяСтрока(ТекущийОбъект.ПутьКМетаданным) Тогда

			Продолжить;

		КонецЕсли;

		СоставляющиеПутиМетаданных = СтрРазделить(ТекущийОбъект.ПутьКМетаданным, ".");

		Если СтрНайти(ТекущийОбъект.ПутьКМетаданным, "ТабличныеЧасти") > 0 Тогда

			КоличествоПараметровМетаданных = ДлинаПутиМетаданныхТабличнойЧасти();

			Если СоставляющиеПутиМетаданных.Количество() <> КоличествоПараметровМетаданных Тогда

				Продолжить;

			КонецЕсли;

		КонецЕсли;

		ДобавитьОбъектВВыбранные(ТекущийОбъект, ОписаниеОбъектов, СоставляющиеПутиМетаданных);

	КонецЦикла;

	Возврат ОписаниеОбъектов;

КонецФункции // ВыбранныеОбъектыКонфигурации()

&НаСервере
Процедура ДобавитьОбъектВВыбранные(СтрокаОбъекта, ВыбранныеОбъекты, ПутиКМетаданным)

	ВидТекущегоОбъекта = ТипОбъектаПоГруппе(ПутиКМетаданным[0]);

	Если ВидТекущегоОбъекта = Неопределено Тогда

		Возврат;

	КонецЕсли;

	ДлинаПутиКСсылкеОбъекта = 2;
	ДлинаКПутиТабличнойЧасти = ДлинаПутиМетаданныхТабличнойЧасти();
	ЭтоТабличнаяЧасть = Ложь;

	Если ПутиКМетаданным.Количество() = ДлинаПутиКСсылкеОбъекта Тогда

		ИмяОбъекта = ПутиКМетаданным[1];
		ИмяОбъектаПредставления = СтрокаОбъекта.Наименование;

	Иначе

		Если ПутиКМетаданным.Количество() <> ДлинаКПутиТабличнойЧасти Тогда

			Возврат;

		КонецЕсли;

		ИмяОбъекта = ПутиКМетаданным[1];
		ИмяОбъектаПредставления = ПутиКМетаданным[1];
		ЭтоТабличнаяЧасть = Истина;

	КонецЕсли;

	ИмяТипаОбъекта = СтрШаблон("%1.%2", ВидТекущегоОбъекта, ИмяОбъекта);
	Попытка

		ТипЗначенияОбъекта = Тип(ИмяТипаОбъекта);

	Исключение

		Возврат;

	КонецПопытки;

	НоваяСтрока = ВыбранныеОбъекты.Добавить();
	НоваяСтрока.Объект = СтрокаОбъекта.Наименование;
	НоваяСтрока.Тип = ТипЗначенияОбъекта;
	НоваяСтрока.ИмяОбъекта = ИмяОбъектаПредставления;
	НоваяСтрока.ВидОбъекта = ПутиКМетаданным[0];
	Если ЭтоТабличнаяЧасть Тогда

		НоваяСтрока.ТабличнаяЧастьОбъекта = ПутиКМетаданным[1];

	КонецЕсли;

КонецПроцедуры // ДобавитьОбъектВВыбранные()

&НаКлиентеНаСервереБезКонтекста
Функция ТипОбъектаПоГруппе(НаименованиеГруппы)

	СсылочныеГруппы = Новый Соответствие();
	СсылочныеГруппы.Вставить("Справочники", "СправочникСсылка");
	СсылочныеГруппы.Вставить("Документы", "ДокументСсылка");
	СсылочныеГруппы.Вставить("Перечисления", "ПеречислениеСсылка");
	СсылочныеГруппы.Вставить("ПланыВидовХарактеристик", "ПланВидовХарактеристикСсылка");
	СсылочныеГруппы.Вставить("ПланыСчетов", "ПланСчетовСсылка");
	СсылочныеГруппы.Вставить("ПланыВидовРасчетов", "ПланВидовРасчетовСсылка");
	СсылочныеГруппы.Вставить("РегистрыСведений", "");
	СсылочныеГруппы.Вставить("РегистрыНакопления", "");
	СсылочныеГруппы.Вставить("РегистрыБухгалтерии", "");
	СсылочныеГруппы.Вставить("РегистрыРасчета", "");

	Возврат СсылочныеГруппы.Получить(НаименованиеГруппы);

КонецФункции // ТипОбъектаПоГруппе()

&НаСервереБезКонтекста
Функция ЭтоРегистр(ОбъектМетаданных)

	Возврат Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных)
		Или Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных);

КонецФункции // ЭтоРегистр()

&НаСервере
Процедура ЗаполнитьСвязьВыбраннымОбъектам(ЭлементыДиаграммы, ВидОбъектов, ОбъектДиаграммы, ТекущиеОбъекты)

	ВидТекущегоОбъекта = ТипОбъектаПоГруппе(ВидОбъектов);

	Если ВидТекущегоОбъекта = Неопределено Тогда

		Возврат;

	КонецЕсли;

	ИмяТипаОбъекта = СтрШаблон(
		"%1.%2",
		ВидТекущегоОбъекта,
		ОбъектДиаграммы.Наименование);
	Попытка

		ТипЗначенияОбъекта = Тип(ИмяТипаОбъекта);

	Исключение

		Возврат;

	КонецПопытки;


	Для Каждого ОбъектСвязи Из ТекущиеОбъекты Цикл

		НайденаСвязь = Ложь;
		ИмяРеквизитаСвязи = "";

		ЧастиИмени = СтрРазделить(ОбъектСвязи.ИмяОбъекта, ".");
		Если ЧастиИмени.Количество() =  2 Тогда
			ИмяОбъекта = ЧастиИмени[1];
		Иначе
			ИмяОбъекта = ОбъектСвязи.ИмяОбъекта;
		КонецЕсли;

		Попытка

			МетаданныеОбъекта = Метаданные[ОбъектСвязи.ВидОбъекта][ИмяОбъекта];

		Исключение

			Продолжить;

		КонецПопытки;

		Если Метаданные.Перечисления.Содержит(МетаданныеОбъекта) Тогда

			Продолжить;

		ИначеЕсли ЭтоРегистр(МетаданныеОбъекта) Тогда

			НайтиОбъектПоРеквизитам(
				НайденаСвязь, ИмяРеквизитаСвязи, МетаданныеОбъекта, ТипЗначенияОбъекта, "СтандартныеРеквизиты");
			НайтиОбъектПоРеквизитам(
				НайденаСвязь, ИмяРеквизитаСвязи, МетаданныеОбъекта, ТипЗначенияОбъекта, "Измерения");
			НайтиОбъектПоРеквизитам(НайденаСвязь, ИмяРеквизитаСвязи, МетаданныеОбъекта, ТипЗначенияОбъекта, "Ресурсы");
			НайтиОбъектПоРеквизитам(НайденаСвязь, ИмяРеквизитаСвязи, МетаданныеОбъекта, ТипЗначенияОбъекта);

		Иначе

			Если ЗначениеЗаполнено(ОбъектСвязи.ТабличнаяЧастьОбъекта) Тогда

				Попытка

					МетаданныеТЧ = Метаданные[ОбъектСвязи.ВидОбъекта][ОбъектСвязи.ИмяОбъекта]
						.ТабличныеЧасти[ОбъектСвязи.ТабличнаяЧастьОбъекта];

				Исключение

					Продолжить;

				КонецПопытки;

				НайтиОбъектПоРеквизитам(НайденаСвязь, ИмяРеквизитаСвязи, МетаданныеТЧ, ТипЗначенияОбъекта);

			Иначе

			НайтиОбъектПоРеквизитам(
				НайденаСвязь, ИмяРеквизитаСвязи, МетаданныеОбъекта, ТипЗначенияОбъекта, "СтандартныеРеквизиты");
			НайтиОбъектПоРеквизитам(НайденаСвязь, ИмяРеквизитаСвязи, МетаданныеОбъекта, ТипЗначенияОбъекта);

			КонецЕсли;

		КонецЕсли;

		Если НайденаСвязь Тогда

			ДобавитьСвязьДобавленногоОбъекта(
				ЭлементыДиаграммы,
				ОбъектДиаграммы,
				ОбъектСвязи.Объект,
				ОбъектСвязи.ВидОбъекта,
				ИмяРеквизитаСвязи);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьСвязьВыбраннымОбъектам()

&НаСервере
Процедура ДобавитьСвязьДобавленногоОбъекта(ЭлементыДиаграммы, ОбъектДиаграммы, Объект, ВидОбъекта, ИмяРеквизитаСвязи)

	УсловиеПоискаОбъекта = Новый Структура("Наименование", Объект);
	НайденныеОбъекты = ЭлементыДиаграммы.Строки.НайтиСтроки(УсловиеПоискаОбъекта, Истина);

	СвязанныеОбъекты = Новый Соответствие();
	СвязанныеОбъекты.Вставить(ОбъектДиаграммы.Наименование, ИмяРеквизитаСвязи);
	ДополнитьСвязиПоОбъекту(НайденныеОбъекты[0], СвязанныеОбъекты);

КонецПроцедуры // ДобавитьСвязьДобавленногоОбъекта()

&НаСервере
Процедура НайтиОбъектПоРеквизитам(
	НайденаСвязь, ИмяРеквизитаСвязи, МетаданныеОбъекта, ТипЗначенияСвязи, ИмяРеквизитов = "Реквизиты")

	Если НайденаСвязь Тогда

		Возврат;

	КонецЕсли;

	ИсключитьРеквизиты = Новый Массив();
	Если ИмяРеквизитов = "СтандартныеРеквизиты" Тогда

		ИсключитьРеквизиты = ИсключаемыеСтандартныеРеквизиты();

	КонецЕсли;

	Для Каждого РеквизитОбъекта Из МетаданныеОбъекта[ИмяРеквизитов] Цикл

		Если Не РеквизитОбъекта.Тип.СодержитТип(ТипЗначенияСвязи)
			ИЛИ ИсключитьРеквизиты.Найти(РеквизитОбъекта.Имя) <> Неопределено Тогда

			Продолжить;

		КонецЕсли;

		ИмяРеквизитаСвязи = РеквизитОбъекта.Имя;
		НайденаСвязь = Истина;
		Прервать;

	КонецЦикла;

КонецПроцедуры // НайтиОбъектПоРеквизитам()

&НаСервереБезКонтекста
Функция ИсключаемыеСтандартныеРеквизиты()

	ИсключаемыеРеквизиты = Новый Массив();
	ИсключаемыеРеквизиты.Добавить("Ссылка");
	ИсключаемыеРеквизиты.Добавить("Код");
	ИсключаемыеРеквизиты.Добавить("Наименование");
	ИсключаемыеРеквизиты.Добавить("Родитель");
	ИсключаемыеРеквизиты.Добавить("ЭтоГруппа");
	ИсключаемыеРеквизиты.Добавить("ПометкаУдаления");
	ИсключаемыеРеквизиты.Добавить("Предопределенный");
	ИсключаемыеРеквизиты.Добавить("ИмяПредопределенныхДанных");
	ИсключаемыеРеквизиты.Добавить("Дата");
	ИсключаемыеРеквизиты.Добавить("Номер");
	ИсключаемыеРеквизиты.Добавить("Проведен");
	ИсключаемыеРеквизиты.Добавить("Период");

	Возврат ИсключаемыеРеквизиты;

КонецФункции // ИсключаемыеСтандартныеРеквизиты()

#Область НастройкиЭлементовСвязейДиаграмм

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьНастройкиДиаграммы(
		Объект,
		ИмяТаблицы,
		ИдентификаторСвязейДиаграммы)

	УсловиеПоиска = Новый Структура();
	УсловиеПоиска.Вставить("Диаграмма", ИдентификаторСвязейДиаграммы);
	НайденныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(УсловиеПоиска);

	Для Каждого СтрокаСвязи Из НайденныеСтроки Цикл

		Объект[ИмяТаблицы].Удалить(СтрокаСвязи);

	КонецЦикла;

КонецПроцедуры // ОчиститьНастройкиДиаграммы()

&НаКлиенте
Процедура ЗаписатьНастройкиСвязейДиаграммы(
		ЭлементыСвязейОбъектов,
		Диаграмма,
		Родитель = Неопределено)

	Для Каждого СтрокаОбъектовСвязей Из ЭлементыСвязейОбъектов.ПолучитьЭлементы() Цикл

		СтрокаСвязейОбъектов = Объект.ОписаниеСвязейДиаграмм.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСвязейОбъектов, СтрокаОбъектовСвязей);
		СтрокаСвязейОбъектов.Диаграмма = Диаграмма;
		СтрокаСвязейОбъектов.Имя = СтрокаОбъектовСвязей.Наименование;
		СтрокаСвязейОбъектов.Родитель = Родитель;

		Если ЗначениеЗаполнено(СтрокаСвязейОбъектов.Ключ) Тогда

			Ключ = СтрокаСвязейОбъектов.Ключ;

		Иначе

			Ключ = Новый УникальныйИдентификатор();
			СтрокаСвязейОбъектов.Ключ = Ключ;

		КонецЕсли;

		ЗаписатьНастройкиСвязейДиаграммы(
			СтрокаОбъектовСвязей,
			Диаграмма,
			Ключ);

	КонецЦикла;

КонецПроцедуры // ЗаписатьНастройкиСвязейДиаграммы()

&НаКлиенте
Процедура ПрочитатьНастройкиСвязейДиаграммы(Диаграмма)

	РедакторДиаграммы.ПолучитьЭлементы().Очистить();
	УбратьВидимостьТиповОбъектов();
	УсловиеПоиска = Новый Структура();
	УсловиеПоиска.Вставить("Диаграмма", Диаграмма);
	НайденныеСтроки = Объект.ОписаниеСвязейДиаграмм.НайтиСтроки(УсловиеПоиска);

	Для Каждого СтрокаСвязейОбъектов Из НайденныеСтроки Цикл

		РодительСвязиОбъекта = РодительСвязиОбъектаПоКлючу(
			СтрокаСвязейОбъектов.Родитель,
			РедакторДиаграммы);

		// Нашли некорректный элемент
		Если РодительСвязиОбъекта = Неопределено Тогда

			Продолжить;

		КонецЕсли;

		НоваяСтрока = РодительСвязиОбъекта.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСвязейОбъектов);
		НоваяСтрока.Наименование = СтрокаСвязейОбъектов.Имя;
		УстановитьКартинкуТипаЭлемента(Объект, Элементы, НоваяСтрока, ТекущаяДиаграмма, ТипыОбъектов);
		СформироватьПредставлениеЭлемента(НоваяСтрока, Объект, ТекущаяДиаграмма);

		Если РодительСвязиОбъекта <> РедакторДиаграммы Тогда

			Элементы.РедакторДиаграммы.Развернуть(РодительСвязиОбъекта.ПолучитьИдентификатор());

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПрочитатьНастройкиСвязейДиаграммы()

&НаКлиенте
Функция РодительСвязиОбъектаПоКлючу(ИдентификаторСтроки, ТекущийУровень)

	Если ПустойИдентификатор(ИдентификаторСтроки) Тогда

		Возврат ТекущийУровень;

	КонецЕсли;

	РодительЭлемента = Неопределено;
	Для Каждого СтрокаОбъектовСвязей Из ТекущийУровень.ПолучитьЭлементы() Цикл

		Если СтрокаОбъектовСвязей.Ключ = ИдентификаторСтроки Тогда

			Возврат СтрокаОбъектовСвязей;

		КонецЕсли;

		РодительЭлемента = РодительСвязиОбъектаПоКлючу(
			ИдентификаторСтроки,
			СтрокаОбъектовСвязей);

		Если РодительЭлемента <> Неопределено Тогда

			Возврат РодительЭлемента;

		КонецЕсли;

	КонецЦикла;

	Возврат РодительЭлемента;

КонецФункции // РодительСвязиОбъектаПоКлючу()

#КонецОбласти

&НаКлиенте
Функция ИмяНабораСвойствПоТипуОбъекта(ТипЭлемента)

	СопоставлениеТипаСвойств = Новый Соответствие();
	СопоставлениеТипаСвойств.Вставить(ДоступныеТипыЭлементов().Объект, "СвойстваОбъектов");
	СопоставлениеТипаСвойств.Вставить(ДоступныеТипыЭлементов().Связь, "СвойстваСвязей");
	СопоставлениеТипаСвойств.Вставить(ДоступныеТипыЭлементов().Группа, "СвойстваГрупп");

	Возврат СопоставлениеТипаСвойств.Получить(ТипЭлемента);

КонецФункции // ИмяНабораСвойствПоТипуОбъекта()

&НаКлиенте
Функция ИдентификаторЭлементаДиаграммы(ЭлементДиаграммы)

	Если ЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Связь Тогда
		Возврат ЭлементДиаграммы.Ключ;
	КонецЕсли;

	Возврат ЭлементДиаграммы.Наименование;

КонецФункции // ИдентификаторЭлементаДиаграммы()

&НаКлиенте
Процедура ПолучитьВсеОбъекты(
		СписокОбъектов,
		ЭлементыДиаграммы,
		ТипыЭлементовСпискаВыбора,
		СтрокаИсключения = Неопределено)

	Для Каждого ЭлементДиаграммы Из ЭлементыДиаграммы Цикл

		Если СтрокаИсключения <> Неопределено
			И СтрокаИсключения = ЭлементДиаграммы Тогда

			Продолжить;

		КонецЕсли;

		Если ТипыЭлементовСпискаВыбора.Найти(ЭлементДиаграммы.Тип) <> Неопределено
			И НЕ ПустаяСтрока(ЭлементДиаграммы.Наименование)
			И СписокОбъектов.НайтиПоЗначению(ЭлементДиаграммы.Наименование) = Неопределено Тогда

			СписокОбъектов.Добавить(ЭлементДиаграммы.Наименование, ЭлементДиаграммы.Наименование);

		КонецЕсли;
		ПолучитьВсеОбъекты(
			СписокОбъектов,
			ЭлементДиаграммы.ПолучитьЭлементы(),
			ТипыЭлементовСпискаВыбора,
			СтрокаИсключения);

	КонецЦикла;

КонецПроцедуры // ПолучитьВсеОбъекты()

#Область СохранениеНастроекВФайл

&НаКлиенте
Функция ПолучитьАдресФайлаНастроек()

	Если ТекущаяДиаграмма <> Неопределено Тогда

		ОчиститьНастройкиДиаграммы(
			Объект,
			"ОписаниеСвязейДиаграмм",
			ТекущаяДиаграмма.Ключ);

		ЗаписатьНастройкиСвязейДиаграммы(
			РедакторДиаграммы,
			ТекущаяДиаграмма.Ключ);

	КонецЕсли;

	Результат = НастройкиДиаграммДляВыгрузки();
	Модифицированность = Ложь;
	Возврат СохранитьJSONНаСервере(Результат);

КонецФункции // ПолучитьАдресФайлаНастроек()

&НаСервере
Функция СохранитьJSONНаСервере(Данные)

	ИмяФайла = СтрШаблон("%1/НастройкиДиаграммы.rpu");

	Запись = Новый ЗаписьJSON();
	Запись.ОткрытьФайл(ИмяФайла);
	ЗаписатьJSON(Запись, Данные);
	Запись.Закрыть();

	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	УдалитьФайлы(ИмяФайла);

	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные);

КонецФункции // СохранитьJSONНаСервере()

&НаКлиенте
Процедура ЗавершениеВыбораКаталогаСохранения(ВыбранныеФайлы, ДополнительныеПараметры = Неопределено) Экспорт

	Если ВыбранныеФайлы = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Если ТекущаяДиаграмма <> Неопределено Тогда

		ОчиститьНастройкиДиаграммы(
			Объект,
			"ОписаниеСвязейДиаграмм",
			ТекущаяДиаграмма.Ключ);

		ЗаписатьНастройкиСвязейДиаграммы(
			РедакторДиаграммы,
			ТекущаяДиаграмма.Ключ);

		Если ПустаяСтрока(ТекущаяДиаграмма.Имя) Тогда

			ИмяДиаграммы = ПолучитьНазваниеДиаграммыИзИмениФайла(ВыбранныеФайлы[0]);
			СтрокаДиаграммы = Объект.Диаграммы.НайтиСтроки(Новый Структура("Ключ", ТекущаяДиаграмма.Ключ));
			СтрокаДиаграммы[0].Имя = ИмяДиаграммы;
			ТекущаяДиаграмма = Новый Структура("Имя,Тип,Ключ");
			ТекущаяДиаграмма.Ключ = СтрокаДиаграммы[0].Ключ;
			ТекущаяДиаграмма.Имя = СтрокаДиаграммы[0].Имя;
			ТекущаяДиаграмма.Тип = СтрокаДиаграммы[0].Тип;


		КонецЕсли;

	КонецЕсли;

	Результат = НастройкиДиаграммДляВыгрузки();
	СохранитьJSON(Результат, ВыбранныеФайлы[0]);
	ВывестиПараметрыДиаграммы();

	Модифицированность = Ложь;

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Сохранение настройки'"),,
		СтрШаблон(НСтр("ru = 'Сохранен файл настроек диаграмм %1'"), ВыбранныеФайлы[0]));

	ВывестиРезультатДиаграммы();

КонецПроцедуры // ЗавершениеВыбораКаталогаСохранения()

&НаКлиенте
Функция НастройкиДиаграммДляВыгрузки()

	ВыгрузкаНастроек = Новый Структура();

	НаборДиаграмм = Новый Массив();
	Для Каждого Диаграмма Из Объект.Диаграммы Цикл

		ДиаграммаВыгрузки = Новый Структура();
		ДиаграммаВыгрузки.Вставить("Тип", Диаграмма.Тип);
		ДиаграммаВыгрузки.Вставить("Ключ", Строка(Диаграмма.Ключ));
		ДиаграммаВыгрузки.Вставить("Имя", Диаграмма.Имя);
		НаборДиаграмм.Добавить(ДиаграммаВыгрузки);

	КонецЦикла;

	ВыгрузкаНастроек.Вставить("Диаграммы", НаборДиаграмм);

	НаборСвойствДиаграмм = Новый Массив();
	Для Каждого Диаграмма Из Объект.СвойстваДиаграмм Цикл

		СвойстваДиаграммы = Новый Структура();
		СвойстваДиаграммы.Вставить("Диаграмма", Строка(Диаграмма.Диаграмма));
		СвойстваДиаграммы.Вставить("Свойство", Диаграмма.Свойство);
		СвойстваДиаграммы.Вставить("ТипДиаграммы", Диаграмма.ТипДиаграммы);

		Если ТипЗнч(Диаграмма.Значение) = Тип("Число") Тогда

			СвойстваДиаграммы.Вставить("Значение", Строка(Диаграмма.Значение));

		Иначе

			СвойстваДиаграммы.Вставить("Значение", Диаграмма.Значение);

		КонецЕсли;
		НаборСвойствДиаграмм.Добавить(СвойстваДиаграммы);

	КонецЦикла;

	ВыгрузкаНастроек.Вставить("СвойстваДиаграмм", НаборСвойствДиаграмм);

	НаборСвойствОбъектов = Новый Массив();
	Для Каждого СвойствоОбъекта Из Объект.СвойстваОбъектов Цикл

		СвойствоОбъектов = Новый Структура();
		СвойствоОбъектов.Вставить("Диаграмма", Строка(СвойствоОбъекта.Диаграмма));
		СвойствоОбъектов.Вставить("Объект", СвойствоОбъекта.Объект);
		СвойствоОбъектов.Вставить("Свойство", СвойствоОбъекта.Свойство);
		СвойствоОбъектов.Вставить("ТипДиаграммы", СвойствоОбъекта.ТипДиаграммы);

		Если ТипЗнч(СвойствоОбъекта.Значение) = Тип("Число") Тогда

			СвойствоОбъектов.Вставить("Значение", Строка(СвойствоОбъекта.Значение));

		Иначе

			СвойствоОбъектов.Вставить("Значение", СвойствоОбъекта.Значение);

		КонецЕсли;
		СвойствоОбъектов.Вставить("ПредставлениеЗначения", СвойствоОбъекта.ПредставлениеЗначения);
		НаборСвойствОбъектов.Добавить(СвойствоОбъектов);

	КонецЦикла;

	ВыгрузкаНастроек.Вставить("СвойстваОбъектов", НаборСвойствОбъектов);

	НаборСвойствСвязей = Новый Массив();
	Для Каждого СвойствоСвязи Из Объект.СвойстваСвязей Цикл

		СвойствоСвязей = Новый Структура();
		СвойствоСвязей.Вставить("Диаграмма", Строка(СвойствоСвязи.Диаграмма));
		СвойствоСвязей.Вставить("Ключ", Строка(СвойствоСвязи.Ключ));
		СвойствоСвязей.Вставить("Свойство", СвойствоСвязи.Свойство);
		СвойствоСвязей.Вставить("ТипДиаграммы", СвойствоСвязи.ТипДиаграммы);

		Если ТипЗнч(СвойствоСвязи.Значение) = Тип("Число") Тогда

			СвойствоСвязей.Вставить("Значение", Строка(СвойствоСвязи.Значение));

		Иначе

			СвойствоСвязей.Вставить("Значение", СвойствоСвязи.Значение);

		КонецЕсли;
		СвойствоСвязей.Вставить("ПредставлениеЗначения", СвойствоСвязи.ПредставлениеЗначения);
		НаборСвойствСвязей.Добавить(СвойствоСвязей);

	КонецЦикла;

	ВыгрузкаНастроек.Вставить("СвойстваСвязей", НаборСвойствСвязей);

	НаборСвойствГрупп = Новый Массив();
	Для Каждого СвойствоГруппы Из Объект.СвойстваГрупп Цикл

		СвойствоГрупп = Новый Структура();
		СвойствоГрупп.Вставить("Диаграмма", Строка(СвойствоГруппы.Диаграмма));
		СвойствоГрупп.Вставить("Объект", СвойствоГруппы.Объект);
		СвойствоГрупп.Вставить("Свойство", СвойствоГруппы.Свойство);
		СвойствоГрупп.Вставить("ТипДиаграммы", СвойствоГруппы.ТипДиаграммы);

		Если ТипЗнч(СвойствоГруппы.Значение) = Тип("Число") Тогда

			СвойствоГрупп.Вставить("Значение", Строка(СвойствоГруппы.Значение));

		Иначе

			СвойствоГрупп.Вставить("Значение", СвойствоГруппы.Значение);

		КонецЕсли;
		СвойствоГрупп.Вставить("ПредставлениеЗначения", СвойствоГруппы.ПредставлениеЗначения);
		НаборСвойствГрупп.Добавить(СвойствоГрупп);

	КонецЦикла;

	ВыгрузкаНастроек.Вставить("СвойстваГрупп", НаборСвойствГрупп);

	НаборСвязейОбъектовДиаграммы = Новый Массив();
	Для Каждого СвойствоСвязейОбъектов Из Объект.ОписаниеСвязейДиаграмм Цикл

		СвойствоСвязиОбъектов = Новый Структура();
		СвойствоСвязиОбъектов.Вставить("Диаграмма", Строка(СвойствоСвязейОбъектов.Диаграмма));
		СвойствоСвязиОбъектов.Вставить("Тип", СвойствоСвязейОбъектов.Тип);
		СвойствоСвязиОбъектов.Вставить("Имя", СвойствоСвязейОбъектов.Имя);
		СвойствоСвязиОбъектов.Вставить("ПриемникСвязи", СвойствоСвязейОбъектов.ПриемникСвязи);
		СвойствоСвязиОбъектов.Вставить("Ключ", Строка(СвойствоСвязейОбъектов.Ключ));
		СвойствоСвязиОбъектов.Вставить("Родитель", Строка(СвойствоСвязейОбъектов.Родитель));
		СвойствоСвязиОбъектов.Вставить("ПутьКМетаданным", СвойствоСвязейОбъектов.ПутьКМетаданным);

		НаборСвязейОбъектовДиаграммы.Добавить(СвойствоСвязиОбъектов);

	КонецЦикла;

	ВыгрузкаНастроек.Вставить("ОписаниеСвязейДиаграмм", НаборСвязейОбъектовДиаграммы);

	Возврат ВыгрузкаНастроек;

КонецФункции // НастройкиДиаграммДляВыгрузки()

&НаКлиенте
Процедура СохранитьJSON(Данные, ИмяФайла)

#Если НЕ ВебКлиент Тогда

	Запись = Новый ЗаписьJSON();
	Запись.ОткрытьФайл(ИмяФайла);
	ЗаписатьJSON(Запись, Данные);
	Запись.Закрыть();

#КонецЕсли

КонецПроцедуры // СохранитьJSON()

#КонецОбласти

#Область ЗагрузкаНастроекИзФайла

&НаКлиенте
Процедура Подключаемый_ПродолжитьЗагрузкуНастроек(ОтветНаВопрос, ДополнительныеПараметры = Неопределено) Экспорт

	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда

		ПродолжитьВыполнениеЗагрузкиНастроек();

	КонецЕсли;

КонецПроцедуры // Подключаемый_ПродолжитьЗагрузкуНастроек()

&НаКлиенте
Процедура ПродолжитьВыполнениеЗагрузкиНастроек()

	ОбработчикПродолженияЗагрузкиНастроек =Новый ОписаниеОповещения(
		"НачатьЗагрузкуФайлаНастроек", ЭтотОбъект);

#Если ВебКлиент Тогда

	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ПроверкаРасширенияРаботыСФайлами",
		ЭтотОбъект,
		Новый Структура("ОбработчикОповещения", ОбработчикПродолженияЗагрузкиНастроек));
	НачатьПодключениеРасширенияРаботыСФайлами(ОбработчикОповещения);
	Возврат;

#КонецЕсли

	ВыполнитьОбработкуОповещения(ОбработчикПродолженияЗагрузкиНастроек);

КонецПроцедуры // ПродолжитьВыполнениеЗагрузкиНастроек()

&НаКлиенте
Процедура ПроверкаРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт

	Если Не Подключено Тогда

		Оповещение = Новый ОписаниеОповещения(
			"УстановкаРасширенияРаботыСФайлами",
			ЭтотОбъект,
			ДополнительныеПараметры);
		ТекстСообщения = 
			НСтр("ru='Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"".
				|Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;

	КонецЕсли;

	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикОповещения);

КонецПроцедуры // ПроверкаРасширенияРаботыСФайлами()

&НаКлиенте
Процедура УстановкаРасширенияРаботыСФайлами(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуФайлаНастроек(ПараметрыФайла, ДополнительныеПараметры = Неопределено) Экспорт

	ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"ЗавершениеВыбораКаталогаЗагрузки",
		ЭтотОбъект);

	ПараметрыДиалогаПомещения = Новый ПараметрыДиалогаПомещенияФайлов;
	
	ПараметрыДиалогаПомещения.МножественныйВыбор = Ложь;
	ПараметрыДиалогаПомещения.Фильтр = "(*.rpu)|*.rpu";
	ПараметрыДиалогаПомещения.Заголовок = НСтр("ru = 'Выберите файл настройки диаграмм'");

	НачатьПомещениеФайлаНаСервер(ОбработчикОповещенияОЗакрытии,,,, 
		ПараметрыДиалогаПомещения, УникальныйИдентификатор);

КонецПроцедуры // НачатьЗагрузкуФайлаНастроек()

&НаКлиенте
Процедура ЗавершениеВыбораКаталогаЗагрузки(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = Неопределено Тогда

		Возврат;

	КонецЕсли;

	ДанныеФайла = ПрочитатьНастройкиФайлаНаСервере(Результат.Адрес);
	ЗагрузитьДанныеФайла(ДанныеФайла);
	Если Объект.Диаграммы.Количество() > 0 Тогда

		ОбновитьДанныеТекущейДиаграммы(Объект.Диаграммы[0], Ложь, Ложь);
		ПрочитатьНастройкиСвязейДиаграммы(ТекущаяДиаграмма.Ключ);
		Если РедакторДиаграммы.ПолучитьЭлементы().Количество() > 0 Тогда

			ВывестиРезультатДиаграммы();
			ЗаполнитьДополнительныеПараметрыЭлементовДиаграммы(РедакторДиаграммы.ПолучитьЭлементы());

		Иначе

			РезультатКартинка = ТекстВыводаПустойДиаграммы();
			РезультатТекстPlantUML = "";

		КонецЕсли;

	КонецЕсли;

	ВывестиПараметрыДиаграммы();

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Загрузка диаграммы'"),,
		НСтр("ru = 'Диаграмма загружена из файла.'"));

	Модифицированность = Ложь;

КонецПроцедуры // ЗавершениеВыбораКаталогаЗагрузки()

&НаСервере
Функция ПрочитатьНастройкиФайлаНаСервере(АдресФайла)

	ПотокДляЧтения = ПолучитьИзВременногоХранилища(АдресФайла).ОткрытьПотокДляЧтения();
	Чтение = Новый ЧтениеJSON();
	Чтение.ОткрытьПоток(ПотокДляЧтения);
	Результат = ПрочитатьJSON(Чтение, Истина);
	Чтение.Закрыть();

	Возврат Результат;

КонецФункции // ПрочитатьНастройкиФайлаНаСервере()

&НаКлиенте
Процедура ЗагрузитьДанныеФайла(ДанныеФайла)

	ОчиститьНастройкиДиаграмм();

	Диаграммы = ДанныеФайла.Получить("Диаграммы");
	Если Диаграммы <> Неопределено Тогда

		Для Каждого СтрокаДиаграммы Из Диаграммы Цикл

			НоваяСтрока = Объект.Диаграммы.Добавить();
			НоваяСтрока.Тип = СтрокаДиаграммы.Получить("Тип");
			НоваяСтрока.Ключ = Новый УникальныйИдентификатор(СтрокаДиаграммы.Получить("Ключ"));
			НоваяСтрока.Имя = СтрокаДиаграммы.Получить("Имя");

		КонецЦикла;

	КонецЕсли;

	ОписаниеСвязейДиаграмм = ДанныеФайла.Получить("ОписаниеСвязейДиаграмм");
	Если ОписаниеСвязейДиаграмм <> Неопределено Тогда

		Для Каждого СтрокаСвязиОбъектов Из ОписаниеСвязейДиаграмм Цикл

			НоваяСтрока = Объект.ОписаниеСвязейДиаграмм.Добавить();
			НоваяСтрока.Диаграмма = Новый УникальныйИдентификатор(СтрокаСвязиОбъектов.Получить("Диаграмма"));
			НоваяСтрока.Тип = СтрокаСвязиОбъектов.Получить("Тип");
			НоваяСтрока.Имя = СтрокаСвязиОбъектов.Получить("Имя");
			НоваяСтрока.ПриемникСвязи = СтрокаСвязиОбъектов.Получить("ПриемникСвязи");
			НоваяСтрока.Ключ = Новый УникальныйИдентификатор(СтрокаСвязиОбъектов.Получить("Ключ"));
			НоваяСтрока.Родитель = Новый УникальныйИдентификатор(СтрокаСвязиОбъектов.Получить("Родитель"));
			НоваяСтрока.ПутьКМетаданным = СтрокаСвязиОбъектов.Получить("ПутьКМетаданным");

		КонецЦикла;

	КонецЕсли;

	СвойстваДиаграмм = ДанныеФайла.Получить("СвойстваДиаграмм");
	Если СвойстваДиаграмм <> Неопределено Тогда

		Для Каждого СтрокаСвойстваДиаграмм Из СвойстваДиаграмм Цикл

			НоваяСтрока = Объект.СвойстваДиаграмм.Добавить();
			НоваяСтрока.Диаграмма = Новый УникальныйИдентификатор(СтрокаСвойстваДиаграмм.Получить("Диаграмма"));
			НоваяСтрока.Свойство = СтрокаСвойстваДиаграмм.Получить("Свойство");
			НоваяСтрока.Значение = СтрокаСвойстваДиаграмм.Получить("Значение");
			НоваяСтрока.ТипДиаграммы = СтрокаСвойстваДиаграмм.Получить("ТипДиаграммы");

		КонецЦикла;

	КонецЕсли;

	СвойстваСвязей = ДанныеФайла.Получить("СвойстваСвязей");
	Если СвойстваСвязей <> Неопределено Тогда

		Для Каждого СтрокаСвойстваСвязей Из СвойстваСвязей Цикл

			НоваяСтрока = Объект.СвойстваСвязей.Добавить();
			НоваяСтрока.Диаграмма = Новый УникальныйИдентификатор(СтрокаСвойстваСвязей.Получить("Диаграмма"));
			НоваяСтрока.Ключ = Новый УникальныйИдентификатор(СтрокаСвойстваСвязей.Получить("Ключ"));
			НоваяСтрока.Свойство = СтрокаСвойстваСвязей.Получить("Свойство");
			НоваяСтрока.Значение = СтрокаСвойстваСвязей.Получить("Значение");
			НоваяСтрока.ТипДиаграммы = СтрокаСвойстваСвязей.Получить("ТипДиаграммы");
			НоваяСтрока.ПредставлениеЗначения = СтрокаСвойстваСвязей.Получить("ПредставлениеЗначения");

		КонецЦикла;

	КонецЕсли;

	СвойстваОбъектов = ДанныеФайла.Получить("СвойстваОбъектов");
	Если СвойстваОбъектов <> Неопределено Тогда

		Для Каждого СтрокаСвойстваОбъектов Из СвойстваОбъектов Цикл

			НоваяСтрока = Объект.СвойстваОбъектов.Добавить();
			НоваяСтрока.Диаграмма = Новый УникальныйИдентификатор(СтрокаСвойстваОбъектов.Получить("Диаграмма"));
			НоваяСтрока.Объект = СтрокаСвойстваОбъектов.Получить("Объект");
			НоваяСтрока.Свойство = СтрокаСвойстваОбъектов.Получить("Свойство");
			НоваяСтрока.Значение = СтрокаСвойстваОбъектов.Получить("Значение");
			НоваяСтрока.ТипДиаграммы = СтрокаСвойстваОбъектов.Получить("ТипДиаграммы");
			НоваяСтрока.ПредставлениеЗначения = СтрокаСвойстваОбъектов.Получить("ПредставлениеЗначения");

		КонецЦикла;

	КонецЕсли;

	СвойстваГрупп = ДанныеФайла.Получить("СвойстваГрупп");
	Если СвойстваГрупп <> Неопределено Тогда

		Для Каждого СтрокаСвойстваГрупп Из СвойстваГрупп Цикл

			НоваяСтрока = Объект.СвойстваГрупп.Добавить();
			НоваяСтрока.Диаграмма = Новый УникальныйИдентификатор(СтрокаСвойстваГрупп.Получить("Диаграмма"));
			НоваяСтрока.Объект = СтрокаСвойстваГрупп.Получить("Объект");
			НоваяСтрока.Свойство = СтрокаСвойстваГрупп.Получить("Свойство");
			НоваяСтрока.Значение = СтрокаСвойстваГрупп.Получить("Значение");
			НоваяСтрока.ТипДиаграммы = СтрокаСвойстваГрупп.Получить("ТипДиаграммы");
			НоваяСтрока.ПредставлениеЗначения = СтрокаСвойстваГрупп.Получить("ПредставлениеЗначения");

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ЗагрузитьДанныеФайла()

#КонецОбласти

#Область РезультатUML

&НаСервере
Функция СформироватьТекстPlantUML()

	Результат = Новый Массив;
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");

	УстановитьЗаголовокДиаграммы(Результат);

	ЗаписатьДиаграммуПоследовательностей(ОбъектОбработки, Результат);
	ЗаписатьДиаграммуКлассов(ОбъектОбработки, Результат);
	ЗаписатьДиаграммуДеятельности(ОбъектОбработки, Результат);

	ТекстPlantUML =СтрСоединить(Результат, Символы.ПС);
	Если НЕ ПустаяСтрока(ТекстPlantUML) Тогда

		ТекстPlantUML = ОбернутьТекстВPlantUML(ТекстPlantUML);

	КонецЕсли;

	Возврат ТекстPlantUML;

КонецФункции // СформироватьТекстPlantUML()

&НаСервере
Процедура УстановитьЗаголовокДиаграммы(ТекстUML)

	Если ПустаяСтрока(ТекущаяДиаграмма.Имя) Тогда

		Возврат;

	КонецЕсли;

	ТекстUML.Добавить(
		СтрШаблон("title %1", ПредставлениеЭлементаПоНаименованию(ТекущаяДиаграмма.Имя)));

КонецПроцедуры

&НаСервере
Функция ОбернутьТекстВPlantUML(Текст)

	Возврат СтрШаблон("@startuml
			|%1
			|@enduml", Текст);

КонецФункции // ОбернутьТекстВPlantUML()

&НаСервере
Функция ТекстВыводаДиаграммы()

	Возврат СтрШаблон("<!DOCTYPE HTML PUBLIC ""//W3C//DTD HTML 4.01//EN""><html><head>
	|<style>
	|.center{
	|text-align: center;
	|}
	|</style>
	|</head><body><p class=""center""><img src=%1></img></p></body></html>", АдресКартинкиВоВременномХранилище);

КонецФункции // ТекстВыводаДиаграммы()

&НаКлиентеНаСервереБезКонтекста
Функция ТекстВыводаПустойДиаграммы()
	
	Возврат "<!DOCTYPE HTML PUBLIC ""//W3C//DTD HTML 4.01//EN""><html></head></body></html>";
	
КонецФункции // ТекстВыводаПустойДиаграммы()

&НаСервере
Процедура ЗаписатьДиаграммуПоследовательностей(ОбъектОбработки, ТекстUML)

	Если Не ТекущаяДиаграмма.Тип = ТипыДиаграммПоИмени(ТипыДиаграмм).ДиаграммаПоследовательностей Тогда
		Возврат;
	КонецЕсли;

	// Получим общие свойства диагараммы
	ОтборСвойств = ОбъектОбработки.ОтборСвойствПоТаблице(
		"СвойстваДиаграмм",
		ТекущаяДиаграмма.Ключ,
		ТекущаяДиаграмма.Ключ,
		ТекущаяДиаграмма.Тип);
	НайденныеСтроки = Объект.СвойстваДиаграмм.НайтиСтроки(ОтборСвойств);
	
	СвойстваБезЗначения = Новый Массив;
	СвойстваБезЗначения.Добавить("hide footbox");
	СвойстваБезЗначения.Добавить("hide unlinked");
	
	Для Каждого ПараметрыДиаграммы Из НайденныеСтроки Цикл

		Если ПустаяСтрока(ПараметрыДиаграммы.Значение)
			ИЛИ ПараметрыДиаграммы.Свойство = "ФорматКартинкиРезультата" Тогда
			Продолжить;
		КонецЕсли;

		ЗначениеСвойства = "";
		Если СвойстваБезЗначения.Найти(ПараметрыДиаграммы.Свойство) = Неопределено Тогда
			ЗначениеСвойства = ПараметрыДиаграммы.Значение;
		КонецЕсли;

		ТекстСвойства = СтрШаблон("%1 %2",
			ПараметрыДиаграммы.Свойство,
			ЗначениеСвойства);
		ТекстUML.Добавить(ТекстСвойства);

	КонецЦикла;

	// Добавим группы объектов и сами объекты
	ЭлементыДиаграммы = РеквизитФормыВЗначение("РедакторДиаграммы");
	ТекстГруппОбъектов = Новый Массив();
	ТекстСвязей = Новый Массив();
	ОбработанныеОбъекты = Новый Массив();
	ДополнитьТекстЭлементамиДиаграммыПоследовательности(
		ОбъектОбработки,
		ЭлементыДиаграммы.Строки,
		ТекстГруппОбъектов,
		ТекстСвязей,
		ОбработанныеОбъекты);

	Для Каждого СтрокаОбъекта Из ТекстГруппОбъектов Цикл

		ТекстUML.Добавить(СтрокаОбъекта);

	КонецЦикла;

	Для Каждого СтрокаСвязи Из ТекстСвязей Цикл

		ТекстUML.Добавить(СтрокаСвязи);

	КонецЦикла;

КонецПроцедуры // ЗаписатьДиаграммуПоследовательностей()

&НаСервере
Процедура ДополнитьТекстЭлементамиДиаграммыПоследовательности(
		ОбъектОбработки,
		ОбъектыГруппы,
		ТекстГруппОбъектов,
		ТекстСвязей,
		ОбработанныеОбъекты)

	Для Каждого ЭлементДиаграммы Из ОбъектыГруппы Цикл

		Если ЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Группа Тогда

			ВывестиГруппуДиаграммыПоследовательности(
				ОбъектОбработки,
				ТекстГруппОбъектов,
				ТекстСвязей,
				ОбработанныеОбъекты,
				ЭлементДиаграммы);

		ИначеЕсли ЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Объект Тогда

			ВывестиОбъектДиаграммыПоследовательности(
				ОбъектОбработки,
				ТекстГруппОбъектов,
				ТекстСвязей,
				ОбработанныеОбъекты,
				ЭлементДиаграммы);

		ИначеЕсли ЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Связь
			И Не ПустаяСтрока(ЭлементДиаграммы.ПриемникСвязи) Тогда

			ВывестиСвязьДиаграммыПоследовательности(ОбъектОбработки, ТекстСвязей, ЭлементДиаграммы);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ДополнитьТекстГруппамиИОбъектами()

&НаСервере
Процедура ВывестиГруппуДиаграммыПоследовательности(
		ОбъектОбработки,
		ТекстГруппОбъектов,
		ТекстСвязей,
		ОбработанныеОбъекты,
		ЭлементДиаграммы)

	СвойстваГруппы = СвойстваЭлементаДиаграммы(ОбъектОбработки, "СвойстваГрупп", ЭлементДиаграммы.Наименование);
	ЦветФона = ЗначениеСвойстваЭлементаДиаграммы(СвойстваГруппы, "ЦветФона", "");

	НачалоГруппы = СтрШаблон(
		"box ""%1"" %2",
		ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование),
		ЦветФона);
	СоставГруппы = Новый Массив();
	ОбработанныеОбъекты = Новый Массив();
	ДополнитьТекстЭлементамиДиаграммыПоследовательности(
		ОбъектОбработки,
		ЭлементДиаграммы.Строки,
		СоставГруппы,
		ТекстСвязей,
		ОбработанныеОбъекты);

	ТекстГруппОбъектов.Добавить(НачалоГруппы);
	ТекстГруппОбъектов.Добавить(СтрСоединить(СоставГруппы, Символы.ПС));
	ТекстГруппОбъектов.Добавить("end box");

КонецПроцедуры // ВывестиГруппуДиаграммыПоследовательности()

&НаСервере
Процедура ВывестиОбъектДиаграммыПоследовательности(
		ОбъектОбработки,
		ТекстГруппОбъектов,
		ТекстСвязей,
		ОбработанныеОбъекты,
		ЭлементДиаграммы)

	Если ОбработанныеОбъекты.Найти(ЭлементДиаграммы.Наименование) <> Неопределено Тогда
		
		ДополнитьТекстЭлементамиДиаграммыПоследовательности(
			ОбъектОбработки,
			ЭлементДиаграммы.Строки,
			ТекстГруппОбъектов,
			ТекстСвязей,
			ОбработанныеОбъекты);
			Возврат;

	КонецЕсли;

	ОбработанныеОбъекты.Добавить(ЭлементДиаграммы.Наименование);

	СвойстваОбъекта = СвойстваЭлементаДиаграммы(ОбъектОбработки, "СвойстваОбъектов", ЭлементДиаграммы.Наименование);
	ТипОбъекта = ЗначениеСвойстваЭлементаДиаграммы(СвойстваОбъекта, "ТипОбъекта", "participant");
	ПредставлениеОбъекта = ЗначениеСвойстваЭлементаДиаграммы(СвойстваОбъекта, "ПредставлениеОбъекта");
	ШаблонУчастника = ЗначениеСвойстваЭлементаДиаграммы(СвойстваОбъекта, "ШаблонУчастника");
	ЦветФона = ЗначениеСвойстваЭлементаДиаграммы(СвойстваОбъекта, "ЦветФона");
	
	Если Не ПустаяСтрока(ШаблонУчастника) Тогда

		ШаблонУчастника = Стршаблон("<< %1 >>", ШаблонУчастника);

	КонецЕсли;

	Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
		ТекстОбъекта = СтрШаблон(
			"%1 ""%2"" %3 %4",
			ТипОбъекта,
			ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование),
			ЦветФона,
			ШаблонУчастника);
	Иначе
		ТекстОбъекта = СтрШаблон(
			"%1 ""%2"" as ""%3"" %4 %5",
			ТипОбъекта,
			ПредставлениеОбъекта,
			ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование),
			ЦветФона,
			ШаблонУчастника);
	КонецЕсли;

	ТекстГруппОбъектов.Добавить(ТекстОбъекта);
	ДополнитьТекстЭлементамиДиаграммыПоследовательности(
		ОбъектОбработки,
		ЭлементДиаграммы.Строки,
		ТекстГруппОбъектов,
		ТекстСвязей,
		ОбработанныеОбъекты);

КонецПроцедуры // ВывестиОбъектДиаграммыПоследовательности()

&НаСервере
Процедура ВывестиСвязьДиаграммыПоследовательности(ОбъектОбработки, ТекстСвязей, ЭлементДиаграммы)

	Если Не УказанОбъектДиаграммы(ЭлементДиаграммы.ПриемникСвязи) Тогда

		Возврат;

	КонецЕсли;

	СвойстваСвязи = СвойстваЭлементаДиаграммы(ОбъектОбработки, "СвойстваСвязей", ЭлементДиаграммы.Ключ);
	ТипСтрелки = ЗначениеСвойстваЭлементаДиаграммы(СвойстваСвязи, "ТипСтрелки", "->");
	ВидСообщения = ЗначениеСвойстваЭлементаДиаграммы(СвойстваСвязи, "ВидСообщения");
	ПунктирнаяСтрелка = ЗначениеСвойстваЭлементаДиаграммы(СвойстваСвязи, "ПунктирнаяСтрелка") = "true";
	ЦветСтрелки = ЗначениеСвойстваЭлементаДиаграммы(СвойстваСвязи, "ЦветСтрелки");
	АктивацияИсточника = ЗначениеСвойстваЭлементаДиаграммы(СвойстваСвязи, "АктивацияИсточника");
	АктивацияПриемника = ЗначениеСвойстваЭлементаДиаграммы(СвойстваСвязи, "АктивацияПриемника");

	ПредставлениеСвязи = "";
	Если ВидСообщения = "[" Тогда
		ПредставлениеСвязиНачало = "[";
	Иначе
		ПредставлениеСвязиНачало = СтрШаблон(
			"""%1"" ",
			ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Родитель.Наименование));
	КонецЕсли;
	ПредставлениеСтрелки = ТипСтрелки;
	ПозицияЛинии = СтрНайти(ПредставлениеСтрелки, "-");
	Если ПунктирнаяСтрелка Тогда
		ПредставлениеСтрелки = СтрШаблон("%1-%2",
			Лев(ПредставлениеСтрелки, ПозицияЛинии),
			Прав(ПредставлениеСтрелки, СтрДлина(ПредставлениеСтрелки) - ПозицияЛинии));
			ПозицияЛинии = ПозицияЛинии + 1;
	КонецЕсли;
	Если Не ПустаяСтрока(ЦветСтрелки) Тогда
		ПредставлениеСтрелки = СтрШаблон("%1[%2]%3",
			Лев(ПредставлениеСтрелки, ПозицияЛинии),
			ЦветСтрелки,
			Прав(ПредставлениеСтрелки, СтрДлина(ПредставлениеСтрелки) - ПозицияЛинии));
	КонецЕсли;
	Если ВидСообщения = "]" Тогда
		ПредставлениеСвязиКонец = "]";
	Иначе
		ПредставлениеСвязиКонец = СтрШаблон(
			" ""%1""",
			ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.ПриемникСвязи));
	КонецЕсли;
	Если ПустаяСтрока(ЭлементДиаграммы.Наименование) Тогда
		ПредставлениеСвязи = СтрШаблон(
			"%1%2%3",
			ПредставлениеСвязиНачало,
			ПредставлениеСтрелки,
			ПредставлениеСвязиКонец);
	Иначе
		ПредставлениеСвязи = СтрШаблон(
			"%1%2%3 : %4",
			ПредставлениеСвязиНачало,
			ПредставлениеСтрелки,
			ПредставлениеСвязиКонец,
			ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование));
	КонецЕсли;
	ТекстСвязей.Добавить(ПредставлениеСвязи);
	
	Если Не ПустаяСтрока(АктивацияИсточника) Тогда
		ТекстСвязей.Добавить(СтрШаблон(
			"%1 ""%2""",
			АктивацияИсточника,
			ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Родитель.Наименование)));
	КонецЕсли;
	Если Не ПустаяСтрока(АктивацияПриемника) Тогда
		ТекстСвязей.Добавить(СтрШаблон(
			"%1 ""%2""",
			АктивацияПриемника,
			ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование)));
	КонецЕсли;

КонецПроцедуры // ВывестиСвязьДиаграммыПоследовательности()

&НаСервере
Функция СвойстваЭлементаДиаграммы(ОбъектОбработки, ИмяТаблицыСвойств, КлючОтбораСвойств)

	ОтборСвойств = ОбъектОбработки.ОтборСвойствПоТаблице(
			ИмяТаблицыСвойств,
			КлючОтбораСвойств,
			ТекущаяДиаграмма.Ключ,
			ТекущаяДиаграмма.Тип);
	НайденныеСтроки = Объект[ИмяТаблицыСвойств].НайтиСтроки(ОтборСвойств);

	ТекущиеСвойства = Новый Соответствие();
	Для Каждого СтрокаСвойства Из НайденныеСтроки Цикл

		Если Не ЗначениеЗаполнено(СтрокаСвойства.Значение) Тогда

			Продолжить;

		КонецЕсли;

		ТекущиеСвойства.Вставить(СтрокаСвойства.Свойство, СтрокаСвойства.Значение);

	КонецЦикла;

	Возврат ТекущиеСвойства;

КонецФункции // СвойстваЭлементаДиаграммы()

&НаСервере
Функция ЗначениеСвойстваЭлементаДиаграммы(СвойстваЭлементаДиаграммы, ИмяСвойства, ЗначениеПоУмолчанию = "")

	ЗначениеСвойства = СвойстваЭлементаДиаграммы.Получить(ИмяСвойства);

	Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда

		Возврат ЗначениеПоУмолчанию;

	КонецЕсли;

	Цвета = Новый Массив();
	Цвета.Добавить("ЦветФона");
	Цвета.Добавить("ЦветСтрелки");

	Если Цвета.Найти(ИмяСвойства) <> Неопределено И Не СтрНачинаетсяС(ЗначениеСвойства, "#") Тогда

		ЗначениеСвойства = СтрШаблон("#%1", ЗначениеСвойства);

	КонецЕсли;

	Возврат ЗначениеСвойства;

КонецФункции // ЗначениеСвойстваЭлементаДиаграммы()

&НаСервере
Функция УказанОбъектДиаграммы(ИмяОбъекта)

	ЗначениеНастроекДиаграммы = РеквизитФормыВЗначение("РедакторДиаграммы");
	УсловиеПоиска = Новый Структура();
	УсловиеПоиска.Вставить("Наименование", ИмяОбъекта);
	УсловиеПоиска.Вставить("Тип", ДоступныеТипыЭлементов().Объект);

	Возврат ЗначениеНастроекДиаграммы.Строки.НайтиСтроки(УсловиеПоиска, Истина).Количество() > 0;

КонецФункции // УказанОбъектДиаграммы()

&НаСервере
Процедура ЗаписатьДиаграммуКлассов(ОбъектОбработки, ТекстUML)

	Если Не ТекущаяДиаграмма.Тип = ТипыДиаграммПоИмени(ТипыДиаграмм).ДиаграммаКлассов Тогда
		Возврат;
	КонецЕсли;

	// Получим общие свойства диагараммы
	СвойстваДиаграммы = СвойстваЭлементаДиаграммы(ОбъектОбработки, "СвойстваДиаграмм", ТекущаяДиаграмма.Ключ);

	СвойстваБезЗначения = Новый Массив;
	СвойстваБезЗначения.Добавить("hide @unlinked");
	
	Для Каждого ПараметрыДиаграммы Из СвойстваДиаграммы Цикл

		Если ПустаяСтрока(ПараметрыДиаграммы.Значение)
			ИЛИ ПараметрыДиаграммы.Ключ = "ФорматКартинкиРезультата" Тогда
			Продолжить;
		КонецЕсли;

		ЗначениеСвойства = "";
		Если СвойстваБезЗначения.Найти(ПараметрыДиаграммы.Ключ) = Неопределено Тогда
			ЗначениеСвойства = ПараметрыДиаграммы.Значение;
		КонецЕсли;

		ТекстСвойства = СтрШаблон("%1 %2",
			ПараметрыДиаграммы.Ключ,
			ЗначениеСвойства);
		ТекстUML.Добавить(ТекстСвойства);

	КонецЦикла;

	// Добавим группы объектов и сами объекты
	ЭлементыДиаграммы = РеквизитФормыВЗначение("РедакторДиаграммы");
	ТекстГруппОбъектов = Новый Массив();
	ТекстСвязей = Новый Массив();
	ДополнитьТекстЭлементамиДиаграммыКлассов(
		ОбъектОбработки,
		ЭлементыДиаграммы.Строки,
		ТекстГруппОбъектов,
		ТекстСвязей);

	Для Каждого СтрокаОбъекта Из ТекстГруппОбъектов Цикл

		ТекстUML.Добавить(СтрокаОбъекта);

	КонецЦикла;

	Для Каждого СтрокаСвязи Из ТекстСвязей Цикл

		ТекстUML.Добавить(СтрокаСвязи);

	КонецЦикла;

КонецПроцедуры // ЗаписатьДиаграммуПоследовательностей()

&НаСервере
Процедура ДополнитьТекстЭлементамиДиаграммыКлассов(
		ОбъектОбработки,
		ОбъектыГруппы,
		ТекстГруппОбъектов,
		ТекстСвязей)

	Для Каждого ЭлементДиаграммы Из ОбъектыГруппы Цикл

		Если ЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Группа Тогда

			ВывестиГруппуДиаграммыКлассов(ОбъектОбработки, ТекстГруппОбъектов, ТекстСвязей, ЭлементДиаграммы);

		ИначеЕсли ЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Объект Тогда

			ВывестиОбъектДиаграммыКлассов(ОбъектОбработки, ТекстГруппОбъектов, ТекстСвязей, ЭлементДиаграммы);

		ИначеЕсли ЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Связь
			И Не ПустаяСтрока(ЭлементДиаграммы.ПриемникСвязи) Тогда

			ВывестиСвязьДиаграммыКлассов(ОбъектОбработки, ТекстСвязей, ЭлементДиаграммы);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ДополнитьТекстГруппамиИОбъектами()

&НаСервере
Процедура ВывестиГруппуДиаграммыКлассов(ОбъектОбработки, ТекстГруппОбъектов, ТекстСвязей, ЭлементДиаграммы)

	СвойстваГруппы = СвойстваЭлементаДиаграммы(ОбъектОбработки, "СвойстваГрупп", ЭлементДиаграммы.Наименование);
	ЦветФона = ЗначениеСвойстваЭлементаДиаграммы(СвойстваГруппы, "ЦветФона", "");
	Стиль = ЗначениеСвойстваЭлементаДиаграммы(СвойстваГруппы, "ТипГруппы", "");

	Если Не ПустаяСтрока(Стиль) Тогда

		Стиль = СтрШаблон("<<%1>>", Стиль);

	КонецЕсли;

	НачалоГруппы = СтрШаблон(
		"package ""%1"" %2 %3 {",
		ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование),
		Стиль,
		ЦветФона);
	СоставГруппы = Новый Массив();
	ДополнитьТекстЭлементамиДиаграммыКлассов(
		ОбъектОбработки,
		ЭлементДиаграммы.Строки,
		СоставГруппы,
		ТекстСвязей);

	ТекстГруппОбъектов.Добавить(НачалоГруппы);
	ТекстГруппОбъектов.Добавить(СтрСоединить(СоставГруппы, Символы.ПС));
	ТекстГруппОбъектов.Добавить("}");

КонецПроцедуры // ВывестиГруппуДиаграммыКлассов()

&НаСервере
Процедура ВывестиОбъектДиаграммыКлассов(ОбъектОбработки, ТекстГруппОбъектов, ТекстСвязей, ЭлементДиаграммы)

	СвойстваОбъекта = СвойстваЭлементаДиаграммы(ОбъектОбработки, "СвойстваОбъектов", ЭлементДиаграммы.Наименование);
	ТипОбъекта = ЗначениеСвойстваЭлементаДиаграммы(СвойстваОбъекта, "ТипОбъекта", "class");
	ПредставлениеОбъекта = ЗначениеСвойстваЭлементаДиаграммы(СвойстваОбъекта, "ПредставлениеОбъекта");
	Дженерик = ЗначениеСвойстваЭлементаДиаграммы(СвойстваОбъекта, "Дженерик");
	ЦветФона = ЗначениеСвойстваЭлементаДиаграммы(СвойстваОбъекта, "ЦветФона");

	ДополнительныеПараметры = Новый Массив();
	МеткаДляОбъектаМетаданных = МеткаДляОбъектаМетаданных(ЭлементДиаграммы.ПутьКМетаданным);

	Если ЗначениеЗаполнено(МеткаДляОбъектаМетаданных) Тогда

		ДополнительныеПараметры.Добавить(СтрШаблон("(%1)", МеткаДляОбъектаМетаданных));

	КонецЕсли;

	Если Не ПустаяСтрока(Дженерик) Тогда

		ДополнительныеПараметры.Добавить(Дженерик);
		Дженерик = СтрШаблон("<< %1 >>", Дженерик);

	КонецЕсли;

	ОписаниеКласса = "";
	Если ДополнительныеПараметры.Количество() > 0 Тогда

		ОписаниеКласса = СтрШаблон("<< %1 >>", СтрСоединить(ДополнительныеПараметры, " "));

	КонецЕсли;

	ПредставлениеКласса = ПредставлениеОбъектаКласса(ЭлементДиаграммы.Наименование);
	Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
		ТекстОбъекта = СтрШаблон(
			"%1 ""%2"" as %3 %4 %5",
			ТипОбъекта,
			ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование),
			ПредставлениеКласса,
			ОписаниеКласса,
			ЦветФона);
	Иначе
		ТекстОбъекта = СтрШаблон(
			"%1 ""%2"" as %3 %4 %5",
			ТипОбъекта,
			ПредставлениеЭлементаПоНаименованию(ПредставлениеОбъекта),
			ПредставлениеКласса,
			ОписаниеКласса,
			ЦветФона);
	КонецЕсли;

	ДополнитьОбъектПолямиИМетодами(ОбъектОбработки, ЭлементДиаграммы, ТекстОбъекта);

	ТекстГруппОбъектов.Добавить(ТекстОбъекта);
	ДополнитьТекстЭлементамиДиаграммыКлассов(
		ОбъектОбработки,
		ЭлементДиаграммы.Строки,
		ТекстГруппОбъектов,
		ТекстСвязей);

КонецПроцедуры // ВывестиОбъектДиаграммыКлассов()

&НаСервере
Процедура ВывестиСвязьДиаграммыКлассов(ОбъектОбработки, ТекстСвязей, ЭлементДиаграммы)

	Если Не УказанОбъектДиаграммы(ЭлементДиаграммы.ПриемникСвязи) Тогда

		Возврат;

	КонецЕсли;

	СвойстваСвязи = СвойстваЭлементаДиаграммы(ОбъектОбработки, "СвойстваСвязей", ЭлементДиаграммы.Ключ);
	ТипСтрелки = ЗначениеСвойстваЭлементаДиаграммы(СвойстваСвязи, "СтильСтрелки", "");
	ТолщинаЛинии = ЗначениеСвойстваЭлементаДиаграммы(СвойстваСвязи, "ТолщинаЛинии");
	МеткаИсточник = ЗначениеСвойстваЭлементаДиаграммы(СвойстваСвязи, "МеткаИсточник");
	МеткаПриемник = ЗначениеСвойстваЭлементаДиаграммы(СвойстваСвязи, "МеткаПриемник");
	ЦветСтрелки = ЗначениеСвойстваЭлементаДиаграммы(СвойстваСвязи, "ЦветСтрелки");
	НаконечникИсточника = ЗначениеСвойстваЭлементаДиаграммы(СвойстваСвязи, "НаконечникИсточника");
	НаконечникПриемника = ЗначениеСвойстваЭлементаДиаграммы(СвойстваСвязи, "НаконечникПриемника");
	ТипСвязи = ЗначениеСвойстваЭлементаДиаграммы(СвойстваСвязи, "ТипСвязи", "Связь");

	Если Не ПустаяСтрока(МеткаИсточник) Тогда
		МеткаИсточник = СтрШаблон("""%1""", МеткаИсточник);
	КонецЕсли;

	Если Не ПустаяСтрока(МеткаПриемник) Тогда
		МеткаПриемник = СтрШаблон("""%1""", МеткаПриемник);
	КонецЕсли;

	ПараметрыВывода = Новый Массив();
	Если Не ПустаяСтрока(ЦветСтрелки) Тогда
		ПараметрыВывода.Добавить(ЦветСтрелки);
	КонецЕсли;
	Если Не ПустаяСтрока(ТипСтрелки) Тогда
		ПараметрыВывода.Добавить(ТипСтрелки);
	КонецЕсли;
	Если Не ПустаяСтрока(ТолщинаЛинии) Тогда
		ПараметрыВывода.Добавить(СтрШаблон("thickness=%1", ТолщинаЛинии));
	КонецЕсли;
	ПредставлениеСтиля = СтрСоединить(ПараметрыВывода, ",");
	Если Не ПустаяСтрока(ПредставлениеСтиля) Тогда
		ПредставлениеСтиля = СтрШаблон("[%1]", ПредставлениеСтиля);
	КонецЕсли;

	ПредставлениеСвязи = "";
	ПредставлениеИсточника = ПредставлениеОбъектаКласса(ЭлементДиаграммы.Родитель.Наименование);
	ЭтоПолеОбъекта = ТипСвязи <> "Связь" И Не ПустаяСтрока(ЭлементДиаграммы.Наименование);
	Если ЭтоПолеОбъекта Тогда
		ПредставлениеСвязиНачало = СтрШаблон(
			"""%1::%2"" %3 %4",
			ПредставлениеИсточника,
			ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование),
			МеткаИсточник,
			НаконечникИсточника);
	Иначе
		ПредставлениеСвязиНачало = СтрШаблон(
			"%1%2 %3",
			ПредставлениеИсточника,
			МеткаИсточник,
			НаконечникИсточника);
	КонецЕсли;

	ПредставлениеПриемника = ПредставлениеОбъектаКласса(ЭлементДиаграммы.ПриемникСвязи);
	ПредставлениеСвязиКонец = СтрШаблон("%1 %2 %3",
		НаконечникПриемника, МеткаПриемник, 
		ПредставлениеПриемника);
	Если ПустаяСтрока(ЭлементДиаграммы.Наименование) ИЛИ ЭтоПолеОбъекта Тогда
		ПредставлениеСвязи = СтрШаблон(
			"%1-%2-%3",
			ПредставлениеСвязиНачало,
			ПредставлениеСтиля,
			ПредставлениеСвязиКонец);
	Иначе
		ПредставлениеСвязи = СтрШаблон(
			"%1-%2-%3 : ""%4""",
			ПредставлениеСвязиНачало,
			ПредставлениеСтиля,
			ПредставлениеСвязиКонец,
			ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование));
	КонецЕсли;
	ТекстСвязей.Добавить(ПредставлениеСвязи);

КонецПроцедуры // ВывестиСвязьДиаграммыКлассов()

&НаСервере
Функция ПредставлениеОбъектаКласса(Знач ИсходноеИмяОбъекта)

	РазрешенныеСимволы = 
		"0123456789AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZzАаБбВвГгДдЕеЁёЖжЗзИиЙйКкЛлМмНнОоПпРрСсТтУуФфХхЦцШшЩщЧчЪъЫыЬьЭэЮюЯя";
	СимволыУдалить = СтрСоединить(СтрРазделить(ИсходноеИмяОбъекта, РазрешенныеСимволы));

	Возврат СтрСоединить(СтрРазделить(ИсходноеИмяОбъекта, СимволыУдалить));

КонецФункции // ПредставлениеИсточника()

&НаСервере
Процедура ДополнитьОбъектПолямиИМетодами(ОбъектОбработки, ЭлементДиаграммы, ТекстОбъекта)

	СписокПолей = Новый Массив();
	СписокМетодов = Новый Массив();

	Для Каждого СвязьОбъекта Из ЭлементДиаграммы.Строки Цикл

		Если ПустаяСтрока(СвязьОбъекта.Наименование) Тогда

			Продолжить;

		КонецЕсли;

		СвойстваОбъекта = СвойстваЭлементаДиаграммы(ОбъектОбработки, "СвойстваСвязей", СвязьОбъекта.Ключ);
		ТипСвязи = ЗначениеСвойстваЭлементаДиаграммы(СвойстваОбъекта, "ТипСвязи", "Связь");
		ВидимостьПоля = ЗначениеСвойстваЭлементаДиаграммы(СвойстваОбъекта, "ВидимостьПоля", "");

		Если ТипСвязи = "Поле" И СписокПолей.Найти(СвязьОбъекта.Наименование) = Неопределено Тогда

			СписокПолей.Добавить(СтрШаблон("%1%2",
				ВидимостьПоля,
				ПредставлениеЭлементаПоНаименованию(СвязьОбъекта.Наименование)));

		ИначеЕсли ТипСвязи = "Метод" И СписокПолей.Найти(СвязьОбъекта.Наименование) = Неопределено Тогда

			Если Не СтрЗаканчиваетсяНа(СвязьОбъекта.Наименование, "()") Тогда

				СписокМетодов.Добавить(СтрШаблон("%1%2()",
					ВидимостьПоля,
					ПредставлениеЭлементаПоНаименованию(СвязьОбъекта.Наименование)));

			Иначе

				СписокМетодов.Добавить(ПредставлениеЭлементаПоНаименованию(СвязьОбъекта.Наименование));

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	ДополнительныеПоля =  СтрСоединить(СписокПолей, Символы.ПС)
		+ ?(СписокМетодов.Количество() > 0 И СписокПолей.Количество() > 0, Символы.ПС, "")
		+ СтрСоединить(СписокМетодов, Символы.ПС);

	Если Не ПустаяСтрока(ДополнительныеПоля) Тогда

		ТекстОбъекта = СтрШаблон("%1 {
		|%2
		|}", ТекстОбъекта, ДополнительныеПоля);

	КонецЕсли;

КонецПроцедуры // ДополнитьОбъектПолямиИМетодами()

&НаСервере
Процедура ЗаписатьДиаграммуДеятельности(ОбъектОбработки, ТекстUML)

	Если Не ТекущаяДиаграмма.Тип = ТипыДиаграммПоИмени(ТипыДиаграмм).ДиаграммаДеятельности Тогда
		Возврат;
	КонецЕсли;

	// Получим общие свойства диагараммы
	СвойстваДиаграммы = СвойстваЭлементаДиаграммы(ОбъектОбработки, "СвойстваДиаграмм", ТекущаяДиаграмма.Ключ);

	СвойстваБезЗначения = Новый Массив;
	СвойстваБезЗначения.Добавить("!pragma useVerticalIf on");
	СвойстваБезЗначения.Добавить("skinparam ArrowHeadColor none");
	
	Для Каждого ПараметрыДиаграммы Из СвойстваДиаграммы Цикл

		Если ПустаяСтрока(ПараметрыДиаграммы.Значение)
			ИЛИ ПараметрыДиаграммы.Ключ = "ФорматКартинкиРезультата" Тогда
			Продолжить;
		КонецЕсли;

		ЗначениеСвойства = "";
		Если СвойстваБезЗначения.Найти(ПараметрыДиаграммы.Ключ) = Неопределено Тогда
			ЗначениеСвойства = ПараметрыДиаграммы.Значение;
		КонецЕсли;

		ТекстСвойства = СтрШаблон("%1 %2",
			ПараметрыДиаграммы.Ключ,
			ЗначениеСвойства);
		ТекстUML.Добавить(ТекстСвойства);

	КонецЦикла;

	ЭлементыДиаграммы = РеквизитФормыВЗначение("РедакторДиаграммы");
	ВыведенныеОбъекты = Новый Массив();
	ЗаписатьЭлементыДиаграммыДеятельностиВТекст(ОбъектОбработки, ТекстUML, ЭлементыДиаграммы.Строки, ВыведенныеОбъекты);

	// Удалим от пустых настроек связей
	Пока Истина Цикл

		НайденнаяПустаяСвязь = ТекстUML.Найти("--> ");
		Если НайденнаяПустаяСвязь <> Неопределено Тогда

			ТекстUML.Удалить(НайденнаяПустаяСвязь);

		Иначе

			Прервать;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаписатьДиаграммуДеятельности()

&НаСервере
Процедура ЗаписатьЭлементыДиаграммыДеятельностиВТекст(ОбъектОбработки, ТекстUML, ЭлементыДиаграммы, ВыведенныеОбъекты)

	ЕстьОшибкиПриФормировании = Ложь;

	Для Каждого ЭлементДиаграммы Из ЭлементыДиаграммы Цикл

		Если ЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Группа Тогда

		ВывестиГруппуДиаграммыДеятельности(ОбъектОбработки, ТекстUML, ВыведенныеОбъекты, ЭлементДиаграммы);

		ИначеЕсли ЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Объект Тогда

			Если ВыведенныеОбъекты.Найти(ЭлементДиаграммы.Наименование) <> Неопределено Тогда

				Продолжить;

			КонецЕсли;

			ВыводитьСвязиОбъекта = Истина;
			ВывестиОбъектДиаграммыДеятельности(
				ОбъектОбработки,
				ТекстUML,
				ЭлементДиаграммы,
				ВыводитьСвязиОбъекта,
				ВыведенныеОбъекты,
				ЭлементыДиаграммы,
				ЕстьОшибкиПриФормировании);

			Если ЕстьОшибкиПриФормировании Тогда

				ТекстUML.Очистить();
				Прервать;

			КонецЕсли;

			ВыведенныеОбъекты.Добавить(ЭлементДиаграммы.Наименование);

			ВывестиСвязанныеОбъекты(
				ОбъектОбработки,
				ТекстUML,
				ЭлементыДиаграммы,
				ЭлементДиаграммы,
				ВыведенныеОбъекты,
				ВыводитьСвязиОбъекта,
				ЕстьОшибкиПриФормировании);

			Если ЕстьОшибкиПриФормировании Тогда

				ТекстUML.Очистить();
				Прервать;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВывестиГруппуДиаграммыДеятельности(ОбъектОбработки, ТекстUML, ВыведенныеОбъекты, ЭлементДиаграммы)

	СвойстваГруппы = СвойстваЭлементаДиаграммы(ОбъектОбработки, "СвойстваГрупп", ЭлементДиаграммы.Наименование);
	ФормаГруппы = ЗначениеСвойстваЭлементаДиаграммы(СвойстваГруппы, "ТипГруппы", "");
	ЦветГруппы = ЗначениеСвойстваЭлементаДиаграммы(СвойстваГруппы, "ЦветФона");

	Если ПустаяСтрока(ФормаГруппы) Тогда

		НачалоГруппы = СтрШаблон(
			"group %1 ""%2""",
			ЦветГруппы,
			ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование));
		КонецГруппы = "end group";

	Иначе

		НачалоГруппы = СтрШаблон("%1 %2 ""%3"" {",
			ФормаГруппы,
			ЦветГруппы,
			ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование));
		КонецГруппы = "}";

	КонецЕсли;

	ТекстUML.Добавить(НачалоГруппы);

	ЗаписатьЭлементыДиаграммыДеятельностиВТекст(
		ОбъектОбработки,
		ТекстUML,
		ЭлементДиаграммы.Строки,
		ВыведенныеОбъекты);

	ТекстUML.Добавить(КонецГруппы);

КонецПроцедуры // ВывестиГруппуДиаграммыДеятельности()

&НаСервере
Процедура ВывестиСвязанныеОбъекты(
		ОбъектОбработки,
		ТекстUML,
		ЭлементыДиаграммы,
		ЭлементДиаграммы,
		ВыведенныеОбъекты,
		ВыводитьСвязиОбъекта,
		ЕстьОшибки,
		СвязьОбъекта = Неопределено)

	Если ЭлементДиаграммы.Строки.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	Если СвязьОбъекта = Неопределено Тогда

		СвязьОбъекта = ЭлементДиаграммы.Строки[0];

	КонецЕсли; 

	Если ВыведенныеОбъекты.Найти(СвязьОбъекта.ПриемникСвязи) <> Неопределено
		ИЛИ ПустаяСтрока(СвязьОбъекта.ПриемникСвязи)
		ИЛИ Не УказанОбъектДиаграммы(СвязьОбъекта.ПриемникСвязи) Тогда

		Возврат;

	КонецЕсли;

	ПоискОбъекта = Новый Структура("Наименование", СвязьОбъекта.ПриемникСвязи);
	НайденныеОбъекты = ЭлементыДиаграммы.НайтиСтроки(ПоискОбъекта);

	Если НайденныеОбъекты.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;
	ОбъектСвязи = НайденныеОбъекты[0];

	ВывестиСвязьОбъектовКлассов(ОбъектОбработки, ТекстUML, ЭлементыДиаграммы, СвязьОбъекта, ВыводитьСвязиОбъекта);

	ВыводитьСвязиОбъекта = Истина;
	ВывестиОбъектДиаграммыДеятельности(
		ОбъектОбработки,
		ТекстUML,
		ОбъектСвязи,
		ВыводитьСвязиОбъекта,
		ВыведенныеОбъекты,
		ЭлементыДиаграммы,
		ЕстьОшибки);

	Если ЕстьОшибки Тогда

		Возврат;

	КонецЕсли;

	ВыведенныеОбъекты.Добавить(СвязьОбъекта.ПриемникСвязи);

	ВывестиСвязанныеОбъекты(
		ОбъектОбработки,
		ТекстUML,
		ЭлементыДиаграммы,
		ОбъектСвязи,
		ВыведенныеОбъекты,
		ВыводитьСвязиОбъекта,
		ЕстьОшибки);

КонецПроцедуры // ВывестиСвязанныеОбъекты()

&НаСервере
Процедура ВывестиСвязьОбъектовКлассов(
	ОбъектОбработки, ТекстUML, ЭлементыДиаграммы, СвязьОбъекта, ВыводитьСвязиОбъекта)

	СвойстваСвязи = СвойстваЭлементаДиаграммы(ОбъектОбработки, "СвойстваСвязей", СвязьОбъекта.Ключ);
	СтильСтрелкиСвязи = ЗначениеСвойстваЭлементаДиаграммы(СвойстваСвязи, "СтильСтрелки", "");
	ЦветСтрелки = ЗначениеСвойстваЭлементаДиаграммы(СвойстваСвязи, "ЦветСтрелки");

	СвойстваСтрелки = Новый Массив();

	Если Не ПустаяСтрока(ЦветСтрелки) Тогда
		СвойстваСтрелки.Добавить(ЦветСтрелки);
	КонецЕсли;

	Если Не ПустаяСтрока(СтильСтрелкиСвязи) Тогда
		СвойстваСтрелки.Добавить(СтильСтрелкиСвязи);
	КонецЕсли;

	Если Не ВыводитьСвязиОбъекта Тогда

		Если СвойстваСтрелки.Количество() > 0 Тогда

			ТекстСтрелки = СтрШаблон("-[%1]->;",
				СтрСоединить(СвойстваСтрелки, ","));
			ТекстUML.Добавить(ТекстСтрелки);

		КонецЕсли;

	ИначеЕсли СвойстваСтрелки.Количество() > 0 Тогда

		ТекстСтрелки = СтрШаблон("-[%1]-> %2;",
			СтрСоединить(СвойстваСтрелки, ","),
			ПредставлениеЭлементаПоНаименованию(СвязьОбъекта.Наименование));
		ТекстUML.Добавить(ТекстСтрелки);

	ИначеЕсли Не ПустаяСтрока(СвязьОбъекта.Наименование) Тогда

		ТекстСтрелки = СтрШаблон("-> %1;", ПредставлениеЭлементаПоНаименованию(СвязьОбъекта.Наименование));
		ТекстUML.Добавить(ТекстСтрелки);

	КонецЕсли;

КонецПроцедуры // ВывестиСвязьОбъектовКлассов()

&НаСервере
Процедура ВывестиОбъектДиаграммыДеятельности(
		ОбъектОбработки,
		ТекстUML,
		ЭлементДиаграммы,
		ВыводитьСвязиОбъекта,
		ВыведенныеОбъекты,
		ЭлементыДиаграммы,
		ЕстьОшибки)

	ЗначениеСвойства = ЗначениеСвойстваОбъекта(
		ОбъектОбработки,
		"СвойстваОбъектов",
		ТекущаяДиаграмма.Ключ,
		ЭлементДиаграммы.Наименование,
		ТекущаяДиаграмма.Тип,
		"ТипОбъекта",
		"do");

	Если ЗначениеСвойства = "do" Тогда

		ЦветДействия = ЗначениеСвойстваОбъекта(
			ОбъектОбработки,
			"СвойстваОбъектов",
			ТекущаяДиаграмма.Ключ,
			ЭлементДиаграммы.Наименование,
			ТекущаяДиаграмма.Тип,
			"ЦветФона");
		Если Не ПустаяСтрока(ЦветДействия) И Не СтрНачинаетсяС(ЦветДействия, "#") Тогда
			ЦветДействия = СтрШаблон("#%1", ЦветДействия);
		КонецЕсли;
		ВидДействия = ЗначениеСвойстваОбъекта(
			ОбъектОбработки,
			"СвойстваОбъектов",
			ТекущаяДиаграмма.Ключ,
			ЭлементДиаграммы.Наименование,
			ТекущаяДиаграмма.Тип,
			"ВидДействия",
			";");

		ОписаниеДействия = СтрШаблон(
			"%1 : %2 %3",
			ЦветДействия,
			ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование),
			ВидДействия);
		ТекстUML.Добавить(ОписаниеДействия);

	ИначеЕсли ЗначениеСвойства = "start"
		ИЛИ ЗначениеСвойства = "endif"
		ИЛИ ЗначениеСвойства = "endswitch"
		ИЛИ ЗначениеСвойства = "break" Тогда

		ТекстUML.Добавить(ЗначениеСвойства);

	ИначеЕсли ЗначениеСвойства = "end" Тогда

		ВидОкончания = ЗначениеСвойстваОбъекта(
			ОбъектОбработки,
			"СвойстваОбъектов",
			ТекущаяДиаграмма.Ключ,
			ЭлементДиаграммы.Наименование,
			ТекущаяДиаграмма.Тип,
			"ВидОкончания",
			"end");

		ТекстUML.Добавить(ВидОкончания);

	ИначеЕсли ЗначениеСвойства = "while" Тогда

		Если ЭлементДиаграммы.Строки.Количество() < 1 Тогда

			СообщениеПользователю = Новый СообщениеПользователю();
			СообщениеПользователю.Текст = СтрШаблон(
				НСтр("ru = 'Для цикла ""%1"" должна быть указана связь.'"),
				ЭлементДиаграммы.Наименование);
			СообщениеПользователю.Сообщить();
			ЕстьОшибки = Истина;
			Возврат;

		КонецЕсли;

		ПредставлениеОбъекта = ПредставлениеОбъектаПоУсловию(ЗначениеСвойства, ЭлементДиаграммы);
		ТекстUML.Добавить(ПредставлениеОбъекта);

		ВывестиСвязанныеОбъекты(
			ОбъектОбработки,
			ТекстUML,
			ЭлементыДиаграммы,
			ЭлементДиаграммы,
			ВыведенныеОбъекты,
			Ложь,
			ЕстьОшибки,
			ЭлементДиаграммы.Строки[0]);

		ТекстUML.Добавить("endwhile");

	ИначеЕсли ЗначениеСвойства = "if" Тогда

		Если ЭлементДиаграммы.Строки.Количество() < 1 Тогда

			СообщениеПользователю = Новый СообщениеПользователю();
			СообщениеПользователю.Текст = СтрШаблон(
				НСтр("ru = 'Для условия ""%1"" должна быть указана связь.'"),
				ЭлементДиаграммы.Наименование);
			СообщениеПользователю.Сообщить();
			ЕстьОшибки = Истина;
			Возврат;

		КонецЕсли;

		ПредставлениеОбъекта = ПредставлениеОбъектаПоУсловию(ЗначениеСвойства, ЭлементДиаграммы);
		ТекстUML.Добавить(ПредставлениеОбъекта);

		ВывестиСвязанныеОбъекты(
			ОбъектОбработки,
			ТекстUML,
			ЭлементыДиаграммы,
			ЭлементДиаграммы,
			ВыведенныеОбъекты,
			Ложь,
			ЕстьОшибки,
			ЭлементДиаграммы.Строки[0]);

		НомерСтроки = 1;
		УсловиеДействия = Неопределено;
		Пока НомерСтроки < ЭлементДиаграммы.Строки.Количество() Цикл

			ЗначениеСвойстваУсловия = ЗначениеСвойстваОбъекта(
				ОбъектОбработки,
				"СвойстваОбъектов",
				ТекущаяДиаграмма.Ключ,
				ЭлементДиаграммы.Строки[НомерСтроки].Наименование,
				ТекущаяДиаграмма.Тип,
				"ТипОбъекта",
				"do");

			Если ЗначениеСвойстваУсловия = "elseif" Тогда

				ВывестиСвязанныеОбъекты(
					ОбъектОбработки,
					ТекстUML,
					ЭлементыДиаграммы,
					ЭлементДиаграммы,
					ВыведенныеОбъекты,
					Ложь,
					ЕстьОшибки,
					ЭлементДиаграммы.Строки[НомерСтроки]);

			ИначеЕсли УсловиеДействия = Неопределено Тогда

				УсловиеДействия = ЭлементДиаграммы.Строки[НомерСтроки];

			КонецЕсли;

			НомерСтроки = НомерСтроки + 1;

		КонецЦикла;

		Если УсловиеДействия <> Неопределено Тогда

			БлокИначе = ПредставлениеОбъектаПоУсловию(
				"else",
				Неопределено,
				УсловиеДействия.Наименование);
			ТекстUML.Добавить(БлокИначе);
	
			ВывестиСвязанныеОбъекты(
				ОбъектОбработки,
				ТекстUML,
				ЭлементыДиаграммы,
				ЭлементДиаграммы,
				ВыведенныеОбъекты,
				Ложь,
				ЕстьОшибки,
				УсловиеДействия);

		КонецЕсли;

		ТекстUML.Добавить("endif");

		Если НомерСтроки > 2
			И ЗначениеСвойстваУсловия <> "elseif"
			И ЭлементДиаграммы.Строки[НомерСтроки - 1] <> УсловиеДействия Тогда

			ВывестиСвязанныеОбъекты(
				ОбъектОбработки,
				ТекстUML,
				ЭлементыДиаграммы,
				ЭлементДиаграммы,
				ВыведенныеОбъекты,
				Ложь,
				ЕстьОшибки,
				ЭлементДиаграммы.Строки[НомерСтроки - 1]);

		КонецЕсли;

	ИначеЕсли ЗначениеСвойства = "if"
		ИЛИ ЗначениеСвойства = "elseif"
		ИЛИ ЗначениеСвойства = "else"
		ИЛИ ЗначениеСвойства = "while"
		ИЛИ ЗначениеСвойства = "endwhile" Тогда

		ВыводитьСвязиОбъекта = Ложь;
		ПредставлениеОбъекта = ПредставлениеОбъектаПоУсловию(ЗначениеСвойства, ЭлементДиаграммы);
		ТекстUML.Добавить(ПредставлениеОбъекта);

	ИначеЕсли ЗначениеСвойства = "switch" Тогда

		НачалоУсловия = СтрШаблон("switch(%1)", ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование));
		ТекстUML.Добавить(НачалоУсловия);

		Для Каждого ЭлементУсловия Из ЭлементДиаграммы.Строки Цикл

			ПредставлениеУсловия = СтрШаблон(
				"case (%1)",
				ПредставлениеЭлементаПоНаименованию(ЭлементУсловия.Наименование));
			ТекстUML.Добавить(ПредставлениеУсловия);
			ВывестиСвязанныеОбъекты(
				ОбъектОбработки,
				ТекстUML,
				ЭлементыДиаграммы,
				ЭлементДиаграммы,
				ВыведенныеОбъекты,
				Ложь,
				ЕстьОшибки,
				ЭлементУсловия);

		КонецЦикла;

		ТекстUML.Добавить("endswitch");

	ИначеЕсли ЗначениеСвойства = "fork" Тогда

		ТекстUML.Добавить("fork");

		ЭтоПервый = Истина;
		Для Каждого ЭлементУсловия Из ЭлементДиаграммы.Строки Цикл

			Если ЭтоПервый Тогда
				ЭтоПервый = Ложь;
			Иначе
				ТекстUML.Добавить("fork again");
			КонецЕсли;
			ВывестиСвязанныеОбъекты(
				ОбъектОбработки,
				ТекстUML,
				ЭлементыДиаграммы,
				ЭлементДиаграммы,
				ВыведенныеОбъекты,
				Ложь,
				ЕстьОшибки,
				ЭлементУсловия);

		КонецЦикла;

		ТекстUML.Добавить("end fork");

	КонецЕсли;

КонецПроцедуры // ВывестиОбъектДиаграммыДеятельности()

&НаСервере
Функция ПредставлениеОбъектаПоУсловию(ЗначениеСвойства, ЭлементДиаграммы, ОписаниеПерехода = "")

		// Найдем описание перехода
		Если ЭлементДиаграммы <> Неопределено И ЭлементДиаграммы.Строки.Количество() > 0 Тогда

			ОписаниеПерехода = ЭлементДиаграммы.Строки[0].Наименование;

		КонецЕсли;

		Если ПустаяСтрока(ОписаниеПерехода) Тогда

			Если ЗначениеСвойства = "else"
				ИЛИ ЗначениеСвойства = "endwhile" Тогда

				СтрокаУсловия = ЗначениеСвойства;

			ИначеЕсли ЗначениеСвойства = "while" Тогда

				СтрокаУсловия = СтрШаблон("%1 (%2)",
					ЗначениеСвойства,
					ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование));

			Иначе

				СтрокаУсловия = СтрШаблон("%1 (%2) then",
					ЗначениеСвойства,
					ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование));

			КонецЕсли;

		Иначе

			Если ЗначениеСвойства = "else"
				ИЛИ ЗначениеСвойства = "endwhile" Тогда

				СтрокаУсловия = СтрШаблон("%1 (%2)",
					ЗначениеСвойства,
					ПредставлениеЭлементаПоНаименованию(ОписаниеПерехода));

			ИначеЕсли ЗначениеСвойства = "while" Тогда

				СтрокаУсловия = СтрШаблон("%1 (%2) is (%3)",
					ЗначениеСвойства,
					ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование),
					ПредставлениеЭлементаПоНаименованию(ОписаниеПерехода));

			Иначе

				СтрокаУсловия = СтрШаблон("%1 (%2) then (%3)",
					ЗначениеСвойства,
					ПредставлениеЭлементаПоНаименованию(ЭлементДиаграммы.Наименование),
					ПредставлениеЭлементаПоНаименованию(ОписаниеПерехода));

			КонецЕсли;

		КонецЕсли;

	Возврат СтрокаУсловия;

КонецФункции // ПредставлениеОбъектаПоУсловию()

&НаСервере
Функция ЗначениеСвойстваОбъекта(
		ОбъектОбработки,
		ИмяТаблицы,
		ИмяДиаграммы, 
		КлючОбъекта,
		ТипДиаграммы,
		ИмяСвойстваОбъекта,
		ПоУмолчанию = "")

	ОтборСвойств = ОбъектОбработки.ОтборСвойствПоТаблице(
		ИмяТаблицы,
		КлючОбъекта,
		ИмяДиаграммы,
		ТипДиаграммы);
	ОтборСвойств.Вставить("Свойство", ИмяСвойстваОбъекта);
	НайденныеСтроки = Объект.СвойстваОбъектов.НайтиСтроки(ОтборСвойств);

	Возврат ?(НайденныеСтроки.Количество() > 0
				И ЗначениеЗаполнено(НайденныеСтроки[0].Значение),
				НайденныеСтроки[0].Значение,
				ПоУмолчанию);

КонецФункции // ЗначениеСвойстваОбъекта()

#КонецОбласти

#Область ТипыРезультата

&НаКлиенте
Процедура ВывестиРезультатДиаграммы()

	Если ТекущаяДиаграмма = Неопределено
		ИЛИ ПустаяСтрока(ТекущаяДиаграмма.Ключ) Тогда

		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не выбрана диаграмма.'");
		Сообщение.Сообщить();
		Возврат;

	КонецЕсли;

	СформироватьНаСервере();

КонецПроцедуры // ВывестиРезультатДиаграммы()

&НаСервере
Процедура СформироватьНаСервере(ФормироватьТекстUML = Истина)

	Если РедакторДиаграммы.ПолучитьЭлементы().Количество() = 0 Тогда

		РезультатТекстPlantUML = "";
		АдресКартинкиВоВременномХранилище = "";
		РезультатКартинка = ТекстВыводаПустойДиаграммы();
		Возврат;

	КонецЕсли;

	Если ФормироватьТекстUML Тогда

		РезультатТекстPlantUML = СформироватьТекстPlantUML();

	КонецЕсли;
	РезультатКартинка = СформироватьИзображениеСтороннимСервисом(РезультатТекстPlantUML);

КонецПроцедуры // СформироватьНаСервере()

#КонецОбласти

#Область ФормированиеИзображенияСтороннимСервисом

&НаСервере
Функция СформироватьИзображениеСтороннимСервисом(ДанныеДляФормирования)

	Если ПустаяСтрока(ДанныеДляФормирования) Тогда
		Возврат "";
	КонецЕсли;

	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(ДанныеДляФормирования);
	СжатыеДанные = СжатьДанные(ДвоичныеДанные);
	ФорматPlantUML = ФорматPlantUML(Base64Строка(СжатыеДанные));
	АдресКартинкиВоВременномХранилище = ОтправитьНаСервис(ФорматPlantUML);
	Возврат ТекстВыводаДиаграммы();

КонецФункции // СформироватьИзображениеСтороннимСервисом()

&НаСервереБезКонтекста
Функция СжатьДанные(Данные)

	ЧтениеДанных = Новый ЧтениеДанных(ЗаписатьZip(Данные));

	НачальноеСмещение = 14;
	ЧтениеДанных.Пропустить(НачальноеСмещение);
	ЧтениеДанных.ПрочитатьЦелое32(); // CRC32

	РазмерСжатыхДанных = ЧтениеДанных.ПрочитатьЦелое32();
	ЧтениеДанных.ПрочитатьЦелое32(); // РазмерИсходныхДанных

	РазмерИмениФайла = ЧтениеДанных.ПрочитатьЦелое16();
	РазмерДополнительногоПоля = ЧтениеДанных.ПрочитатьЦелое16();
	ЧтениеДанных.Пропустить(РазмерИмениФайла + РазмерДополнительногоПоля);

	Поток = Новый ПотокВПамяти;
	ЗаписьДанных = Новый ЗаписьДанных(Поток);
	ЧтениеДанных.КопироватьВ(ЗаписьДанных, РазмерСжатыхДанных);
	Возврат Поток.ЗакрытьИПолучитьДвоичныеДанные();

КонецФункции // СжатьДанные()

&НаСервереБезКонтекста
Функция ЗаписатьZip(Данные)

#Если МобильноеПриложениеСервер Тогда
	ВызватьИсключение(НСтр("ru = 'Работа с Zip-файлами в мобильной платформе не поддерживается'"));
#Иначе
	
	ВременныйФайл = ПолучитьИмяВременногоФайла(".bin");
	Данные.Записать(ВременныйФайл);
	ПотокZip = Новый ПотокВПамяти;
	ЗаписьZip = Новый ЗаписьZipФайла(ПотокZip);
	ЗаписьZip.Добавить(ВременныйФайл);
	ЗаписьZip.Записать();
	УдалитьФайлы(ВременныйФайл);
	Возврат ПотокZip.ЗакрытьИПолучитьДвоичныеДанные();
	
#КонецЕсли

КонецФункции // ЗаписатьZip()

&НаСервереБезКонтекста
Функция ФорматPlantUML(Данные) 

	Результат = "";
	СтрокаИскомая = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	СтрокаПодстановки = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_"; 

	Для Сч = 0 По СтрДлина(Данные) - 1 Цикл

		Символ = Сред(Данные, Сч + 1, 1);
		Позиция = СтрНайти(СтрокаИскомая, Символ);

		Если Символ = Символы.ПС Или Символ = Символы.ВК Тогда

			Продолжить;

		КонецЕсли;

		Если Позиция > 0 Тогда

			Результат = Результат + Сред(СтрокаПодстановки, Позиция, 1);

		Иначе

			Результат = Результат + Символ;

		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции // ФорматPlantUML()

&НаСервере
Функция ОтправитьНаСервис(Данные)

	ФорматРезультатаДиаграммы = ФорматРезультатаДиаграммы();

	ПроверитьИЗаполнитьАдресСервера(АдресСервераРендеринга);

	Соединение = Новый HTTPСоединение(АдресСервераРендеринга, , , , , 600);
	Запрос = Новый HTTPЗапрос(АдресНаСервисеПоФормату(ФорматРезультатаДиаграммы) + Данные);

	Попытка

		Ответ = Соединение.Получить(Запрос);

	Исключение

		ТекстСообщения = СтрШаблон(НСтр("ru = 'При формировании изображения диаграммы на сервере %1 возникала ошибка:%2%3'"),
			АдресСервераРендеринга,
			Символы.ПС,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение ТекстСообщения;

	КонецПопытки;

	Если Ответ.КодСостояния < 200 ИЛИ Ответ.КодСостояния > 299 Тогда

		ТекстСообщения = СтрШаблон(НСтр("ru = 'При формировании изображения диаграммы на сервере %1 возникала ошибка:%2%3'"),
			АдресСервераРендеринга,
			Символы.ПС,
			Ответ.ПолучитьТелоКакСтроку());
		ВызватьИсключение ТекстСообщения;

	КонецЕсли;

	ДвоичныеДанныеКартинки = Ответ.ПолучитьТелоКакДвоичныеДанные();
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, Новый УникальныйИдентификатор());

КонецФункции // ОтправитьНаСервис()

&НаСервере
Функция ФорматРезультатаДиаграммы()
	
	ТипРезультата = "PNG";

	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ОтборСвойств = ОбъектОбработки.ОтборСвойствПоТаблице(
		"СвойстваДиаграмм",
		ТекущаяДиаграмма.Ключ,
		ТекущаяДиаграмма.Ключ,
		ТекущаяДиаграмма.Тип);
	ОтборСвойств.Вставить("Свойство", "ФорматКартинкиРезультата");
	НайденныеСтроки = Объект.СвойстваДиаграмм.НайтиСтроки(ОтборСвойств);

	Если НайденныеСтроки.Количество() > 0 И ЗначениеЗаполнено(НайденныеСтроки[0].Значение) Тогда

		ТипРезультата = НайденныеСтроки[0].Значение;

	КонецЕсли;

	Возврат ТипРезультата;

КонецФункции // ФорматРезультатаДиаграммы()

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьИЗаполнитьАдресСервера(АдресСервера)

	Если ПустаяСтрока(АдресСервера) Тогда

		АдресСервера = СерверРендерингаПоУмолчанию();

	КонецЕсли;

КонецПроцедуры // ПроверитьИЗаполнитьАдресСервера()

&НаКлиентеНаСервереБезКонтекста
Функция СерверРендерингаПоУмолчанию()

	Возврат "plantuml.rarus.ru";

КонецФункции // СерверРендерингаПоУмолчанию()

&НаСервере
Функция АдресНаСервисеПоФормату(Формат)

	Результат = АдресаНаСервисеДляФорматов()[Формат];

	Если ПустаяСтрока(Результат) Тогда
		
		ВызватьИсключение "Для данного типа не поддерживается генерация";
		
	КонецЕсли;

	Возврат Результат;

КонецФункции // АдресНаСервисеПоФормату()

&НаСервере
Функция АдресаНаСервисеДляФорматов()

	Результат = Новый Структура();
	Результат.Вставить("Текст", Неопределено);
	Результат.Вставить("PNG", "/plantuml/png/");
	Результат.Вставить("SVG", "/plantuml/svg/");
	Возврат Результат;

КонецФункции // АдресаНаСервисеДляФорматов()

#КонецОбласти

#Область РедактированиеДиаграммы

&НаКлиенте
Процедура ДобавитьЭлементДиаграммы(ТипЭлемента, Родитель, Копирование = Ложь, ДанныеСтрокиКопирования = Неопределено)

	ИмяТаблицыСвойств = ИмяНабораСвойствПоТипуОбъекта(ТипЭлемента);
	НоваяСтрокаЭлемента = Новый Структура("Наименование,ПриемникСвязи");
	НоваяСтрокаЭлемента.Вставить("Тип", ТипЭлемента);
	НоваяСтрокаЭлемента.Вставить("Родитель", Родитель);
	НоваяСтрокаЭлемента.Вставить("Ключ", Новый УникальныйИдентификатор());
	НоваяСтрокаЭлемента.Вставить("ПутьКМетаданным", "");
	ИмяПоляСвойства = "Объект";

	Если ТипЭлемента = ДоступныеТипыЭлементов().Объект
		ИЛИ ТипЭлемента = ДоступныеТипыЭлементов().Группа Тогда

		НоваяСтрокаЭлемента.Наименование = НаименованиеОбъектаПоУмолчанию(ТипЭлемента);
		ТекущийОбъект = НоваяСтрокаЭлемента.Наименование;

	ИначеЕсли ТипЭлемента = ДоступныеТипыЭлементов().Связь Тогда

		ТекущийОбъект = НоваяСтрокаЭлемента.Ключ;
		ИмяПоляСвойства = "Ключ";

		ТекущийАктивныйЭлемент = Элементы.РедакторДиаграммы.ТекущиеДанные;
		Если ТекущийАктивныйЭлемент.Тип = ДоступныеТипыЭлементов().Связь Тогда

			ИсточникСвязи = ТекущийАктивныйЭлемент.ПолучитьРодителя();

		Иначе

			ИсточникСвязи = ТекущийАктивныйЭлемент;

		КонецЕсли;

		НоваяСтрокаЭлемента.Вставить("Источник", ИсточникСвязи.Наименование);

		Если Копирование Тогда

			НоваяСтрокаЭлемента.ПриемникСвязи = ДанныеСтрокиКопирования.ПриемникСвязи;

		Иначе

			СледующийОбъект = НайденныйОбъектПоТекущему(ИсточникСвязи, РедакторДиаграммы.ПолучитьЭлементы());

			Если СледующийОбъект = Неопределено Тогда

				НоваяСтрокаЭлемента.ПриемникСвязи = ИсточникСвязи.Наименование;

			Иначе

				НоваяСтрокаЭлемента.ПриемникСвязи = СледующийОбъект.Наименование;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если Копирование Тогда

		ПараметрыПоиска = КлючевыеСвойстваТиповЭлементов(ДанныеСтрокиКопирования, ТекущаяДиаграмма);
		ПараметрыПоиска.ПоляПоиска.Удалить("Свойство");
		ПараметрыПоиска.ПоляПоиска.Удалить("ТипДиаграммы");
		ЗначенияСвойств = Объект[ПараметрыПоиска.ИмяНабораСвойств].НайтиСтроки(ПараметрыПоиска.ПоляПоиска);

		Для Каждого СтрокаСвойства Из ЗначенияСвойств Цикл

			НоваяСтрока = Объект[ПараметрыПоиска.ИмяНабораСвойств].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСвойства);
			НоваяСтрока[ИмяПоляСвойства] = ТекущийОбъект;

		КонецЦикла;

	Иначе

		ДобавитьСвойстваЭлементуДиаграммыПоУмолчанию(НоваяСтрокаЭлемента, Ложь);

	КонецЕсли;

	ПараметрыЗаполнения = ПараметрыЗаполненияЭлементаДиаграммы(
		ИмяТаблицыСвойств,
		ТекущийОбъект,
		"",
		ТипЭлемента);
	ПараметрыЗаполнения.Вставить("ЭтоНовыйЭлемент", Истина);

	ДополнитьПараметрыЗаполненияЭлементовДиаграммы(ПараметрыЗаполнения, НоваяСтрокаЭлемента);

	ДополнительныеПараметры = ПараметрыЗавершенияРедактированияСвойствЭлементов(
		ИмяТаблицыСвойств,
		ТекущийОбъект,
		ТипЭлемента);
	ДополнительныеПараметры.Вставить("ДобавляемаяСтрока", НоваяСтрокаЭлемента);

	ОткрытьФормуРедактированияЭлементаДиаграммы(ДополнительныеПараметры, ПараметрыЗаполнения);

КонецПроцедуры // ДобавитьЭлементДиаграммы()

&НаКлиенте
Функция НайденныйОбъектПоТекущему(ТекущийЭлемент, ЭлементыДиаграммы, НайденТекущийЭлемент = Ложь)

	СледующийОбъект = Неопределено;

	Для Каждого ЭлементДиаграммы Из ЭлементыДиаграммы Цикл

		Если ЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Группа Тогда

			СледующийОбъект = НайденныйОбъектПоТекущему(
				ТекущийЭлемент,
				ЭлементДиаграммы.ПолучитьЭлементы(),
				НайденТекущийЭлемент);

			Если СледующийОбъект = Неопределено Тогда

				Продолжить;

			КонецЕсли;

			Прервать;

		ИначеЕсли ТекущийЭлемент = ЭлементДиаграммы Тогда

			НайденТекущийЭлемент = Истина;

		ИначеЕсли НайденТекущийЭлемент Тогда

			СледующийОбъект = ЭлементДиаграммы;
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат СледующийОбъект;

КонецФункции // НайденныйОбъектПоТекущему()

&НаКлиенте
Функция НаименованиеОбъектаПоУмолчанию(ТипЭлемента)

	ТекущиеНаименованияОбъектов = Новый СписокЗначений();

	ТипыЭлементовСпискаВыбора = Новый Массив();
	Если ТипЭлемента = ДоступныеТипыЭлементов().Группа Тогда

		ТипыЭлементовСпискаВыбора.Добавить(ДоступныеТипыЭлементов().Группа);
		ШаблонИмениОбъекта = НСтр("ru = 'Группа %1'");

	Иначе

		ТипыЭлементовСпискаВыбора.Добавить(ДоступныеТипыЭлементов().Объект);
		ШаблонИмениОбъекта = НСтр("ru = 'Объект %1'");

	КонецЕсли;

	ПолучитьВсеОбъекты(
		ТекущиеНаименованияОбъектов,
		РедакторДиаграммы.ПолучитьЭлементы(),
		ТипыЭлементовСпискаВыбора);

	ТекущийНомерОбъекта = ТекущиеНаименованияОбъектов.Количество() + 1;

	Пока Истина Цикл

		ТекущееНазваниеОбъекта = СтрШаблон(ШаблонИмениОбъекта, ТекущийНомерОбъекта);

		Если ТекущиеНаименованияОбъектов.НайтиПоЗначению(ТекущееНазваниеОбъекта) = Неопределено Тогда

			Возврат ТекущееНазваниеОбъекта;

		КонецЕсли;

		ТекущийНомерОбъекта = ТекущийНомерОбъекта + 1;

	КонецЦикла;

КонецФункции // НаименованиеОбъектаПоУмолчанию()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьКартинкуТипаЭлемента(Объект, Элементы, ЭлементДиаграгаммы, ТекущаяДиаграмма, ТипыОбъектов)

	КартинкаОбъекта = Неопределено;
	ПараметрыПоиска = КлючевыеСвойстваТиповЭлементов(ЭлементДиаграгаммы, ТекущаяДиаграмма);
	ЗначенияСвойств = Объект[ПараметрыПоиска.ИмяНабораСвойств].НайтиСтроки(ПараметрыПоиска.ПоляПоиска);

	Если ЗначенияСвойств.Количество() > 0 Тогда

		ПоискЭлементаСвойства = Новый Структура(
			"ТипДиаграммы, ВидОбъекта, Значение",
			ТекущаяДиаграмма.Тип, ЭлементДиаграгаммы.Тип, ЗначенияСвойств[0].Значение);
		ЭлементыСвойства = ТипыОбъектов.НайтиСтроки(ПоискЭлементаСвойства);

		Если ЭлементыСвойства.Количество() > 0 Тогда

			ИмяКартинки = СтрШаблон("Картинка%1", ЭлементыСвойства[0].ИмяЭлемента);
			Если Элементы.Найти(ИмяКартинки) <> Неопределено Тогда

				КартинкаОбъекта = Элементы[ИмяКартинки].Картинка;

			КонецЕсли;

		КонецЕсли;
	
	КонецЕсли;

	Если ЭлементДиаграгаммы.Тип = ДоступныеТипыЭлементов().Объект Тогда

		Если КартинкаОбъекта = Неопределено Тогда

			КартинкиПоУмолчаниюДляОбъектов = КартинкиТиповОбъектовДиаграммПоУмолчанию(Элементы);
			КартинкаОбъекта = КартинкиПоУмолчаниюДляОбъектов.Получить(ТекущаяДиаграмма.Тип);

		КонецЕсли;

		ЭлементДиаграгаммы.КартинкаТипаЭлемента = КартинкаОбъекта;

	ИначеЕсли ЭлементДиаграгаммы.Тип = ДоступныеТипыЭлементов().Связь Тогда

		Если КартинкаОбъекта = Неопределено Тогда

			КартинкаОбъекта = Элементы.КартинкаСвязи.Картинка;

		КонецЕсли;

		ЭлементДиаграгаммы.КартинкаТипаЭлемента = КартинкаОбъекта;

	ИначеЕсли ЭлементДиаграгаммы.Тип = ДоступныеТипыЭлементов().Группа Тогда

		ЭлементДиаграгаммы.КартинкаТипаЭлемента = Элементы.ДобавитьГруппу.Картинка;

	КонецЕсли;

КонецПроцедуры // КартинкаТипаЭлемента()

&НаКлиенте
Процедура ДобавитьСвойстваЭлементуДиаграммыПоУмолчанию(НоваяСтрока, УстанавливатьТипЭлемента = Истина)

	Если НоваяСтрока.Тип = ДоступныеТипыЭлементов().Объект Тогда

		ЗначенияПоУмолчанию = ЗначенияТиповОбъектовПоУмолчанию();

		Для Каждого ЗначениеСвойства Из ЗначенияПоУмолчанию Цикл

			ДобавитьСвойствоОбъектаДиаграммы(
				Объект,
				НоваяСтрока.Наименование,
				"ТипОбъекта",
				ЗначениеСвойства.Значение.Получить("Значение"),
				ТекущаяДиаграмма.Ключ,
				ЗначениеСвойства.Ключ,
				ЗначениеСвойства.Значение.Получить("ПредставлениеЗначения"));

		КонецЦикла;

	ИначеЕсли НоваяСтрока.Тип = ДоступныеТипыЭлементов().Связь Тогда

		ЗначенияПоУмолчанию = ЗначенияТиповСвязейПоУмолчанию();

		Для Каждого ЗначениеСвойства Из ЗначенияПоУмолчанию Цикл

			ДобавитьСвойствоСвязиДиаграммы(
				Объект,
				НоваяСтрока.Ключ,
				"ТипСвязи",
				ЗначениеСвойства.Значение,
				ТекущаяДиаграмма.Ключ,
				ЗначениеСвойства.Ключ);

		КонецЦикла;

	ИначеЕсли НоваяСтрока.Тип = ДоступныеТипыЭлементов().Группа Тогда

		ЗначенияПоУмолчанию = Новый Соответствие();

	КонецЕсли;

	Если УстанавливатьТипЭлемента Тогда

		УстановитьТекущийТипЭлемента(НоваяСтрока, ЗначенияПоУмолчанию);

	КонецЕсли;

КонецПроцедуры // ДобавитьСвойстваЭлементуДиаграммыПоУмолчанию()

&НаКлиентеНаСервереБезКонтекста
Функция ЗначенияТиповОбъектовПоУмолчанию()

	ДоступныеТипыДиаграмм = ДоступныеТипыДиаграмм();

	ЗначенияПоУмолчанию = Новый Соответствие();
	
	ЗначениеДляДиаграммыПоследовательностей = Новый Соответствие();
	ЗначениеДляДиаграммыПоследовательностей.Вставить("Значение", "participant");
	ЗначениеДляДиаграммыПоследовательностей.Вставить("ПредставлениеЗначения", НСтр("ru = 'Участник'"));
	ЗначенияПоУмолчанию.Вставить(
		ДоступныеТипыДиаграмм.ДиаграммаПоследовательностей.Имя,
		ЗначениеДляДиаграммыПоследовательностей);
	
	ЗначениеДляДиаграммыКлассов = Новый Соответствие();
	ЗначениеДляДиаграммыКлассов.Вставить("Значение", "class");
	ЗначениеДляДиаграммыКлассов.Вставить("ПредставлениеЗначения", НСтр("ru = 'Класс'"));	
	ЗначенияПоУмолчанию.Вставить(
		ДоступныеТипыДиаграмм.ДиаграммаКлассов.Имя,
		ЗначениеДляДиаграммыКлассов);
	
	ЗначениеДляДиаграммыДеятельности = Новый Соответствие();
	ЗначениеДляДиаграммыДеятельности.Вставить("Значение", "do");
	ЗначениеДляДиаграммыДеятельности.Вставить("ПредставлениеЗначения", НСтр("ru = 'Действие'"));	
	ЗначенияПоУмолчанию.Вставить(
		ДоступныеТипыДиаграмм.ДиаграммаДеятельности.Имя,
		ЗначениеДляДиаграммыДеятельности);
	Возврат ЗначенияПоУмолчанию;

КонецФункции // ЗначенияТиповОбъектовПоУмолчанию()

&НаКлиенте
Функция ЗначенияТиповСвязейПоУмолчанию()

	ЗначенияПоУмолчанию = Новый Соответствие();
	ЗначенияПоУмолчанию.Вставить(ДоступныеТипыДиаграмм().ДиаграммаКлассов.Имя, "Связь");
	Возврат ЗначенияПоУмолчанию;

КонецФункции // ЗначенияТиповОбъектовПоУмолчанию()

&НаКлиенте
Процедура УстановитьТекущийТипЭлемента(СтрокаЭлемента, ЗначенияТиповПоУмолчанию)

	ПоискЭлементаСвойства = Новый Структура(
		"ТипДиаграммы, ВидОбъекта, Значение",
		ТекущаяДиаграмма.Тип, СтрокаЭлемента.Тип, ЗначенияТиповПоУмолчанию.Получить(ТекущаяДиаграмма.Тип));
	ЭлементыСвойства = ТипыОбъектов.НайтиСтроки(ПоискЭлементаСвойства);

	Если ЭлементыСвойства.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	ЭлементСвойства = ЭлементыСвойства[0];
	Элементы[ЭлементСвойства.ИмяЭлемента].Пометка = Истина;
	Элементы[ИмяКомандыТипаЭлементаВКонтекстногоМеню(ЭлементСвойства.ИмяЭлемента)].Пометка = Истина;
	ИмяТекущегоТипаОбъекта = ЭлементСвойства.ИмяЭлемента;
	СтрокаЭлемента.КартинкаТипаЭлемента = Элементы[ЭлементСвойства.ИмяЭлемента].Картинка;
	ПодключитьОбработчикОжидания("УстановитьДоступностьВыбораТипаЭлемента", 0.1, Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСвойствоОбъектаДиаграммы(
		Объект,
		ИмяОбъекта,
		Свойство,
		Значение,
		Диаграмма,
		ТипДиаграммы,
		ПредставлениеЗначения = Неопределено)

	ТипОбъектаДиагараммыПоследовательсти = Объект.СвойстваОбъектов.Добавить();
	ТипОбъектаДиагараммыПоследовательсти.Объект = ИмяОбъекта;
	ТипОбъектаДиагараммыПоследовательсти.Свойство = Свойство;
	ТипОбъектаДиагараммыПоследовательсти.Значение = Значение;
	ТипОбъектаДиагараммыПоследовательсти.Диаграмма = Диаграмма;
	ТипОбъектаДиагараммыПоследовательсти.ТипДиаграммы = ТипДиаграммы;

	Если ПредставлениеЗначения = Неопределено Тогда

		ТипОбъектаДиагараммыПоследовательсти.ПредставлениеЗначения = Значение;

	Иначе

		ТипОбъектаДиагараммыПоследовательсти.ПредставлениеЗначения = ПредставлениеЗначения;

	КонецЕсли;

КонецПроцедуры // ДобавитьСвойствоОбъектаДиаграммы()

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСвойствоСвязиДиаграммы(
		Объект,
		Ключ,
		Свойство,
		Значение,
		Диаграмма,
		ТипДиаграммы,
		ПредставлениеЗначения = Неопределено)

	ТипОбъектаДиагараммыПоследовательсти = Объект.СвойстваСвязей.Добавить();
	ТипОбъектаДиагараммыПоследовательсти.Ключ = Ключ;
	ТипОбъектаДиагараммыПоследовательсти.Свойство = Свойство;
	ТипОбъектаДиагараммыПоследовательсти.Значение = Значение;
	ТипОбъектаДиагараммыПоследовательсти.Диаграмма = Диаграмма;
	ТипОбъектаДиагараммыПоследовательсти.ТипДиаграммы = ТипДиаграммы;

	Если ПредставлениеЗначения = Неопределено Тогда

		ТипОбъектаДиагараммыПоследовательсти.ПредставлениеЗначения = Значение;

	Иначе

		ТипОбъектаДиагараммыПоследовательсти.ПредставлениеЗначения = ПредставлениеЗначения;

	КонецЕсли;

КонецПроцедуры // ДобавитьСвойствоОбъектаДиаграммы()

#КонецОбласти

#Область РаботаСДиаграммой

&НаКлиенте
Процедура ДобавитьДиаграмму()

	НоваяДиаграмма = Объект.Диаграммы.Добавить();
	НоваяДиаграмма.Тип = ДоступныеТипыДиаграмм().ДиаграммаКлассов.Имя;
	НоваяДиаграмма.Ключ = Новый УникальныйИдентификатор();

КонецПроцедуры // ДобавитьДиаграмму()

&НаКлиенте
Процедура Подключаемый_СменитьТипДиаграммы(Команда)

	СтрокаДиаграммы = Объект.Диаграммы[0];
	СтрокаДиаграммы.Тип = ДоступныеТипыДиаграмм()[Команда.Имя].Имя;

	ОбновитьДанныеТекущейДиаграммы(СтрокаДиаграммы);
	Подключаемый_СформироватьТипыЭлементовСтроки();

КонецПроцедуры // Подключаемый_СменитьТипДиаграммы()

#КонецОбласти

#Область ТипыОбъектов

&НаСервере
Процедура ИнициализироватьСвойстваТипаЭлементов()

	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	ТипыОбъектовДиаграмм = Новый Соответствие();

	ПолучитьТипыОбъектаДиаграммыКласса(ОбъектОбработки, ТипыОбъектовДиаграмм);
	ПолучитьТипыОбъектаДиаграммыДеятельности(ОбъектОбработки, ТипыОбъектовДиаграмм);
	ПолучитьТипыОбъектаДиаграммыПоследовательностей(ОбъектОбработки, ТипыОбъектовДиаграмм);

	Для Каждого ТекущийТипДиаграммы Из ТипыОбъектовДиаграмм Цикл

		Для Каждого ТекущийТипОбъекта Из ТекущийТипДиаграммы.Значение Цикл

			ДобавитьСтрокуТипаОбъекта(
				ТекущийТипДиаграммы.Ключ,
				ИмяРеквизитаТипаОбъекта(ТекущийТипОбъекта.Значение, ТекущийТипОбъекта.Представление, ТекущийТипДиаграммы.Ключ),
				ДоступныеТипыЭлементов().Объект,
				ТекущийТипОбъекта.Значение,
				ТекущийТипОбъекта.Представление);

		КонецЦикла;

	КонецЦикла;

	ТипыСвязейДиаграмм = Новый Соответствие();
	ПолучитьТипыСвязейДиаграммыКласса(ОбъектОбработки, ТипыСвязейДиаграмм);

	Для Каждого ТекущийТипДиаграммы Из ТипыСвязейДиаграмм Цикл

		Для Каждого ТекущийТипСвязи Из ТекущийТипДиаграммы.Значение Цикл

			ДобавитьСтрокуТипаОбъекта(
				ТекущийТипДиаграммы.Ключ,
				ИмяРеквизитаТипаОбъекта(ТекущийТипСвязи.Значение, ТекущийТипСвязи.Представление, ТекущийТипДиаграммы.Ключ),
				ДоступныеТипыЭлементов().Связь,
				ТекущийТипСвязи.Значение,
				ТекущийТипСвязи.Представление);

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // ИнициализироватьСвойстваТипаЭлементов()

&НаСервере
Функция ИмяРеквизитаТипаОбъекта(Знач ИсходноеИмяРеквизита, Знач ДополнительноеОписание, ТипДиаграммыUML)

	ЗапрещенныеСимволы = ЗапрещенныеСимволыВИмениРеквизита();
	ИмяРеквизита = ИсходноеИмяРеквизита;

	Для Каждого ЗапрещенныйСимвол Из ЗапрещенныеСимволы Цикл

		ИмяРеквизита = СтрЗаменить(ИмяРеквизита, ЗапрещенныйСимвол, "");

	КонецЦикла;

	Если ПустаяСтрока(ИмяРеквизита) Тогда

		ИмяРеквизита = ДополнительноеОписание;

		Для Каждого ЗапрещенныйСимвол Из ЗапрещенныеСимволы Цикл

			ИмяРеквизита = СтрЗаменить(ИмяРеквизита, ЗапрещенныйСимвол, "");

		КонецЦикла;

	КонецЕсли;

	ИмяРеквизита = СтрШаблон("ТипОбъекта%1", ИмяРеквизита);

	Если Команды.Найти(ИмяРеквизита) <> Неопределено Тогда

		ИмяРеквизита = СтрШаблон("%1%2", ИмяРеквизита, ТипДиаграммыUML);

	КонецЕсли;

	Возврат ИмяРеквизита;

КонецФункции // ИмяРеквизитаТипаОбъекта()

&НаСервере
Функция ЗапрещенныеСимволыВИмениРеквизита()

	ЗапрещенныеСимволы = Новый Массив();
	ЗапрещенныеСимволы.Добавить(" ");
	ЗапрещенныеСимволы.Добавить("\");
	ЗапрещенныеСимволы.Добавить("/");
	ЗапрещенныеСимволы.Добавить(":");
	ЗапрещенныеСимволы.Добавить("*");
	ЗапрещенныеСимволы.Добавить("?");
	ЗапрещенныеСимволы.Добавить("""");
	ЗапрещенныеСимволы.Добавить("<");
	ЗапрещенныеСимволы.Добавить(">");
	ЗапрещенныеСимволы.Добавить("|");
	ЗапрещенныеСимволы.Добавить("+");
	ЗапрещенныеСимволы.Добавить("(");
	ЗапрещенныеСимволы.Добавить(")");

	Возврат ЗапрещенныеСимволы;

КонецФункции // ЗапрещенныеСимволыВИмениРеквизита()

&НаСервере
Процедура ПолучитьТипыОбъектаДиаграммыДеятельности(ОбъектОбработки, ТипыОбъектовДиаграмм)

	ИмяДиаграммы = ДоступныеТипыДиаграмм().ДиаграммаДеятельности.Имя;
	СписокОбъектов = ОбъектОбработки.ФормыПредставленияДляДиаграммыДеятельности();

	ТипыОбъектовДиаграмм.Вставить(ИмяДиаграммы, СписокОбъектов);

КонецПроцедуры // ФормаПредставленияОбъекта()

&НаСервере
Процедура ПолучитьТипыОбъектаДиаграммыКласса(ОбъектОбработки, ТипыОбъектовДиаграмм)

	ИмяДиаграммы = ДоступныеТипыДиаграмм().ДиаграммаКлассов.Имя;
	СписокОбъектов = ОбъектОбработки.ФормаПредставленияОбъектаКласса();

	ТипыОбъектовДиаграмм.Вставить(ИмяДиаграммы, СписокОбъектов);

КонецПроцедуры // ПолучитьТипыОбъектаДиаграммыКласса()

&НаСервере
Процедура ПолучитьТипыОбъектаДиаграммыПоследовательностей(ОбъектОбработки, ТипыОбъектовДиаграмм)

	ИмяДиаграммаПоследовательностей = ДоступныеТипыДиаграмм().ДиаграммаПоследовательностей.Имя;
	СписокОбъектов = ОбъектОбработки.ФормаПредставленияОбъекта();

	ТипыОбъектовДиаграмм.Вставить(ИмяДиаграммаПоследовательностей, СписокОбъектов);

КонецПроцедуры

&НаСервере
Процедура ПолучитьТипыСвязейДиаграммыКласса(ОбъектОбработки, ТипысвязейДиаграмм)

	ИмяДиаграммы = ДоступныеТипыДиаграмм().ДиаграммаКлассов.Имя;
	СписокТиповСвязей = ОбъектОбработки.ТипыСвязейКлассов();

	ТипысвязейДиаграмм.Вставить(ИмяДиаграммы, СписокТиповСвязей);

КонецПроцедуры // ПолучитьТипыСвязейДиаграммыКласса()

&НаСервере
Процедура ДобавитьСтрокуТипаОбъекта(
		ТипДиаграммы, ИмяЭлемента, ВидОбъекта, ЗначениеСвойства, ПредставлениеТипаОбъекта)

	НоваяКоманда = Команды.Добавить(ИмяЭлемента);
	НоваяКоманда.Заголовок = ПредставлениеТипаОбъекта;
	НоваяКоманда.Действие = "Подключаемый_ВыбратьТипОбъекта";
	НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;

	ЭлементКомандыПанели = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Элементы.ГруппаТипыОбъектов);
	ЭлементКомандыПанели.ИмяКоманды = ИмяЭлемента;
	ЭлементКомандыПанели.Видимость = Ложь;

	ЭлементКоманды = Элементы.Добавить(
		ИмяКомандыТипаЭлементаВКонтекстногоМеню(ИмяЭлемента),
		Тип("КнопкаФормы"),
		Элементы.РедакторДиаграммыКонтекстноеМенюГруппаТипыОбъектовДиаграммы);
	ЭлементКоманды.ИмяКоманды = ИмяЭлемента;
	ЭлементКоманды.Видимость = Ложь;

	ИмяКартинки = СтрШаблон("Картинка%1", ИмяЭлемента);
	Если Элементы.Найти(ИмяКартинки) <> Неопределено Тогда

		ЭлементКомандыПанели.Картинка = Элементы[ИмяКартинки].Картинка;
		ЭлементКоманды.Картинка = Элементы[ИмяКартинки].Картинка;

	КонецЕсли;

	НоваяСтрока = ТипыОбъектов.Добавить();
	НоваяСтрока.ВидОбъекта = ВидОбъекта;
	НоваяСтрока.Значение = ЗначениеСвойства;
	НоваяСтрока.ИмяЭлемента = ИмяЭлемента;
	НоваяСтрока.ТипДиаграммы = ТипДиаграммы;
	НоваяСтрока.ПредставлениеЗначения = ПредставлениеТипаОбъекта;

КонецПроцедуры // ДобавитьСтрокуТипаОбъекта()

&НаКлиенте
Процедура Подключаемый_ВыбратьТипОбъекта(ИмяКоманды)

	Элементы[ИмяКоманды.Имя].Пометка = Истина;
	Элементы[ИмяКомандыТипаЭлементаВКонтекстногоМеню(ИмяКоманды.Имя)].Пометка = Истина;

	Если Не ПустаяСтрока(ИмяТекущегоТипаОбъекта) Тогда

		Если ИмяКоманды.Имя = ИмяТекущегоТипаОбъекта Тогда

			Возврат;

		КонецЕсли;

		Элементы[ИмяТекущегоТипаОбъекта].Пометка = Ложь;
		Элементы[ИмяКомандыТипаЭлементаВКонтекстногоМеню(ИмяТекущегоТипаОбъекта)].Пометка = Ложь;

	КонецЕсли;

	ИмяТекущегоТипаОбъекта = ИмяКоманды.Имя;
	ТекущиеДанные = Элементы.РедакторДиаграммы.ТекущиеДанные;
	ПараметрыПоиска = КлючевыеСвойстваТиповЭлементов(ТекущиеДанные, ТекущаяДиаграмма);
	ЗначенияСвойств = Объект[ПараметрыПоиска.ИмяНабораСвойств].НайтиСтроки(ПараметрыПоиска.ПоляПоиска);
	ЗначениеТипаОбъекта = ТипыОбъектов.НайтиСтроки(Новый Структура("ИмяЭлемента", ИмяКоманды.Имя))[0];

	Если ЗначенияСвойств.Количество() > 0 Тогда

		ЗначенияСвойств[0].Значение = ЗначениеТипаОбъекта.Значение;
		ЗначенияСвойств[0].ПредставлениеЗначения = ЗначениеТипаОбъекта.ПредставлениеЗначения;

	Иначе

		НоваяСтрока = Объект[ПараметрыПоиска.ИмяНабораСвойств].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыПоиска.ПоляПоиска);
		НоваяСтрока.Значение = ЗначениеТипаОбъекта.Значение;
		НоваяСтрока.ПредставлениеЗначения = ЗначениеТипаОбъекта.ПредставлениеЗначения;

	КонецЕсли;

	ТекущиеДанные.КартинкаТипаЭлемента = Элементы[ИмяКоманды.Имя].Картинка;
	СформироватьПредставлениеЭлемента(ТекущиеДанные, Объект, ТекущаяДиаграмма);

	Если ТекущиеДанные.Тип = ДоступныеТипыЭлементов().Объект Тогда

		ДополнитьСвязямиОбъект(ТекущиеДанные, ЗначениеТипаОбъекта.Значение);

	КонецЕсли;

	УстановитьВидимостьЭлементаДиаграммы(ТекущиеДанные, ЗначениеТипаОбъекта);

	ВывестиРезультатДиаграммы();

КонецПроцедуры // Подключаемый_ВыбратьТипОбъекта()

&НаКлиенте
Процедура Подключаемый_СформироватьТипыЭлементовСтроки()

	ТекущиеДанные = Элементы.РедакторДиаграммы.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено
		ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Тип) Тогда

		Возврат;

	КонецЕсли;

	ИмяТекущегоТипаОбъекта = "";
	ТипЭлементаДиаграммы = ТекущиеДанные.Тип;
	ТекущееЗначениеТипаЭлемента = "";

	ПараметрыПоиска = КлючевыеСвойстваТиповЭлементов(ТекущиеДанные, ТекущаяДиаграмма);

	ЗначенияСвойств = Объект[ПараметрыПоиска.ИмяНабораСвойств].НайтиСтроки(ПараметрыПоиска.ПоляПоиска);

	Если ЗначенияСвойств.Количество() > 0 Тогда

		ТекущееЗначениеТипаЭлемента = ЗначенияСвойств[0].Значение;

	КонецЕсли;

	Для Каждого ТекущийТипЭлемента Из ТипыОбъектов Цикл

		ВыводитьКнопку = ТекущийТипЭлемента.ТипДиаграммы = ТекущаяДиаграмма.Тип
			И ТекущийТипЭлемента.ВидОбъекта = ТипЭлементаДиаграммы;
		Элементы[ТекущийТипЭлемента.ИмяЭлемента].Видимость = ВыводитьКнопку;
		Элементы[ИмяКомандыТипаЭлементаВКонтекстногоМеню(ТекущийТипЭлемента.ИмяЭлемента)].Видимость = ВыводитьКнопку;

		Если Не ПустаяСтрока(ТекущееЗначениеТипаЭлемента)
			И ТекущийТипЭлемента.Значение = ТекущееЗначениеТипаЭлемента Тогда

			Элементы[ТекущийТипЭлемента.ИмяЭлемента].Пометка = Истина;
			Элементы[ИмяКомандыТипаЭлементаВКонтекстногоМеню(ТекущийТипЭлемента.ИмяЭлемента)].Пометка = Истина;
			ИмяТекущегоТипаОбъекта = ТекущийТипЭлемента.ИмяЭлемента;
			ТекущиеДанные.КартинкаТипаЭлемента = Элементы[ТекущийТипЭлемента.ИмяЭлемента].Картинка;

		Иначе

			Элементы[ТекущийТипЭлемента.ИмяЭлемента].Пометка = Ложь;
			Элементы[ИмяКомандыТипаЭлементаВКонтекстногоМеню(ТекущийТипЭлемента.ИмяЭлемента)].Пометка = Ложь;

		КонецЕсли;

	КонецЦикла;

	УстановитьДоступностьВыбораТипаЭлемента();

КонецПроцедуры // Подключаемый_СформироватьТипыЭлементовСтроки()

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКомандыТипаЭлементаВКонтекстногоМеню(ИмяКоманды)

	Возврат СтрШаблон("РедакторДиаграммыКонтекстноеМенюГруппаТипыОбъектовДиаграммы%1", ИмяКоманды);

КонецФункции // ИмяКомандыТипаЭлементаВКонтекстногоМеню()

&НаКлиенте
Процедура УстановитьДоступностьВыбораТипаЭлемента()

	ЗаполненоИмяТекущегоОбъекта = Не ПустаяСтрока(ИмяТекущегоТипаОбъекта);
	Элементы.ГруппаТипыОбъектов.Доступность = ЗаполненоИмяТекущегоОбъекта;
	Элементы.РедакторДиаграммыКонтекстноеМенюГруппаТипыОбъектовДиаграммы.Доступность = ЗаполненоИмяТекущегоОбъекта;
	Элементы.НеДоступно.Видимость = Не ЗаполненоИмяТекущегоОбъекта;
	Элементы.КонтестноеМенюНеДоступно.Видимость = Не ЗаполненоИмяТекущегоОбъекта;

КонецПроцедуры // УстановитьДоступностьвыбораТипаЭлемента()

&НаКлиентеНаСервереБезКонтекста
Функция КлючевыеСвойстваТиповЭлементов(СтрокаЭлемента, ТекущаяДиаграмма)

	ТипЭлементаДиаграммы = СтрокаЭлемента.Тип;

	Результат = Новый Структура();
	Результат.Вставить("ПоляПоиска", Новый Структура());
	Результат.Вставить("ИмяНабораСвойств", "");

	Если ТипЭлементаДиаграммы = ДоступныеТипыЭлементов().Объект Тогда

		Результат.ПоляПоиска.Вставить("Свойство", "ТипОбъекта");
		Результат.ПоляПоиска.Вставить("Объект", СтрокаЭлемента.Наименование);
		Результат.ИмяНабораСвойств = "СвойстваОбъектов";

	ИначеЕсли ТипЭлементаДиаграммы = ДоступныеТипыЭлементов().Связь Тогда

		Результат.ПоляПоиска.Вставить("Свойство", "ТипСвязи");
		Результат.ПоляПоиска.Вставить("Ключ", СтрокаЭлемента.Ключ);
		Результат.ИмяНабораСвойств = "СвойстваСвязей";

	ИначеЕсли ТипЭлементаДиаграммы = ДоступныеТипыЭлементов().Группа Тогда

		Результат.ПоляПоиска.Вставить("Свойство", "ТипГруппы");
		Результат.ПоляПоиска.Вставить("Объект", СтрокаЭлемента.Наименование);
		Результат.ИмяНабораСвойств = "СвойстваГрупп";

	КонецЕсли;

	Результат.ПоляПоиска.Вставить("Диаграмма", ТекущаяДиаграмма.Ключ);
	Результат.ПоляПоиска.Вставить("ТипДиаграммы", ТекущаяДиаграмма.Тип);

	Возврат Результат;

КонецФункции // КлючевыеСвойстваТиповЭлементов()

&НаКлиенте
Процедура УбратьВидимостьТиповОбъектов()

	Для Каждого ТекущийТипЭлемента Из ТипыОбъектов Цикл

		Элементы[ТекущийТипЭлемента.ИмяЭлемента].Видимость = Ложь;
		Элементы[ТекущийТипЭлемента.ИмяЭлемента].Пометка = Ложь;

	КонецЦикла;

	ИмяТекущегоТипаОбъекта = "";
	УстановитьДоступностьВыбораТипаЭлемента();

КонецПроцедуры // УбратьВидимостьТиповОбъектов()

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ЗавершениеРедактированияОбщихНастроек(
		ВыбранныеНастройки,
		ДополнительныеПараметры = Неопределено) Экспорт

	Если ВыбранныеНастройки = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Если ВыбранныеНастройки.Свойство("АдресСервераРендеринга") Тогда

		АдресСервераРендеринга = ВыбранныеНастройки.АдресСервераРендеринга;

	КонецЕсли;

	ДополнительныеПараметрыНастроек = Неопределено;
	Если ВыбранныеНастройки.Свойство(
		"ДополнительныеПараметры",
		ДополнительныеПараметрыНастроек) <> Неопределено Тогда

		Если ДополнительныеПараметрыНастроек <> Неопределено
			И ДополнительныеПараметрыНастроек.Свойство("ВывестиВерсиюСервера") Тогда

			СформироватьВерсиюАдресаСервераНаСервере();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // Подключаемый_ЗавершениеРедактированияОбщихНастроек()

&НаСервере
Процедура СформироватьВерсиюАдресаСервераНаСервере()

	РезультатТекстPlantUML = ТекстPlantUMLВерсииСервиса();
	РезультатКартинка = СформироватьИзображениеСтороннимСервисом(РезультатТекстPlantUML);

КонецПроцедуры // СформироватьНаСервере()

&НаСервере
Функция ТекстPlantUMLВерсииСервиса()

	Возврат "@startuml
		|version
		|@enduml";

КонецФункции // ТекстPlantUMLВерсииСервиса()

&НаКлиенте
Процедура ЗавершениеВыбораКаталогаСохраненияДиаграммы(ВыбранныеФайлы, ДополнительныеПараметры = Неопределено) Экспорт

	Если ВыбранныеФайлы = Неопределено Тогда

		Возврат;

	КонецЕсли;

	КартинкаДиаграммы = ПолучитьИзВременногоХранилища(АдресКартинкиВоВременномХранилище);

	Если Не ЗначениеЗаполнено(КартинкаДиаграммы) Тогда

		Возврат;

	КонецЕсли;

	КартинкаДиаграммы.Записать(ВыбранныеФайлы[0]);

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Сохранение диаграммы'"),,
		СтрШаблон(НСтр("ru = 'Диаграмма сохранена в %1'"), ВыбранныеФайлы[0]));

КонецПроцедуры // ЗавершениеВыбораКаталогаСохраненияДиаграммы()

&НаКлиенте
Процедура УстановитьТекущийТипДиаграммы()

	Для Каждого ТекущийТипДиаграммы Из ТипыДиаграмм Цикл

		Элементы[ТекущийТипДиаграммы.Ключ].Пометка = ТекущаяДиаграмма.Тип = ТекущийТипДиаграммы.Ключ;

	КонецЦикла;

КонецПроцедуры // УстановитьТекущийТипДиаграммы()

&НаКлиенте
Процедура ВывестиПараметрыДиаграммы()

	Заголовок = СтрШаблон(
		"PlantUML: %1",
		?(ПустаяСтрока(ТекущаяДиаграмма.Имя), НСтр("ru = 'Новая диаграмма'"), ТекущаяДиаграмма.Имя));
	Элементы.ПодменюТипДиаграммы.Заголовок = ТипыДиаграмм[ТекущаяДиаграмма.Тип].Представление;
	ИмяКартинкиТипаДиаграммы = СтрШаблон("Картинка%1", ТекущаяДиаграмма.Тип);
	Если Элементы.Найти(ИмяКартинкиТипаДиаграммы) <> Неопределено Тогда

		Элементы.ПодменюТипДиаграммы.Картинка = Элементы[ИмяКартинкиТипаДиаграммы].Картинка;

	КонецЕсли;

КонецПроцедуры // ВывестиПараметрыДиаграммы()

&НаКлиенте
Процедура СозданиеДиаграммыПоУмолчанию()

	ДобавитьДиаграмму();
	ОбновитьДанныеТекущейДиаграммы(Объект.Диаграммы[0], Ложь);
	УстановитьДоступностьВыбораТипаЭлемента();
	ВывестиПараметрыДиаграммы();

КонецПроцедуры // СоздатьДиаграммыПоУмолчанию()

&НаКлиенте
Процедура СоздатьДиаграмму()

	ОчиститьНастройкиДиаграмм();
	СозданиеДиаграммыПоУмолчанию();
	РедакторДиаграммы.ПолучитьЭлементы().Очистить();
	СформироватьНаСервере();

КонецПроцедуры // СоздатьДиаграмму()

&НаКлиенте
Процедура ОчиститьНастройкиДиаграмм()

	Объект.СвойстваГрупп.Очистить();
	Объект.Диаграммы.Очистить();
	Объект.ОписаниеСвязейДиаграмм.Очистить();
	Объект.СвойстваДиаграмм.Очистить();
	Объект.СвойстваОбъектов.Очистить();
	Объект.СвойстваСвязей.Очистить();

КонецПроцедуры // ОчиститьНастройкиДиаграммы()

&НаКлиенте
Процедура ЗавершитьСозданиеДиаграммы(Ответ, ДополнительныеПараметры = Неопределено) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда

		СоздатьДиаграмму();

	КонецЕсли;

КонецПроцедуры // ЗавершитьСозданиеДиаграммы()

&НаКлиенте
Процедура ПродолжитьСохранениеНастройкиДиаграммыВФайл(
		ПараметрыСохранения,
		ДополнительныеПараметры = Неопределено) Экспорт

	АдресФайла = ПолучитьАдресФайлаНастроек();
	ЗаголовокВыбора = НСтр("ru = 'Выберите каталог для сохранения настройки диаграмм'");
	ИмяФайла = СтрШаблон("%1.rpu", ИмяФайлаДиаграммы());
	ПараметрыДиалога = Новый ПараметрыДиалогаПолученияФайлов(ЗаголовокВыбора, Истина);
	НачатьПолучениеФайлаССервера(АдресФайла, ИмяФайла, ПараметрыДиалога);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСохранениеНастройкиВФайл(ПараметрыСохранения)

	ИмяФайла = ИмяФайлаДиаграммы();

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.ПолноеИмяФайла = СтрШаблон("%1.rpu", ИмяФайла);
	ДиалогВыбораФайла.Фильтр = "(*.rpu)|*.rpu";
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите каталог для сохранения настройки диаграмм'");

	ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения(
		"ЗавершениеВыбораКаталогаСохранения",
		ЭтотОбъект,
		ПараметрыСохранения);

	ДиалогВыбораФайла.Показать(ОбработчикОповещенияОЗакрытии);

КонецПроцедуры // ПродолжитьСохранениеНастройкиВФайл()

&НаКлиенте
Процедура ДополнитьСвязямиОбъект(СтрокаОбъекта, ТипОбъекта)

	Если СтрокаОбъекта.ПолучитьЭлементы().Количество() = 0 Тогда

		Если ТипОбъекта = "if" Тогда

			НоваяСвязь = СтрокаОбъекта.ПолучитьЭлементы().Добавить();
			НоваяСвязь.Наименование = НСтр("ru = 'Да'");
			НоваяСвязь.Ключ = Новый УникальныйИдентификатор();
			НоваяСвязь.Тип = ДоступныеТипыЭлементов().Связь;
			УстановитьКартинкуТипаЭлемента(Объект, Элементы, НоваяСвязь, ТекущаяДиаграмма, ТипыОбъектов);
			СформироватьПредставлениеЭлемента(НоваяСвязь, Объект, ТекущаяДиаграмма);

			НоваяСвязь = СтрокаОбъекта.ПолучитьЭлементы().Добавить();
			НоваяСвязь.Наименование = НСтр("ru = 'Нет'");
			НоваяСвязь.Ключ = Новый УникальныйИдентификатор();
			НоваяСвязь.Тип = ДоступныеТипыЭлементов().Связь;
			УстановитьКартинкуТипаЭлемента(Объект, Элементы, НоваяСвязь, ТекущаяДиаграмма, ТипыОбъектов);
			СформироватьПредставлениеЭлемента(НоваяСвязь, Объект, ТекущаяДиаграмма);

		ИначеЕсли ТипОбъекта = "while"
			ИЛИ ТипОбъекта = "switch" Тогда

			НоваяСвязь = СтрокаОбъекта.ПолучитьЭлементы().Добавить();
			НоваяСвязь.Ключ = Новый УникальныйИдентификатор();
			НоваяСвязь.Тип = ДоступныеТипыЭлементов().Связь;
			УстановитьКартинкуТипаЭлемента(Объект, Элементы, НоваяСвязь, ТекущаяДиаграмма, ТипыОбъектов);
			СформироватьПредставлениеЭлемента(НоваяСвязь, Объект, ТекущаяДиаграмма);

		КонецЕсли;

		Элементы.РедакторДиаграммы.Развернуть(СтрокаОбъекта.ПолучитьИдентификатор())

	КонецЕсли;

КонецПроцедуры // ДополнитьСвязямиОбъект()

&НаКлиенте
Процедура ЗавершениеВыбораПолейОбъекта(РезультатВыбораПолей, ДополнительныеПараметры) Экспорт

	Если РезультатВыбораПолей = Неопределено Тогда

		Возврат;

	КонецЕсли;

	СтрокаОбъекта = РедакторДиаграммы.НайтиПоИдентификатору(ДополнительныеПараметры.ТекущаяСтрока);
	ПоляОбъекта = Новый Массив();

	Для Каждого ТекущееПоле Из СтрокаОбъекта.ПолучитьЭлементы() Цикл

		Если Не ПустаяСтрока(ТекущееПоле.Наименование) Тогда

			ПоляОбъекта.Добавить(ТекущееПоле.Наименование);

		КонецЕсли;

	КонецЦикла;

	ДоступныеСсылкиОбъектов = Новый Соответствие();
	ПолучитьСсылкиОбъектов(ДоступныеСсылкиОбъектов, РедакторДиаграммы.ПолучитьЭлементы());
	ЭтоПеречисление = СтрНачинаетсяС(СтрокаОбъекта.ПутьКМетаданным, "Перечисления.");

	Для Каждого ВыбранноеПоле Из РезультатВыбораПолей Цикл

		Если ПоляОбъекта.Найти(ВыбранноеПоле.Ключ) <> Неопределено Тогда

			Продолжить;

		КонецЕсли;

		Если ЭтоПеречисление Тогда

			НоваяСвязь = НоваяСвязьПоляОбъекта(СтрокаОбъекта, ВыбранноеПоле.Ключ);
			УстановитьВидимостьЭлементаДиаграммы(НоваяСвязь);

		ИначеЕсли Не ЗначениеЗаполнено(ВыбранноеПоле.Значение) Тогда

			ИмяТабличнойЧастиОбъекта = ИмяТабличнойЧастиОбъекта(СтрокаОбъекта, ВыбранноеПоле.Ключ);
			Если НайденОбъектПоНаименованию(ИмяТабличнойЧастиОбъекта) Тогда

				Продолжить;

			КонецЕсли;

			НовыйОбъект = РедакторДиаграммы.ПолучитьЭлементы().Добавить();
			НовыйОбъект.Наименование = ИмяТабличнойЧастиОбъекта;
			НовыйОбъект.Ключ = Новый УникальныйИдентификатор();
			НовыйОбъект.ПутьКМетаданным =
				СтрШаблон("%1.ТабличныеЧасти.%2", СтрокаОбъекта.ПутьКМетаданным, ВыбранноеПоле.Ключ);
			НовыйОбъект.Тип = ДоступныеТипыЭлементов().Объект;
			ДобавитьСвойстваЭлементуДиаграммыПоУмолчанию(НовыйОбъект);
			УстановитьСвойстваТабличнойЧастиОбъекта(Объект, НовыйОбъект.Наименование, ТекущаяДиаграмма.Ключ);
			УстановитьКартинкуТипаЭлемента(Объект, Элементы, НовыйОбъект, ТекущаяДиаграмма, ТипыОбъектов);
			СформироватьПредставлениеЭлемента(НовыйОбъект, Объект, ТекущаяДиаграмма);

			// Добавим связь с основным объектом
			НоваяСвязь = НоваяСвязьПоляОбъекта(НовыйОбъект, НСтр("ru = 'Ссылка'"));
			НоваяСвязь.ПриемникСвязи = СтрокаОбъекта.Наименование;
			Элементы.РедакторДиаграммы.Развернуть(НовыйОбъект.ПолучитьИдентификатор());

		Иначе

			НоваяСвязь = НоваяСвязьПоляОбъекта(СтрокаОбъекта, ВыбранноеПоле.Ключ);
			НайтиПриемникДляСвязи(НоваяСвязь, ВыбранноеПоле.Значение, ДоступныеСсылкиОбъектов);
			УстановитьВидимостьЭлементаДиаграммы(НоваяСвязь);
			СформироватьПредставлениеЭлемента(НоваяСвязь, Объект, ТекущаяДиаграмма);

		КонецЕсли;

	КонецЦикла;

	Элементы.РедакторДиаграммы.Развернуть(СтрокаОбъекта.ПолучитьИдентификатор());

	ВывестиРезультатДиаграммы();

КонецПроцедуры // ЗавершениеВыбораПолейОбъекта()

&НаКлиентеНаСервереБезКонтекста
Функция ИмяТабличнойЧастиОбъекта(СтрокаОбъекта, ИмяТабличнойЧасти)

	//@skip-check bsl-legacy-check-dynamic-feature-access
	Возврат СтрШаблон("%1.%2", СтрокаОбъекта.Наименование, ИмяТабличнойЧасти);

КонецФункции // ИмяТабличнойЧастиОбъекта()

&НаКлиенте
Функция НайденОбъектПоНаименованию(ИмяЭлементаДиаграммы)

	Для Каждого СтрокаДиаграммы Из РедакторДиаграммы.ПолучитьЭлементы() Цикл

		Если СтрокаДиаграммы.Наименование = ИмяЭлементаДиаграммы Тогда

			Возврат Истина;

		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции // НайденОбъектПоНаименованию()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваТабличнойЧастиОбъекта(Объект, ТабличнаяЧастьОбъекта, Диаграмма)

	ДобавитьСвойствоОбъектаДиаграммы(
		Объект,
		ТабличнаяЧастьОбъекта, 
		"Дженерик",
		НСтр("ru = 'ТабличнаяЧасть'"),
		Диаграмма,
		ДоступныеТипыДиаграмм().ДиаграммаКлассов.Имя);

КонецПроцедуры // УстановитьСвойстваТабличнойЧастиОбъекта()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваСвязиОбъектаПоУмолчанию(Объект, Связь, Диаграмма)

	ДоступныеТипыДиаграмм = ДоступныеТипыДиаграмм();

	ДобавитьСвойствоСвязиДиаграммы(
		Объект,
		Связь,
		"ТипСвязи",
		"Поле",
		Диаграмма,
		ДоступныеТипыДиаграмм.ДиаграммаКлассов.Имя);

	ДобавитьСвойствоСвязиДиаграммы(
		Объект,
		Связь,
		"НаконечникПриемника",
		">",
		Диаграмма,
		ДоступныеТипыДиаграмм.ДиаграммаКлассов.Имя,
		НСтр("ru = 'Заостренный наконечник'"));

КонецПроцедуры // УстановитьСвойстваСвязиОбъектаПоУмолчанию()

&НаКлиенте
Функция НоваяСвязьПоляОбъекта(ОбъектСвязи, ИмяСвязи)

	НоваяСвязь = ОбъектСвязи.ПолучитьЭлементы().Добавить();
	НоваяСвязь.Ключ = Новый УникальныйИдентификатор();
	НоваяСвязь.Наименование = ИмяСвязи;
	НоваяСвязь.Тип = ДоступныеТипыЭлементов().Связь;
	УстановитьСвойстваСвязиОбъектаПоУмолчанию(Объект, НоваяСвязь.Ключ, ТекущаяДиаграмма.Ключ);
	УстановитьКартинкуТипаЭлемента(Объект, Элементы, НоваяСвязь, ТекущаяДиаграмма, ТипыОбъектов);
	СформироватьПредставлениеЭлемента(НоваяСвязь, Объект, ТекущаяДиаграмма);

	Возврат НоваяСвязь;

КонецФункции // НоваяСвязьПоляОбъекта()

&НаКлиенте
Процедура ПолучитьСсылкиОбъектов(СсылкиНаобъекты, СписокЭлементовДиаграммы)

	Для Каждого ТекущаяСтрока Из СписокЭлементовДиаграммы Цикл

		Если ТекущаяСтрока.Тип = ДоступныеТипыЭлементов().Объект
			И Не ПустаяСтрока(ТекущаяСтрока.ПутьКМетаданным)
			И СтрНайти(ТекущаяСтрока.ПутьКМетаданным, "ТабличныеЧасти") = 0 Тогда

			ЧастиПутиКМетаданным = СтрРазделить(ТекущаяСтрока.ПутьКМетаданным, ".");
			ВидОбъекта = ТипОбъектаПоГруппе(ЧастиПутиКМетаданным[0]);

			Если Не ПустаяСтрока(ВидОбъекта) Тогда

				ТипОбъекта = СтрШаблон("%1.%2", ВидОбъекта, ЧастиПутиКМетаданным[1]);
				СсылкиНаобъекты.Вставить(Тип(ТипОбъекта), ТекущаяСтрока.Наименование);

			КонецЕсли;

		КонецЕсли;

		ПолучитьСсылкиОбъектов(СсылкиНаобъекты, ТекущаяСтрока.ПолучитьЭлементы());

	КонецЦикла;

КонецПроцедуры // ПолучитьСсылкиОбъектов()

&НаКлиенте
Процедура НайтиПриемникДляСвязи(СвязьОбъекта, ТипРеквизита, ДоступныеОбъекты)

	Для Каждого ТекущийТипОбъекта Из ДоступныеОбъекты Цикл

		Если ТипРеквизита.СодержитТип(ТекущийТипОбъекта.Ключ) Тогда

			Если ПустаяСтрока(СвязьОбъекта.ПриемникСвязи) Тогда

				СвязьОбъекта.ПриемникСвязи = ТекущийТипОбъекта.Значение;

			Иначе

				НоваяСвязь = СвязьОбъекта.ПолучитьРодителя().Добавить;
				ЗаполнитьЗначенияСвойств(НоваяСвязь, СвязьОбъекта);
				НоваяСвязь.Ключ = Новый УникальныйИдентификатор();
				НоваяСвязь.ПриемникСвязи = ТекущийТипОбъекта.Значение;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроЦедуры // НайтиПриемникДляСвязи()

&НаСервере
Функция МеткаДляОбъектаМетаданных(ПутьМетаданыхОбъекта)

	ИмяВидаОбъекта = "";
	ЧастиМетаданных = СтрРазделить(ПутьМетаданыхОбъекта, ".");

	Если ЧастиМетаданных.Количество() = ДлинаПутиМетаданныхТабличнойЧасти() Тогда

		ИмяВидаОбъекта = "ТабличныеЧасти";

	ИначеЕсли ЧастиМетаданных.Количество() > 0 Тогда

		ИмяВидаОбъекта = ЧастиМетаданных[0];

	КонецЕсли;

	МеткиОбъектовМетаданных = МеткиОбъектовМетаданных();

	Возврат МеткиОбъектовМетаданных.Получить(ИмяВидаОбъекта);

КонецФункции

&НаСервере
Функция МеткиОбъектовМетаданных()

	СписокМеток = Новый Соответствие();
	СписокМеток.Вставить("Справочники", "С, brown");
	СписокМеток.Вставить("Документы", "Д, lightblue");
	СписокМеток.Вставить("РегистрыСведений", "Р, lightgreen");
	СписокМеток.Вставить("РегистрыНакопления", "P, yellow");
	СписокМеток.Вставить("Перечисления", "П, white");
	СписокМеток.Вставить("ПланыВидовХарактеристик", "П, lightpink");
	СписокМеток.Вставить("ПланыСчетов", "П, purple");
	СписокМеток.Вставить("ПланыВидовРасчета", "П, orange");
	СписокМеток.Вставить("РегистрыБухгалтерии", "Р, silver");
	СписокМеток.Вставить("РегистрыРасчета", "Р, olive");
	СписокМеток.Вставить("ТабличныеЧасти", "Т, turquoise");

	Возврат СписокМеток;

КонецФункции // МеткиОбъектовМетаданных()

&НаКлиентеНаСервереБезКонтекста
Функция ДлинаПутиМетаданныхТабличнойЧасти()

	Возврат 4;

КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьЭлементаДиаграммы(СтрокаДиаграммы, ТипЭлемента = Неопределено)

	Если ТипЭлемента = Неопределено Тогда

		ПараметрыПоиска = КлючевыеСвойстваТиповЭлементов(СтрокаДиаграммы, ТекущаяДиаграмма);
		ЗначенияСвойств = Объект[ПараметрыПоиска.ИмяНабораСвойств].НайтиСтроки(ПараметрыПоиска.ПоляПоиска);

		Если ЗначенияСвойств.Количество() = 0 Тогда

			СтрокаДиаграммы.ВыводитьЭлемент = Ложь;
			Возврат;

		КонецЕсли;

		ТипЭлемента = ЗначенияСвойств[0].Значение;

	КонецЕсли;

	Если Не УсловиеВыводаЭлемента.Свойство(ТекущаяДиаграмма.Тип) Тогда

		СтрокаДиаграммы.ВыводитьЭлемент = Ложь;
		Возврат;

	КонецЕсли;

	УсловиеПроверкиЭлемента = УсловиеВыводаЭлемента[ТекущаяДиаграмма.Тип].Получить(СтрокаДиаграммы.Тип);

	Если УсловиеПроверкиЭлемента = Неопределено Тогда

		СтрокаДиаграммы.ВыводитьЭлемент = Ложь;
		Возврат;

	КонецЕсли;

	СтрокаДиаграммы.ВыводитьЭлемент = УсловиеПроверкиЭлемента.Найти(ТипЭлемента) <> Неопределено;

КонецПроцедуры // УстановитьВидимостьЭлементаДиаграммы()

&НаСервере
Процедура ИнициализацияУсловийВыводаЭлемента()

	ДоступныеТипыДиаграмм = ДоступныеТипыДиаграмм();

	СписокСвязейВывода = Новый Массив();
	СписокСвязейВывода.Добавить("Поле");
	СписокСвязейВывода.Добавить("Метод");

	ЭлементыВывода = Новый Соответствие();
	ЭлементыВывода.Вставить(ДоступныеТипыЭлементов().Связь, СписокСвязейВывода);

	УсловиеВыводаЭлемента = Новый Структура();
	УсловиеВыводаЭлемента.Вставить(ДоступныеТипыДиаграмм.ДиаграммаКлассов.Имя, ЭлементыВывода);

КонецПроцедуры // ИнициализацияУсловийВыводаЭлемента()

&НаКлиенте
Процедура ЗаполнитьДополнительныеПараметрыЭлементовДиаграммы(СтрокиЭлементовДиаграммы)

	Для Каждого СтрокаЭлементаДиаграммы Из СтрокиЭлементовДиаграммы Цикл

		УстановитьВидимостьЭлементаДиаграммы(СтрокаЭлементаДиаграммы);
		УстановитьКартинкуТипаЭлемента(Объект, Элементы, СтрокаЭлементаДиаграммы, ТекущаяДиаграмма, ТипыОбъектов);
		СформироватьПредставлениеЭлемента(СтрокаЭлементаДиаграммы, Объект, ТекущаяДиаграмма);
		ЗаполнитьДополнительныеПараметрыЭлементовДиаграммы(СтрокаЭлементаДиаграммы.ПолучитьЭлементы());

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДополнительныеПараметрыЭлементовДиаграммы()

&НаКлиенте
Процедура УстановитьКартинкуДляДобавленияОбъекта()

	КартинкиПоУмолчаниюДляОбъектов = КартинкиТиповОбъектовДобавленияДиаграммПоУмолчанию(Элементы);

	КартинкаПоУмолчанию = КартинкиПоУмолчаниюДляОбъектов.Получить(ТекущаяДиаграмма.Тип);
	Элементы.ДобавитьОбъект.Картинка = КартинкаПоУмолчанию;
	Элементы.РедакторДиаграммыКонтекстноеМенюДобавитьОбъект.Картинка = КартинкаПоУмолчанию;

КонецПроцедуры // УстановитьКартинкуДляДобавленияОбъекта()

&НаКлиентеНаСервереБезКонтекста
Функция КартинкиТиповОбъектовДиаграммПоУмолчанию(Элементы)

	ДоступныеТипыДиаграмм = ДоступныеТипыДиаграмм();

	КартинкиВыводаТипаОбъекта = Новый Соответствие();
	КартинкиВыводаТипаОбъекта.Вставить(
		ДоступныеТипыДиаграмм.ДиаграммаПоследовательностей.Имя,
		Элементы.КартинкаТипОбъектаparticipant.Картинка);
	КартинкиВыводаТипаОбъекта.Вставить(
		ДоступныеТипыДиаграмм.ДиаграммаКлассов.Имя,
		Элементы.КартинкаТипОбъектаclass.Картинка);
	КартинкиВыводаТипаОбъекта.Вставить(
		ДоступныеТипыДиаграмм.ДиаграммаДеятельности.Имя,
		Элементы.КартинкаТипОбъектаdo.Картинка);

	Возврат КартинкиВыводаТипаОбъекта;

КонецФункции // КартинкиТиповОбъектовДиаграммПоУмолчанию()

&НаКлиентеНаСервереБезКонтекста
Функция КартинкиТиповОбъектовДобавленияДиаграммПоУмолчанию(Элементы)

	ДоступныеТипыДиаграмм = ДоступныеТипыДиаграмм();

	КартинкиВыводаТипаОбъекта = Новый Соответствие();
	КартинкиВыводаТипаОбъекта.Вставить(
		ДоступныеТипыДиаграмм.ДиаграммаПоследовательностей.Имя,
		Элементы.КартинкаДобавитьОбъектДиаграммыПоследовательностей.Картинка);
	КартинкиВыводаТипаОбъекта.Вставить(
		ДоступныеТипыДиаграмм.ДиаграммаКлассов.Имя,
		Элементы.КартинкаДобавитьОбъектДиаграммыКлассов.Картинка);
	КартинкиВыводаТипаОбъекта.Вставить(
		ДоступныеТипыДиаграмм.ДиаграммаДеятельности.Имя,
		Элементы.КартинкаДобавитьОбъектДиаграммыДеятельности.Картинка);

	Возврат КартинкиВыводаТипаОбъекта;

КонецФункции // КартинкиТиповОбъектовДобавленияДиаграммПоУмолчанию()

&НаКлиенте
Процедура ПеренестиЭлементДиаграммы(Знач Строка, ЭлементПереноса, СтрокаРодитель, Знач КореньЭлементовДиаграммы)

	СтрокаЭлемента = РедакторДиаграммы.НайтиПоИдентификатору(ЭлементПереноса);
	Если СтрокаЭлемента.Тип = ДоступныеТипыЭлементов().Объект
		И Строка <> Неопределено
		И СтрокаРодитель.Тип = ДоступныеТипыЭлементов().Объект Тогда

		Если КореньЭлементовДиаграммы Тогда

			НоваяСтрока = РедакторДиаграммы.ПолучитьЭлементы().Добавить();

		Иначе

			НоваяСтрока = СтрокаРодитель.ПолучитьРодителя().ПолучитьЭлементы().Добавить();

		КонецЕсли;

	Иначе

		НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();

	КонецЕсли;

	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭлемента);

	Для Каждого ПодчиненныйЭлемент Из СтрокаЭлемента.ПолучитьЭлементы() Цикл

		ПодчиненныйЭлементСтроки = НоваяСтрока.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(ПодчиненныйЭлементСтроки, ПодчиненныйЭлемент);
		СформироватьПредставлениеЭлемента(ПодчиненныйЭлементСтроки, Объект, ТекущаяДиаграмма);

	КонецЦикла;

	Если СтрокаЭлемента.ПолучитьРодителя() = Неопределено Тогда

		РедакторДиаграммы.ПолучитьЭлементы().Удалить(СтрокаЭлемента);

	Иначе

		СтрокаЭлемента.ПолучитьРодителя().ПолучитьЭлементы().Удалить(СтрокаЭлемента);

	КонецЕсли;

	Элементы.РедакторДиаграммы.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);

КонецПроцедуры // ПеренестиЭлементДиаграммы()

&НаКлиенте
Процедура Подключаемый_ОбработкаЗакрытияФормы(РезультатОтвета, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатОтвета = КодВозвратаДиалога.Да Тогда

		Модифицированность = Ложь;
		Закрыть();

	КонецЕсли;

КонецПроцедуры // Подключаемый_ОбработкаЗакрытияФормы()

&НаСервере
Процедура ВывестиСвязиОбъектаНаСервере()

	ЭлементыДиаграммы = РеквизитФормыВЗначение("РедакторДиаграммы");

	УсловиеПоискаОбъекта = Новый Структура();
	УсловиеПоискаОбъекта.Вставить("Тип", ДоступныеТипыЭлементов().Объект);

	ТекущиеОбъектыКонфигурации = ВыбранныеОбъектыКонфигурации(
		ЭлементыДиаграммы.Строки.НайтиСтроки(УсловиеПоискаОбъекта, Истина));

	ТекущийОбъект = РедакторДиаграммы.НайтиПоИдентификатору(Элементы.РедакторДиаграммы.ТекущаяСтрока);
	УсловиеПоискаОбъекта.Вставить("Наименование", ТекущийОбъект.Наименование);
	ТекущийОбъектРедактора = ЭлементыДиаграммы.Строки.НайтиСтроки(УсловиеПоискаОбъекта, Истина)[0];

	Если ПустаяСтрока(ТекущийОбъект.ПутьКМетаданным) Тогда

		Возврат;

	КонецЕсли;

	ЧастиИмениМетданных = СтрРазделить(ТекущийОбъект.ПутьКМетаданным, ".");

	Если ЧастиИмениМетданных.Количество() = ДлинаПутиМетаданныхТабличнойЧасти() Тогда

		НайтиСвязанныеРеквизитыПоТабличнойЧастиОбъекта(
			ТекущиеОбъектыКонфигурации,
			ТекущийОбъектРедактора,
			ЧастиИмениМетданных);

	Иначе

		ДобавитьСвязиОбъекта(
			ЭлементыДиаграммы,
			ТекущийОбъектРедактора,
			ЧастиИмениМетданных[0],
			ЧастиИмениМетданных[1],
			ТекущиеОбъектыКонфигурации);

	КонецЕсли;

	ЗначениеВДанныеФормы(ЭлементыДиаграммы, РедакторДиаграммы);

	СформироватьНаСервере();

КонецПроцедуры // ВывестиСвязиОбъектаНаСервере()

&НаСервере
Процедура НайтиСвязанныеРеквизитыПоТабличнойЧастиОбъекта(
		ТекущиеОбъектыКонфигурации,
		ТекущийОбъект,
		Знач ЧастиИмениМетданных)

	СвязанныеОбъекты = Новый Соответствие();
	РеквизитыТабличнойЧасти =
		Метаданные[ЧастиИмениМетданных[0]][ЧастиИмениМетданных[1]].ТабличныеЧасти[ЧастиИмениМетданных[3]].Реквизиты;

	Для Каждого ТекРеквизит Из РеквизитыТабличнойЧасти Цикл

		НайтиСвязиОбъектов(ТекРеквизит, ТекущиеОбъектыКонфигурации, СвязанныеОбъекты);

	КонецЦикла;

	ДополнитьСвязиПоОбъекту(ТекущийОбъект, СвязанныеОбъекты);

КонецПроцедуры // НайтиСвязанныеРеквизитыПоТабличнойЧастиОбъекта()

&НаКлиенте
Функция РеквизитыОбъектаМетаданных(СтрокаОбъекта)

	Результат = Новый СписокЗначений();
	Для Каждого СтрокаРеквизита Из СтрокаОбъекта.ПолучитьЭлементы() Цикл

		Результат.Добавить(СтрокаРеквизита.Наименование);

	КонецЦикла;

	ДополнитьВыбранныеРеквизитыОбъектаТабличнымиЧастями(СтрокаОбъекта, Результат, РедакторДиаграммы.ПолучитьЭлементы());

	Возврат Результат;

КонецФункции // РеквизитыОбъектаМетаданных()

&НаКлиенте
Процедура ДополнитьВыбранныеРеквизитыОбъектаТабличнымиЧастями(СтрокаОбъекта, ВыбранныеТабличныеЧасти, ГруппаПоиска)

	Для Каждого ТекущаяСтрока Из ГруппаПоиска Цикл

		Если ТекущаяСтрока = СтрокаОбъекта Тогда

			Продолжить;

		КонецЕсли;

		Если ТекущаяСтрока.Тип = ДоступныеТипыЭлементов().Группа Тогда

			ДополнитьВыбранныеРеквизитыОбъектаТабличнымиЧастями(
				СтрокаОбъекта,
				ВыбранныеТабличныеЧасти,
				ТекущаяСтрока.ПолучитьЭлементы());

			Продолжить;

		КонецЕсли;

		Если СтрНачинаетсяС(ТекущаяСтрока.ПутьКМетаданным, СтрокаОбъекта.ПутьКМетаданным) Тогда

			ИменаРеквизита = СтрРазделить(ТекущаяСтрока.Наименование, ".");

			Если ИменаРеквизита.Количество() > 1 Тогда

				ИмяРеквизита = ИменаРеквизита[1];

			Иначе

				ИмяРеквизита = ТекущаяСтрока.Наименование;

			КонецЕсли;

			ВыбранныеТабличныеЧасти.Добавить(ИмяРеквизита);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ДополнитьВыбранныеРеквизитыОбъектаТабличнымиЧастями()

&НаКлиенте
Процедура ВывестиВопросОбИзмененииНастройки(ОбработчикОповещения)

	ПоказатьВопрос(
		ОбработчикОповещения,
		НСтр("ru = 'Имеются несохраненные настройки диаграммы. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет, ,
		КодВозвратаДиалога.Да, , );

КонецПроцедуры // ВывестиВопросОбИзмененииНастройки()

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеЭлемента(ЭлементДиаграммы, Объект, ТекущаяДиаграмма)

	ПараметрыПоиска = КлючевыеСвойстваТиповЭлементов(ЭлементДиаграммы, ТекущаяДиаграмма);
	ПараметрыПоиска.ПоляПоиска.Удалить("Свойство");
	ЗначенияСвойств = Объект[ПараметрыПоиска.ИмяНабораСвойств].НайтиСтроки(ПараметрыПоиска.ПоляПоиска);

	ИсключаемыеСвойстваИзПредствления = ИсключаемыеСвойстваДляВывода();

	ТекущиеСвойства = Новый Массив();
	Для Каждого СтрокаСвойств Из ЗначенияСвойств Цикл

		Если ИсключаемыеСвойстваИзПредствления.Найти(СтрокаСвойств.Свойство) <> Неопределено Тогда

			Продолжить;

		КонецЕсли;

		ТекущиеСвойства.Добавить(СтрокаСвойств.ПредставлениеЗначения); 

	КонецЦикла;

	СтрокаСвойств = "";
	Если ТекущиеСвойства.Количество() > 0 Тогда

		СтрокаСвойств = СтрШаблон("<<%1>>", СтрСоединить(ТекущиеСвойства, ", "));

	КонецЕсли;

	Если ЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Связь Тогда

		ЧастиПредставления = Новый Массив();
		ЧастиПредставления.Добавить(ЭлементДиаграммы.Наименование);
		ЧастиПредставления.Добавить("-->");
		ЧастиПредставления.Добавить(ЭлементДиаграммы.ПриемникСвязи);
		ЧастиПредставления.Добавить(СтрокаСвойств);
		ПредставлениеЭлемента = СтрСоединить(ЧастиПредставления, " ");

	Иначе

		ПредставлениеЭлемента = СтрШаблон("%1 %2", ЭлементДиаграммы.Наименование, СтрокаСвойств); 

	КонецЕсли;

	ЭлементДиаграммы.ПредставлениеЭлемента = ПредставлениеЭлемента;

КонецПроцедуры // СформироватьПредставлениеЭлемента()

&НаКлиентеНаСервереБезКонтекста
Функция ИсключаемыеСвойстваДляВывода()

	ИсключаемыеСвойства = Новый Массив();
	ИсключаемыеСвойства.Добавить("ТипСвязи");

	Возврат ИсключаемыеСвойства;

КонецФункции // ИсключаемыеСвойстваДляВывода()

&НаКлиенте
Функция ПолучитьНазваниеДиаграммыИзИмениФайла(Знач ИмяФайла)

	ЧастиИменФайла = СтрРазделить(ИмяФайла, "\");
	ИмяФайлаСРасширением = ЧастиИменФайла[ЧастиИменФайла.Количество() - 1];
	ЧастиИмениФайлаСРасширением = СтрРазделить(ИмяФайлаСРасширением, ".");
	ЧастиИмениФайлаСРасширением.Удалить(ЧастиИмениФайлаСРасширением.Количество() - 1);

	Возврат СтрСоединить(ЧастиИмениФайлаСРасширением, ".");

КонецФункции // ПолучитьНазваниеДиаграммыИзИмениФайла()

&НаКлиенте
Функция ИмяФайлаДиаграммы()

	ИмяФайла = ТекущаяДиаграмма.Имя;
	Если ПустаяСтрока(ТекущаяДиаграмма.Имя) Тогда

		Если РедакторДиаграммы.ПолучитьЭлементы().Количество() > 0 Тогда

			ИмяФайла = РедакторДиаграммы.ПолучитьЭлементы()[0].Наименование;

		Иначе

			ИмяФайла = НСтр("ru = 'Новая диаграмма'");

		КонецЕсли;

	КонецЕсли;

	Возврат ИмяФайла;

КонецФункции // ИмяФайлаДиаграммы()

&НаСервере
Функция ПредставлениеЭлементаПоНаименованию(НаименованиеЭлемента)

	Возврат СтрЗаменить(НаименованиеЭлемента, Символ(182), "\n");

КонецФункции // ПредставлениеЭлементаПоНаименованию()

&НаКлиенте
Процедура ОчиститьСвойстваУдаленныхЭлементовДиаграммы()

	УсловиеПоиска = Новый Структура("Диаграмма", ТекущаяДиаграмма.Ключ);
	СписокТекущихСвойствОбъектов = Объект.СвойстваОбъектов.НайтиСтроки(УсловиеПоиска);
	СписокТекущихСвойствГрупп = Объект.СвойстваГрупп.НайтиСтроки(УсловиеПоиска);
	СписокТекущихСвойствСвязей = Объект.СвойстваСвязей.НайтиСтроки(УсловиеПоиска);

	УбратьСвойстваНайденныхЭлементов(
		РедакторДиаграммы.ПолучитьЭлементы(),
		СписокТекущихСвойствОбъектов,
		СписокТекущихСвойствГрупп,
		СписокТекущихСвойствСвязей);

	УдалитьСвойстваУдаленныхЭлементовДиаграммы(Объект.СвойстваОбъектов, СписокТекущихСвойствОбъектов);
	УдалитьСвойстваУдаленныхЭлементовДиаграммы(Объект.СвойстваГрупп, СписокТекущихСвойствГрупп);
	УдалитьСвойстваУдаленныхЭлементовДиаграммы(Объект.СвойстваСвязей, СписокТекущихСвойствСвязей);

КонецПроцедуры // ОчиститьСвойстваУдаленныхЭлементовДиаграммы()

&НаКлиенте
Процедура УбратьСвойстваНайденныхЭлементов(
		ЭлементыДиагараммы,
		СписокСвойствОбъекта,
		СписоксвойствГрупп,
		СписокСвойствСвязей)

	Для Каждого ЭлементДиаграммы Из ЭлементыДиагараммы Цикл

		Если ЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Объект Тогда

			УбратьСвойствоНайденногоЭлемента(ЭлементДиаграммы.Наименование, СписокСвойствОбъекта, "Объект");

		ИначеЕсли ЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Группа Тогда

			УбратьСвойствоНайденногоЭлемента(ЭлементДиаграммы.Наименование, СписоксвойствГрупп, "Объект");

		ИначеЕсли ЭлементДиаграммы.Тип = ДоступныеТипыЭлементов().Связь Тогда

			УбратьСвойствоНайденногоЭлемента(ЭлементДиаграммы.Ключ, СписокСвойствСвязей, "Ключ");

		КонецЕсли;

		УбратьСвойстваНайденныхЭлементов(
			ЭлементДиаграммы.ПолучитьЭлементы(),
			СписокСвойствОбъекта,
			СписоксвойствГрупп,
			СписокСвойствСвязей);

	КонецЦикла;

КонецПроцедуры // УбратьСвойстваНайденныхЭлементов()

&НаКлиенте
Процедура УбратьСвойствоНайденногоЭлемента(ЗначениеПоиска, СписокДляПоиска, ИмяПоляПоиска)

	НайденныеСвойства = Новый Массив();

	Для Индекс = 0 По СписокДляПоиска.Количество() - 1 Цикл

		Если ЗначениеПоиска = СписокДляПоиска[Индекс][ИмяПоляПоиска] Тогда

			НайденныеСвойства.Вставить(0, Индекс);

		КонецЕсли;

	КонецЦикла;

	Для Каждого НайденноеСвойство Из НайденныеСвойства Цикл

		СписокДляПоиска.Удалить(НайденноеСвойство);

	КонецЦикла;

КонецПроцедуры // УбратьСвойствоНайденногоЭлемента()

&НаКлиенте
Процедура УдалитьСвойстваУдаленныхЭлементовДиаграммы(СвойстваЭлементов, СвойстваУдаленныхЭлементов)

	Для Каждого ТекущееСвойство Из СвойстваУдаленныхЭлементов Цикл

		СвойстваЭлементов.Удалить(ТекущееСвойство);

	КонецЦикла;

КонецПроцедуры // УдалитьСвойстваУдаленныхЭлементовДиаграммы()

#КонецОбласти
