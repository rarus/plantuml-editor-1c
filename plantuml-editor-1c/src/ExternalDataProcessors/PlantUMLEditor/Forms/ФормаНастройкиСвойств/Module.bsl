///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ВидСвойств = Параметры.ВидСвойств;
	ТипОбъекта = Параметры.ТипОбъекта;
	ОбъектДиаграммы = Параметры.Объект;
	Диаграмма = Параметры.Диаграмма;
	ИмяТаблицы = Параметры.ИмяТаблицы;
	ЭтоСвойстваДиаграммы = Параметры.ИмяТаблицы = "СвойстваДиаграмм";
	ТипДиаграммы = Параметры.ТипДиаграммы;
	ЭтоНовыйЭлемент = Параметры.ЭтоНовыйЭлемент;
	ПутьКМетаданным = Параметры.ПутьКМетаданным;

	Если ЭтоСвойстваДиаграммы Тогда

		Если ПустаяСтрока(Параметры.НаименованиеДиаграммы) Тогда

			НаименованиеДиаграммы = НСтр("ru = 'Новая диаграмма'");

		Иначе

			НаименованиеДиаграммы = Параметры.НаименованиеДиаграммы;

		КонецЕсли;
		Заголовок = СтрШаблон(НСтр("ru = '%1 (Диаграмма)'"), НаименованиеДиаграммы);
		Наименование = Параметры.НаименованиеДиаграммы;
		ЗаполнитьДоступныеТипыДиаграмм();
		Элементы.Наименование.ПодсказкаВвода = НСтр("ru = 'Введите название диаграммы'");

	Иначе

		Наименование = Параметры.Наименование;

		Если ПустаяСтрока(Параметры.ПредставлениеЭлемента) Тогда

			ПредставлениеЭлемента = Наименование;

		Иначе

			ПредставлениеЭлемента = Параметры.ПредставлениеЭлемента;

		КонецЕсли;

		УстановитьЗаголовокЭлементаДиаграммы();
		Элементы.ТипДиаграммы.Видимость = Ложь;

	КонецЕсли;

	// Получим таблицу свойств.
	ЗаполнитьСвойства(Параметры.ТипДиаграммы);

	Если НаборСвойств.Количество() = 0 Тогда

		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Для данного элемента диаграммы нет доступных свойств.'");
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;

	КонецЕсли;

	СписокСвойствЭлемента = СписокПереданныхСвойствЭлемента(Параметры.Свойства);
	ЗаполнитьЗначенияСвойствОбъекта(СписокСвойствЭлемента, Параметры.ТипДиаграммы);

	Если ИмяТаблицы = "СвойстваСвязей" Тогда

		Источник = Параметры.Источник;
		Приемник = Параметры.Приемник;
		Элементы.Источник.СписокВыбора.ЗагрузитьЗначения(Параметры.СписокОбъектов.ВыгрузитьЗначения());
		Элементы.Приемник.СписокВыбора.ЗагрузитьЗначения(Параметры.СписокОбъектов.ВыгрузитьЗначения());

	Иначе

		Элементы.ГруппаДляСвязи.Видимость = Ложь;

	КонецЕсли;

	ЗаполнитьДополнительныеНастройки();
	УстановитьУсловноеОформление();

КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если Модифицированность Тогда

		Отказ = Истина;
		ОбработчикОповещения = Новый ОписаниеОповещения("Подключаемый_ЗаписьИзменений", ЭтотОбъект);
		ПоказатьВопрос(
			ОбработчикОповещения, 
			НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена,,
			КодВозвратаДиалога.Да);
		Возврат;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипДиагараммыПриИзменении(Элемент)

	ТипДиаграммыПриИзмененииНаСервере();

КонецПроцедуры // ТипДиагараммыПриИзменении()

&НаКлиенте
Процедура НаименованиеОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОбработчикВводаСтроки = Новый ОписаниеОповещения("ЗавершениеВводаНаименования", ЭтотОбъект);
	ПоказатьВводСтроки(
		ОбработчикВводаСтроки,
		СтрЗаменить(Наименование, Символ(182), Символы.ПС), 
		НСтр("ru = 'Укажите наименование'"), ,
		Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНаборСвойств

&НаКлиенте
Процедура НаборСвойствПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	ТекущиеДанные = Элемент.ТекущиеДанные;

	Если Элемент.ТекущийЭлемент.Имя = "НаборСвойствПредставлениеЗначения" Тогда
		Элемент.ТекущийЭлемент.ОграничениеТипа = ТекущиеДанные.ТипЗначения;
		Элемент.ТекущийЭлемент.РежимВыбораИзСписка = ТекущиеДанные.ТолькоДоступныеЗначения;
		Элемент.ТекущийЭлемент.СписокВыбора.Очистить();
		ЭтоТипБулево = ТекущиеДанные.ТипЗначения = Новый ОписаниеТипов("Булево");
		Если Не ЭтоТипБулево Тогда
			Для Каждого ЗначениеВыбора Из ТекущиеДанные.ДоступныеЗначения Цикл
				НоваяСтрока = Элемент.ТекущийЭлемент.СписокВыбора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначениеВыбора);
				НоваяСтрока.Значение = ЗначениеВыбора.Представление;
			КонецЦикла;
		КонецЕсли;
		Элементы.НаборСвойствПредставлениеЗначения.КнопкаВыпадающегоСписка =
			Элемент.ТекущийЭлемент.СписокВыбора.Количество() > 0 ИЛИ ЭтоТипБулево;
	КонецЕсли;

КонецПроцедуры // НаборСвойствПриНачалеРедактирования()

&НаКлиенте
Процедура НаборСвойствПредставлениеЗначенияОбработкаВыбора(
		Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)

	Модифицированность = Истина;
	ТекущиеДанные = Элементы.НаборСвойств.ТекущиеДанные;
	Если Элемент.СписокВыбора.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		НайденноеЗначение = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
		Если НайденноеЗначение <> Неопределено Тогда
			ТекущиеДанные.ПредставлениеЗначения = НайденноеЗначение.Представление;
		Иначе
			ТекущиеДанные.ПредставлениеЗначения = ВыбранноеЗначение;
		КонецЕсли;
		ТекущиеДанные.Значение = ВыбранноеЗначениеСвойства(ВыбранноеЗначение, ТекущиеДанные.ДоступныеЗначения);
		ЗначениеИзменено = Истина;
	КонецЕсли;

КонецПроцедуры // НаборСвойствПриНачалеРедактирования()

&НаКлиенте
Процедура НаборСвойствПредставлениеЗначенияПриИзменении(Элемент)

	Модифицированность = Истина;

	ТекущиеДанные = Элементы.НаборСвойств.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда

		Если ТекущиеДанные.ТипЗначения = Новый ОписаниеТипов("Число") Тогда
			ТекущиеДанные.Значение = Формат(ТекущиеДанные.ПредставлениеЗначения, "ЧГ=");
		ИначеЕсли ТекущиеДанные.ТипЗначения = Новый ОписаниеТипов("Булево")
			И ТекущиеДанные.ДоступныеЗначения.Количество() > 0 Тогда
			Для Каждого ДоступноеЗначение Из ТекущиеДанные.ДоступныеЗначения Цикл
				Если (ТекущиеДанные.ПредставлениеЗначения И ДоступноеЗначение.Представление = НСтр("ru = 'Да'")) 
					ИЛИ (Не ТекущиеДанные.ПредставлениеЗначения
						И ДоступноеЗначение.Представление = НСтр("ru = 'Нет'")) Тогда
					ТекущиеДанные.Значение = ДоступноеЗначение.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;;
		ИначеЕсли Не ЗначениеИзменено Тогда
			ТекущиеДанные.Значение = ТекущиеДанные.ПредставлениеЗначения;
		КонецЕсли;

	КонецЕсли;

	ЗначениеИзменено = Ложь;

КонецПроцедуры // НаборСвойствПриНачалеРедактирования()

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Применить(Команда)

	ЗавершитьЗаписьСвойств();

КонецПроцедуры // Применить()

&НаКлиенте
Процедура Изменить(Команда)

	ИсточникСвязи = Источник;
	Источник = Приемник;
	Приемник = ИсточникСвязи;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСвойства(ТекущийТипДиаграммы)

	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	НаборСвойств.Загрузить(
		ОбъектОбработки.СвойстваПоДиаграмме(ТекущийТипДиаграммы, ВидСвойств)[ВидСвойств]);

	Если Не ЗначениеЗаполнено(ТипОбъекта) Тогда

		Возврат;

	КонецЕсли;

	НеИспользуемыСвойства = Новый Массив();
	Для Каждого СтрокаСвойста Из НаборСвойств Цикл

		Если Не ПустаяСтрока(СтрокаСвойста.ОграничениеИспользования)
			И Не СтрНайти(СтрокаСвойста.ОграничениеИспользования, ТипОбъекта) Тогда

			НеИспользуемыСвойства.Добавить(СтрокаСвойста);

		КонецЕсли;

	КонецЦикла;

	Для Каждого СтрокаУдаленияСвойства Из НеИспользуемыСвойства Цикл

		НаборСвойств.Удалить(СтрокаУдаленияСвойства);

	КонецЦикла; 

КонецПроцедуры // ЗаполнитьСвойства()

&НаСервере
Процедура ЗаполнитьЗначенияСвойствОбъекта(ЗначенияСвойств, ТекущийТипДиаграммы, ТолькоТипДиаграммы = Ложь)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОтборСвойств = ОбработкаОбъект.ОтборСвойствПоТаблице(
		ИмяТаблицы,
		ОбъектДиаграммы,
		Диаграмма,
		ТекущийТипДиаграммы);
	ОтборСвойств.Вставить("Свойство");
	Если ТолькоТипДиаграммы Тогда

		ОтборСвойств.Удалить("Диаграмма");

	КонецЕсли;
	Для Каждого СтрокаСвойства Из НаборСвойств Цикл
		ОтборСвойств.Свойство = СтрокаСвойства.Свойство;
		НайденныеСтроки = ЗначенияСвойств.НайтиСтроки(ОтборСвойств);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаСвойства.Значение = НайденныеСтроки[0].Значение;
			Если СтрокаСвойства.ДоступныеЗначения.Количество() > 0 Тогда
				НайденноеЗначение = СтрокаСвойства.ДоступныеЗначения.НайтиПоЗначению(СтрокаСвойства.Значение);
				Если НайденноеЗначение = Неопределено Тогда
					СтрокаСвойства.ПредставлениеЗначения = СтрокаСвойства.Значение;
				ИначеЕсли СтрокаСвойства.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
					СтрокаСвойства.ПредставлениеЗначения = НайденноеЗначение.Представление = НСтр("ru = 'Да'");
				ИначеЕсли СтрокаСвойства.ТипЗначения = Новый ОписаниеТипов("Число") Тогда
					СтрокаСвойства.ПредставлениеЗначения = Число(СтрокаСвойства.Значение);
				Иначе
					СтрокаСвойства.ПредставлениеЗначения = НайденноеЗначение.Представление;
				КонецЕсли;
			Иначе
				Если СтрокаСвойства.ТипЗначения = Новый ОписаниеТипов("Число") Тогда
					Если Не ЗначениеЗаполнено(СтрокаСвойства.Значение) Тогда
						СтрокаСвойства.ПредставлениеЗначения = 0;
					Иначе
						СтрокаСвойства.ПредставлениеЗначения = Число(СтрокаСвойства.Значение);
					КонецЕсли;
				Иначе
					СтрокаСвойства.ПредставлениеЗначения = СтрокаСвойства.Значение;
				КонецЕсли;
			КонецЕсли;
			ЗначенияСвойств.Удалить(НайденныеСтроки[0]);
		Иначе
			Если СтрокаСвойства.ТипЗначения = Новый ОписаниеТипов("Число") Тогда
				СтрокаСвойства.ПредставлениеЗначения = 0;
			ИначеЕсли СтрокаСвойства.ТипЗначения = Новый ОписаниеТипов("Строка") Тогда
				ПустоеЗначение = СтрокаСвойства.ДоступныеЗначения.НайтиПоЗначению("");
				Если ПустоеЗначение <> Неопределено Тогда
					СтрокаСвойства.ПредставлениеЗначения = ПустоеЗначение.Представление;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ДополнитьДополнительнымиСвойствами();

	ТипыДиаграмм = ОбработкаОбъект.ДоступныеТипыДиаграмм();
	СвойстваОбъектов = НаборСвойств.Выгрузить();
	СвойстваОбъектов.Очистить();

	Для Каждого ДоступныйТипДиаграммы Из ТипыДиаграмм Цикл

		Если ДоступныйТипДиаграммы.Ключ = ТекущийТипДиаграммы Тогда

			Продолжить;

		КонецЕсли;

		СвойстваОбъектаДиаграммы = 
			ОбработкаОбъект.СвойстваПоДиаграмме(ДоступныйТипДиаграммы.Ключ, ВидСвойств)[ВидСвойств];

		Для Каждого СтрокаСвойства Из СвойстваОбъектаДиаграммы Цикл

			ЗаполнитьЗначенияСвойств(СвойстваОбъектов.Добавить(), СтрокаСвойства);

			Если НаборСвойств.НайтиСтроки(Новый Структура("Свойство", СтрокаСвойства.Свойство)).Количество() > 0 Тогда
	
				СтрокаСвойств = ОдинаковыеСвойства.Добавить();
				СтрокаСвойств.Свойство = СтрокаСвойства.Свойство;
				СтрокаСвойств.ТипДиаграммы = СтрокаСвойства.ТипДиаграммы;
				Продолжить;
	
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	ОтборСвойствОбъекта = Новый Структура("ТипДиаграммы,Свойство");
	ОтборСвойств.Удалить("Свойство");
	ОтборСвойств.Удалить("ТипДиаграммы");
	
	Если ОтборСвойств.Количество() = 0 Тогда

		НайденныеСвойстваОбъекта = ЗначенияСвойств;

	Иначе

		НайденныеСвойстваОбъекта = ЗначенияСвойств.НайтиСтроки(ОтборСвойств);

	КонецЕсли;

	ОбщиеСвойства = ОбщиеСвойства();

	Для Каждого СвойстваОбъекта Из НайденныеСвойстваОбъекта Цикл

		Если Не ЗначениеЗаполнено(СвойстваОбъекта.Значение)
			ИЛИ ОбщиеСвойства.Найти(СвойстваОбъекта.Свойство) <> Неопределено Тогда

			Продолжить;

		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ОтборСвойствОбъекта, СвойстваОбъекта);
		НайденныеСтроки = СвойстваОбъектов.НайтиСтроки(ОтборСвойствОбъекта);
		Если НайденныеСтроки.Количество() = 0 Тогда

			Продолжить;

		КонецЕсли;

		НоваяСтрока = НаборСвойств.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0]);
		НоваяСтрока.ТолькоПросмотр = Истина;

		НоваяСтрока.Значение = СвойстваОбъекта.Значение;
		Если НоваяСтрока.ДоступныеЗначения.Количество() > 0 Тогда
			НайденноеЗначение = НоваяСтрока.ДоступныеЗначения.НайтиПоЗначению(НоваяСтрока.Значение);
			Если НайденноеЗначение = Неопределено Тогда
				НоваяСтрока.ПредставлениеЗначения = НоваяСтрока.Значение;
			ИначеЕсли НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
				НоваяСтрока.ПредставлениеЗначения = НайденноеЗначение.Представление = НСтр("ru = 'Да'");
			ИначеЕсли НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("Число") Тогда
				НоваяСтрока.ПредставлениеЗначения = Число(НоваяСтрока.Значение);
			Иначе
				НоваяСтрока.ПредставлениеЗначения = НайденноеЗначение.Представление;
			КонецЕсли;
		Иначе
			Если НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("Число") Тогда
					НоваяСтрока.ПредставлениеЗначения = Число(НоваяСтрока.Значение);
			Иначе
				НоваяСтрока.ПредставлениеЗначения = НоваяСтрока.Значение;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьЗначенияСвойств()

&НаСервереБезКонтекста
Функция ОбщиеСвойства()

	СписокОбщихСвойств = Новый Массив();
	СписокОбщихСвойств.Добавить("ЦветФона");
	СписокОбщихСвойств.Добавить("ЦветСтрелки");

	Возврат СписокОбщихСвойств;

КонецФункции

&НаСервере
Функция РезультатРедактированияСвойств()

	ИсключаемыеСвойства = НеКопироватьЗначенияСвойств();

	// Дополним одинаковыми свойствами
	Для Каждого ТекущееСвойство Из ОдинаковыеСвойства Цикл

		Если ИсключаемыеСвойства.Найти(ТекущееСвойство.Свойство) <> Неопределено Тогда

			Продолжить;

		КонецЕсли;

		УсловиеПоиска = Новый Структура("Свойство, ТипДиаграммы", ТекущееСвойство.Свойство, ТипДиаграммы);
		НайденныеСтроки = НаборСвойств.НайтиСтроки(УсловиеПоиска);

		Если НайденныеСтроки.Количество() > 0 Тогда

			УсловиеПоиска.ТипДиаграммы = ТекущееСвойство.ТипДиаграммы;
			НайденныеСвойстваТекущие = НаборСвойств.НайтиСтроки(УсловиеПоиска);

			Если НайденныеСвойстваТекущие.Количество() = 0 Тогда

				НоваяСтрока = НаборСвойств.Добавить();

			Иначе

				НоваяСтрока = НайденныеСвойстваТекущие[0];

			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0]);
			НоваяСтрока.ТипДиаграммы = ТекущееСвойство.ТипДиаграммы;

		КонецЕсли;

	КонецЦикла;

	РезультатРедактированияСвойств = Новый Структура();
	Если ЭтоСвойстваДиаграммы Тогда

		ТекущийЗаголовокДиаграммы = Наименование;
		РезультатРедактированияСвойств.Вставить("ТипДиаграммы", ТипДиаграммы);
		РезультатРедактированияСвойств.Вставить("НаименованиеДиаграммы", Наименование);

	ИначеЕсли ИмяТаблицы = "СвойстваСвязей" Тогда

		РезультатРедактированияСвойств.Вставить("СвойстваСвязи");
		РезультатРедактированияСвойств.Вставить("Источник", Источник);
		РезультатРедактированияСвойств.Вставить("Приемник", Приемник);
		РезультатРедактированияСвойств.Вставить("Наименование", Наименование);

	ИначеЕсли ИмяТаблицы = "СвойстваОбъектов" Тогда

		РезультатРедактированияСвойств.Вставить("СвойстваОбъекта");
		РезультатРедактированияСвойств.Вставить("Наименование", Наименование);
		СвойствоПутиМетаданных = НаборСвойств.НайтиСтроки(Новый Структура("Свойство", "ПутьКМетаданным"));
		РезультатРедактированияСвойств.Вставить("ПутьКМетаданным", СвойствоПутиМетаданных[0].Значение);
		НаборСвойств.Удалить(СвойствоПутиМетаданных[0]);

	ИначеЕсли ИмяТаблицы = "СвойстваГрупп" Тогда

		РезультатРедактированияСвойств.Вставить("СвойстваГруппы");
		РезультатРедактированияСвойств.Вставить("Наименование", Наименование);

	КонецЕсли;

	РезультатРедактированияСвойств.Вставить("НаборСвойств", НаборСвойств.Выгрузить());

	Возврат ПоместитьВоВременноеХранилище(РезультатРедактированияСвойств);

КонецФункции

&НаСервере
Функция НеКопироватьЗначенияСвойств()

	СписокСвойств = Новый Массив();
	СписокСвойств.Добавить("ТипОбъекта");
	СписокСвойств.Добавить("ТипГруппы");

	Возврат СписокСвойств;

КонецФункции // НеКопироватьЗначенияСвойств()

&НаСервере
Процедура УстановитьУсловноеОформление()

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НаборСвойств");

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборСвойств.ТолькоПросмотр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСерый);

КонецПроцедуры // УстановитьУсловноеОформление()

&НаСервере
Процедура ЗаполнитьДоступныеТипыДиаграмм()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТипыДиаграмм = ОбработкаОбъект.ДоступныеТипыДиаграмм();

	СписокВыбораДиаграмм = Элементы.ТипДиаграммы.СписокВыбора;
	СписокВыбораДиаграмм.Очистить();
	Для Каждого ТипДостунойДиаграммы Из ТипыДиаграмм Цикл

		ИмяКартинкиТипаДиаграммы = СтрШаблон("Картинка%1", ТипДостунойДиаграммы.Ключ);

		Если Элементы.Найти(ИмяКартинкиТипаДиаграммы) = Неопределено Тогда

			СписокВыбораДиаграмм.Добавить(
				ТипДостунойДиаграммы.Значение.Имя,
				ТипДостунойДиаграммы.Значение.Представление);

		Иначе

			СписокВыбораДиаграмм.Добавить(
				ТипДостунойДиаграммы.Значение.Имя,
				ТипДостунойДиаграммы.Значение.Представление,,
				Элементы[ИмяКартинкиТипаДиаграммы].Картинка);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДоступныеТипыДиаграмм()

&наСервере
Процедура ТипДиаграммыПриИзмененииНаСервере()

	ТекущийЗаголовокДиаграммы = НаборСвойств[0].ПредставлениеЗначения;
	ТекущееЗначениеСвойств = НаборСвойств.Выгрузить();
	ЗаполнитьСвойства(ТипДиаграммы);
	ЗаполнитьЗначенияСвойствОбъекта(ТекущееЗначениеСвойств, ТипДиаграммы, Истина);

КонецПроцедуры // ТипДиаграммыПриИзмененииНаСервере()

&НаКлиентеНаСервереБезКонтекста
Функция СвойствоНаименованияДиаграммы()

	Возврат "НаименованиеДиаграммы";

КонецФункции // СвойствоНаименованияДиаграммы()

&НаСервере
Процедура ЗаполнитьДополнительныеНастройки()

	Для Каждого СтрокаНабора Из НаборСвойств Цикл

		// Укажем картинки цветов.
		Если СтрНачинаетсяС(СтрокаНабора.Свойство, "Цвет") Тогда

			Для Каждого СвойствоЦвета Из СтрокаНабора.ДоступныеЗначения Цикл

				Если Элементы.Найти(СвойствоЦвета.Представление) <> Неопределено Тогда

					СвойствоЦвета.Картинка = Элементы[СвойствоЦвета.Представление].Картинка;

				КонецЕсли;

			КонецЦикла;

		ИначеЕсли СтрокаНабора.Свойство = "ТипОбъекта" ИЛИ СтрокаНабора.Свойство = "ТипСвязи" Тогда

			ИмяКартинки = СтрШаблон("Картинка%1", СтрокаНабора.ТипДиаграммы);
			Для Каждого СвойствоЦвета Из СтрокаНабора.ДоступныеЗначения Цикл

				ИмяКартинкиТипаОбъекта = СтрШаблон("%1%2", ИмяКартинки, СтрЗаменить(СвойствоЦвета.Значение, " ", ""));
				СвойствоЦвета.Картинка = Элементы[ИмяКартинкиТипаОбъекта].Картинка;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьДополнительныеНастройки()

&НаСервере
Функция СписокПереданныхСвойствЭлемента(СвойстваЭлемента)

	СписокСвойств = Новый ТаблицаЗначений();
	СписокСвойств.Колонки.Добавить("Диаграмма");
	СписокСвойств.Колонки.Добавить("ТипДиаграммы");

	ЭтоСвойстваСвязи = Ложь;
	Если ИмяТаблицы = "СвойстваСвязей" Тогда

		СписокСвойств.Колонки.Добавить("Ключ");
		ЭтоСвойстваСвязи = Истина;

	Иначе

		СписокСвойств.Колонки.Добавить("Объект");

	КонецЕсли;

	СписокСвойств.Колонки.Добавить("Свойство");
	СписокСвойств.Колонки.Добавить("Значение");

	Если Не ЗначениеЗаполнено(СвойстваЭлемента) Тогда

		Возврат СписокСвойств;

	КонецЕсли;

	Для Каждого Свойства Из СвойстваЭлемента Цикл

		ТипДиаграммыСвойства = Свойства.Ключ;

		Для Каждого СвойствоЭлемента Из Свойства.Значение Цикл

			НоваяСтрока = СписокСвойств.Добавить();
			НоваяСтрока.Диаграмма = Диаграмма;
			НоваяСтрока.ТипДиаграммы = ТипДиаграммыСвойства;

			Если ЭтоСвойстваСвязи Тогда

				НоваяСтрока.Ключ = ОбъектДиаграммы;

			Иначе

				НоваяСтрока.Объект = ОбъектДиаграммы;

			КонецЕсли;

			НоваяСтрока.Свойство = СвойствоЭлемента.Ключ;
			НоваяСтрока.Значение = СвойствоЭлемента.Значение;

		КонецЦикла;

	КонецЦикла;


	Возврат СписокСвойств;

КонецФункции // СписокПереданныхСвойствЭлемента()

&НаСервере
Процедура УстановитьЗаголовокЭлементаДиаграммы()

	Если ЭтоНовыйЭлемент Тогда

		Заголовок = СтрШаблон(НСтр("ru = 'Создание (%1)'"), ТипОбъекта);

	Иначе

		Заголовок = СтрШаблон("%1 (%2)", ПредставлениеЭлемента, ТипОбъекта);

	КонецЕсли;

КонецПроцедуры // УстановитьЗаголовокЭлементаДиаграммы()

&НаКлиенте
Процедура Подключаемый_ЗаписьИзменений(Ответ, ДополнительныеПараметры = Неопределено) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда

		ЗавершитьЗаписьСвойств();

	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда

		Модифицированность = Ложь;
		Закрыть();

	КонецЕсли;

КонецПроцедуры // Подключаемый_ЗаписьИзменений()

&НаКлиенте
Процедура ЗавершитьЗаписьСвойств()

	Отказ = Ложь;

	Если ЭтоСвойстваДиаграммы Тогда

		Если Не ЗначениеЗаполнено(ТипДиаграммы) Тогда

			СообщениеПользователю = Новый СообщениеПользователю();
			СообщениеПользователю.Текст= НСтр("ru = 'Не выбран тип диаграммы.'");
			СообщениеПользователю.Поле = "ТипДиаграммы";
			СообщениеПользователю.Сообщить();
			Отказ = Истина;

		КонецЕсли;

	ИначеЕсли ИмяТаблицы = "СвойстваСвязей" Тогда

		Если Не ЗначениеЗаполнено(Источник) Тогда

			СообщениеПользователю = Новый СообщениеПользователю();
			СообщениеПользователю.Текст= НСтр("ru = 'Не указан источник связи.'");
			СообщениеПользователю.Поле = "Источник";
			СообщениеПользователю.Сообщить();
			Отказ = Истина;

		КонецЕсли;

	ИначеЕсли ИмяТаблицы = "СвойстваОбъектов" Тогда

		Если Не ЗначениеЗаполнено(Наименование) Тогда

			СообщениеПользователю = Новый СообщениеПользователю();
			СообщениеПользователю.Текст= НСтр("ru = 'Не заполено наименование объекта.'");
			СообщениеПользователю.Поле = "Наименование";
			СообщениеПользователю.Сообщить();
			Отказ = Истина;

		КонецЕсли;

	ИначеЕсли ИмяТаблицы = "СвойстваГрупп" Тогда

		Если Не ЗначениеЗаполнено(Наименование) Тогда

			СообщениеПользователю = Новый СообщениеПользователю();
			СообщениеПользователю.Текст= НСтр("ru = 'Не заполено наименование группы.'");
			СообщениеПользователю.Поле = "Наименование";
			СообщениеПользователю.Сообщить();
			Отказ = Истина;

		КонецЕсли;

	КонецЕсли;

	Если Отказ Тогда

		Возврат;

	КонецЕсли;

	АдресРезультата = РезультатРедактированияСвойств();
	Модифицированность = Ложь;
	Закрыть(АдресРезультата);

КонецПроцедуры // ЗавершитьЗаписьСвойств()

&НаКлиенте
Функция ВыбранноеЗначениеСвойства(Знач ПредставлениеЗначения, ДоступныеЗначения)

	Для Каждого ЗначенияСвойства Из ДоступныеЗначения Цикл

		Если ЗначенияСвойства.Представление = ПредставлениеЗначения Тогда

			Возврат ЗначенияСвойства.Значение;

		КонецЕсли;

	КонецЦикла;

	Возврат ПредставлениеЗначения;

КонецФункции // ВыбранноеЗначениеСвойства()

&НаСервере
Процедура ДополнитьДополнительнымиСвойствами()

	Если ИмяТаблицы = "СвойстваОбъектов" Тогда

		НовоеСвойство = НаборСвойств.Добавить();
		НовоеСвойство.Наименование = НСтр("ru = 'Имя объекта метаданных'");
		НовоеСвойство.Свойство = "ПутьКМетаданным";
		НовоеСвойство.Значение = ПутьКМетаданным;
		НовоеСвойство.ПредставлениеЗначения = ПутьКМетаданным;
		НовоеСвойство.ТипЗначения = Новый ОписаниеТипов("Строка");

	КонецЕсли;

КонецПроцедуры // ДополнитьДополнительнымиСвойствами()

&НаКлиенте
Процедура ЗавершениеВводаНаименования(РезультатВводаНаименования, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатВводаНаименования = Неопределено Тогда

		Возврат;

	КонецЕсли;

	Наименование = СтрЗаменить(РезультатВводаНаименования, Символы.ПС, Символ(182));

КонецПроцедуры // ЗавершениеВводаНаименования()

#КонецОбласти
