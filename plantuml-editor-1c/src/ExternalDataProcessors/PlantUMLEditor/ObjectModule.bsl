///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2022-2025, ООО 1С-Рарус
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии с условиями лицензии Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by-sa/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает версию обработки.
//
// Возвращаемое значение:
//  Строка - Версия обработки
//
Функция ВерсияОбработки() Экспорт

	Возврат "1.0.1.1";

КонецФункции

// Получение списка доступных типов диаграмм.
// 
// Возвращаемое значение:
//  Соответствие - Доступные типы диаграмм
//@skip-check doc-comment-collection-item-type
Функция ДоступныеТипыДиаграмм() Экспорт

	ТипыДиаграмм = Новый Структура();

	ТипыДиаграмм.Вставить(
		"ДиаграммаКлассов",
		Новый Структура(
			"Имя,Представление",
			"ДиаграммаКлассов",
			НСтр("ru = 'Диаграмма классов'")));

	ТипыДиаграмм.Вставить(
		"ДиаграммаДеятельности",
		Новый Структура(
			"Имя,Представление",
			"ДиаграммаДеятельности",
			НСтр("ru = 'Диаграмма деятельности'")));

	ТипыДиаграмм.Вставить(
		"ДиаграммаПоследовательностей",
		Новый Структура(
			"Имя,Представление",
			"ДиаграммаПоследовательностей",
			НСтр("ru = 'Диаграмма последовательностей'")));

	Возврат ТипыДиаграмм;

КонецФункции

// Получение свойств диаграммы и ее составляющих.
// 
// Параметры:
//  ТипДиаграммы - Строка - Тип диаграммы, для получения свойств.
//  ВидСвойств - Строка, Неопределено - Ключ свойства для получения.
// 
// Возвращаемое значение:
//  Структура - Информация о свойствах диаграммы.
Функция СвойстваПоДиаграмме(ТипДиаграммы, ВидСвойств = Неопределено) Экспорт

	Результат = Новый Структура();

	Если ВидСвойств = Неопределено Тогда
		ВидСвойств = "ВсеСвойства";
	КонецЕсли;

	НеобходимыСвойстваДиаграммы = Новый Массив();
	НеобходимыСвойстваДиаграммы.Добавить("ВсеСвойства");
	НеобходимыСвойстваДиаграммы.Добавить("СвойстваДиаграммы");
	
	Если НеобходимыСвойстваДиаграммы.Найти(ВидСвойств) <> Неопределено Тогда

		Результат.Вставить("СвойстваДиаграммы", СвойстваДиаграммы(ТипДиаграммы));

	КонецЕсли;

	НеобходимыСвойстваГруппы = Новый Массив();
	НеобходимыСвойстваГруппы.Добавить("ВсеСвойства");
	НеобходимыСвойстваГруппы.Добавить("СвойстваГруппы");

	Если НеобходимыСвойстваГруппы.Найти(ВидСвойств) <> Неопределено Тогда

		Результат.Вставить("СвойстваГруппы", СвойстваГруппы(ТипДиаграммы));

	КонецЕсли;

	НеобходимыСвойстваОбъекта = Новый Массив();
	НеобходимыСвойстваОбъекта.Добавить("ВсеСвойства");
	НеобходимыСвойстваОбъекта.Добавить("СвойстваОбъекта");

	Если НеобходимыСвойстваОбъекта.Найти(ВидСвойств) <> Неопределено Тогда

		Результат.Вставить("СвойстваОбъекта", СвойстваОбъекта(ТипДиаграммы));

	КонецЕсли;

	НеобходимыСвойстваОбъекта = Новый Массив();
	НеобходимыСвойстваОбъекта.Добавить("ВсеСвойства");
	НеобходимыСвойстваОбъекта.Добавить("СвойстваСвязи");

	Если НеобходимыСвойстваОбъекта.Найти(ВидСвойств) <> Неопределено Тогда

		Результат.Вставить("СвойстваСвязи", СвойстваСвязи(ТипДиаграммы));

	КонецЕсли;

	//@skip-check constructor-function-return-section
	Возврат Результат;

КонецФункции // СвойстваПоДиаграмме()

// Формирование отбора по таблице свойств.
// 
// Параметры:
//  ИмяТаблицы - Строка - Идентификатор таблицы, для которой формируется запрос.
//  ПараметрОтбора - Строка - Вид группы свойств.
//  Диаграмма - Строка - Текущая диаграмма.
//  ТипДиаграммы - Строка - Тип текущей диаграммы.
// 
// Возвращаемое значение:
//  Структура - Отбор свойств по таблице:
// * Диаграмма - Строка.
// * ТипДиаграммы - Строка.
// * Объект - Строка.
Функция ОтборСвойствПоТаблице(ИмяТаблицы, ПараметрОтбора, Диаграмма, ТипДиаграммы) Экспорт

	ОтборСвойств = Новый Структура();

	Если ИмяТаблицы = "СвойстваДиаграмм" Тогда
		ОтборСвойств.Вставить("Диаграмма", ПараметрОтбора);
		ОтборСвойств.Вставить("ТипДиаграммы", ТипДиаграммы);
	ИначеЕсли ИмяТаблицы = "СвойстваОбъектов" Тогда
		ОтборСвойств.Вставить("Диаграмма", Диаграмма);
		ОтборСвойств.Вставить("ТипДиаграммы", ТипДиаграммы);
		ОтборСвойств.Вставить("Объект", ПараметрОтбора);
	ИначеЕсли ИмяТаблицы = "СвойстваСвязей" Тогда
		ОтборСвойств.Вставить("Диаграмма", Диаграмма);
		ОтборСвойств.Вставить("ТипДиаграммы", ТипДиаграммы);
		ОтборСвойств.Вставить("Ключ", ПараметрОтбора);
	ИначеЕсли ИмяТаблицы = "СвойстваГрупп" Тогда
		ОтборСвойств.Вставить("Диаграмма", Диаграмма);
		ОтборСвойств.Вставить("ТипДиаграммы", ТипДиаграммы);
		ОтборСвойств.Вставить("Объект", ПараметрОтбора);
	КонецЕсли;

	Возврат ОтборСвойств;

КонецФункции // ОтборСвойствПоТаблице()

// Проверка того, передаваемая диаграмма соответствует необходимой.
// 
// Параметры:
//  ТипДиаграммы - Строка - Тип текущей диаграммы.
//  ТипДиаграммыПроверки - Строка - Тип диаграммы для проверки.
// 
// Возвращаемое значение:
//  Булево - Признак того, что совпали диаграммы.
Функция ТипДиаграммыСовпадает(ТипДиаграммы, ТипДиаграммыПроверки) Экспорт

	Возврат ТипДиаграммы = ДоступныеТипыДиаграмм()[ТипДиаграммыПроверки].Имя;

КонецФункции // ТипДиаграммыСовпадает()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - сведения о внешней обработке.
//
Функция СведенияОВнешнейОбработке() Экспорт

	// BSLLS:UsingServiceTag-off
	//@skip-check server-execution-safe-mode
	// BSLLS:UsingServiceTag-on
	МодульДополнительныеОтчетыИОбработки = Вычислить("ДополнительныеОтчетыИОбработки");

	// BSLLS:UsingServiceTag-off
	//@skip-check server-execution-safe-mode
	// BSLLS:UsingServiceTag-on
	МодульДополнительныеОтчетыИОбработкиКлиентСервер = Вычислить("ДополнительныеОтчетыИОбработкиКлиентСервер");

	ПараметрыРегистрации = МодульДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.3.1");
	ПараметрыРегистрации.Информация = НСтр("ru = 'PlantUML Editor'");
	ПараметрыРегистрации.Вид = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
	ПараметрыРегистрации.Версия = ВерсияОбработки();

	Команда = ПараметрыРегистрации.Команды.Добавить();
	Команда.Представление = НСтр("ru = 'PlantUML Editor'");
	Команда.Использование = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	Команда.Идентификатор = "PlantUMLEditor";

	Возврат ПараметрыРегистрации;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализацияСвойств()

	Свойства = Новый ТаблицаЗначений();
	Свойства.Колонки.Добавить("Свойство", Новый ОписаниеТипов("Строка"));
	Свойства.Колонки.Добавить("ТипДиаграммы", Новый ОписаниеТипов("Строка"));
	Свойства.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Свойства.Колонки.Добавить("ТипЗначения");
	Свойства.Колонки.Добавить("ДоступныеЗначения", Новый ОписаниеТипов("СписокЗначений"));
	Свойства.Колонки.Добавить("ТолькоДоступныеЗначения", Новый ОписаниеТипов("Булево"));
	Свойства.Колонки.Добавить("ОграничениеИспользования", Новый ОписаниеТипов("Строка"));

	Возврат Свойства;

КонецФункции // ИнициализацияСвойств()

Функция СвойстваДиаграммы(ТипДиаграммы)

	Свойства = ИнициализацияСвойств();

	ПолучитьСвойстваДиаграммыПоследовательностей(ТипДиаграммы, Свойства);
	ПолучитьСвойстваДиаграммыКлассов(ТипДиаграммы, Свойства);
	ПолучитьСвойстваДиаграммыДеятельности(ТипДиаграммы, Свойства);

	Возврат Свойства;

КонецФункции // СвойстваДиаграммы()

Функция СвойстваГруппы(ТипДиаграммы)

	Свойства = ИнициализацияСвойств();

	ПолучитьСвойстваГруппыПоследовательностей(ТипДиаграммы, Свойства);
	ПолучитьСвойстваГруппыКлассов(ТипДиаграммы, Свойства);
	ПолучитьСвойстваГруппыДеятельности(ТипДиаграммы, Свойства);

	Возврат Свойства;

КонецФункции // СвойстваГруппы()

Функция СвойстваОбъекта(ТипДиаграммы)

	Свойства = ИнициализацияСвойств();

	ПолучитьСвойстваОбъектаПоследовательностей(ТипДиаграммы, Свойства);
	ПолучитьСвойстваОбъектаКлассов(ТипДиаграммы, Свойства);
	ПолучитьСвойстваОбъектаДеятельности(ТипДиаграммы, Свойства);

	Возврат Свойства;

КонецФункции // СвойстваОбъекта()

Функция СвойстваСвязи(ТипДиаграммы)

	Свойства = ИнициализацияСвойств();

	ПолучитьСвойстваСвязиПоследовательностей(ТипДиаграммы, Свойства);
	ПолучитьСвойстваСвязиКлассов(ТипДиаграммы, Свойства);
	ПолучитьСвойстваСвязиДеятельности(ТипДиаграммы, Свойства);

	Возврат Свойства;

КонецФункции // СвойстваСвязи()

#Область ДиаграммаПоследовательностей

Процедура ПолучитьСвойстваДиаграммыПоследовательностей(ТипДиаграммы, Свойства)

	Если Не ТипДиаграммыСовпадает(ТипДиаграммы, "ДиаграммаПоследовательностей") Тогда
		Возврат;
	КонецЕсли;

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"autonumber",
		НСтр("ru = 'Автонумерация сообщений с номера'"),
		Новый ОписаниеТипов("Число"));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"header",
		НСтр("ru = 'Текст верхнего колонтитула страницы'"),
		Новый ОписаниеТипов("Строка"));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"footer",
		НСтр("ru = 'Текст нижнего колонтитула страницы'"),
		Новый ОписаниеТипов("Строка"));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"hide footbox",
		НСтр("ru = 'Удалить нижний колонтитул объектов'"),
		Новый ОписаниеТипов("Булево"),
		СписокВыбораДаНет("true", ""));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"hide unlinked",
		НСтр("ru = 'Скрыть не связанных участников'"),
		Новый ОписаниеТипов("Булево"),
		СписокВыбораДаНет("true", ""));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"mainframe",
		НСтр("ru = 'Название основной области'"),
		Новый ОписаниеТипов("Строка"));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"!pragma teoz",
		НСтр("ru = 'Использовать новую архитектуру uml ""Teoz""'"),
		Новый ОписаниеТипов("Булево"),
		СписокВыбораДаНет("true", ""));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ФорматКартинкиРезультата",
		НСтр("ru = 'Формат картинки результата'"),
		Новый ОписаниеТипов("Строка"),
		ФорматыКартинкиРезультата());

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam sequenceArrowThickness",
		НСтр("ru = 'Толщина стрелок'"),
		Новый ОписаниеТипов("Число"));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam roundcorner",
		НСтр("ru = 'Закругление углов'"),
		Новый ОписаниеТипов("Число"));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam maxmessagesize",
		НСтр("ru = 'Максимальный размер сообщения, в пикселях'"),
		Новый ОписаниеТипов("Число"));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam sequenceParticipant",
		НСтр("ru = 'Подчеркивать имена объектов'"),
		Новый ОписаниеТипов("Булево"),
		СписокВыбораДаНет("underline", ""));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam guillemet",
		НСтр("ru = 'Не преобразовывать символы ""<<"" и "">>"" в ""«"" и ""»""'"),
		Новый ОписаниеТипов("Булево"),
		СписокВыбораДаНет("false", ""));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam backgroundColor",
		НСтр("ru = 'Цвет фона'"),
		Новый ОписаниеТипов("Строка"),
		ОсновныеЦветаДляВыбора());
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam handwritten",
		НСтр("ru = 'Изображать схему в стиле ""от руки""'"),
		Новый ОписаниеТипов("Булево"),
		СписокВыбораДаНет("true", ""));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam ParticipantPadding",
		НСтр("ru = 'Размер отступа от участников, в пикселях'"),
		Новый ОписаниеТипов("Число"));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam BoxPadding",
		НСтр("ru = 'Расстояние в пикселях слева и справа от поля'"),
		Новый ОписаниеТипов("Число"));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam lifelineStrategy",
		НСтр("ru = 'Вертикальные линии сплошные'"),
		Новый ОписаниеТипов("Булево"),
		СписокВыбораДаНет("solid", "nosolid"));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam style",
		НСтр("ru = 'Отображать в строгом соответствии с UML'"),
		Новый ОписаниеТипов("Булево"),
		СписокВыбораДаНет("strictuml", ""));
	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam sequenceMessageAlign",
		НСтр("ru = 'Расположение текста относительно стрелки'"),
		Новый ОписаниеТипов("Строка"),
		СписокВыбораРасположения(),
		Истина);

	Свойства.Сортировать("Наименование");

КонецПроцедуры // ПолучитьСвойстваДиаграммыПоследовательностей()

Процедура ПолучитьСвойстваГруппыПоследовательностей(ТипДиаграммы, Свойства)

	Если Не ТипДиаграммыСовпадает(ТипДиаграммы, "ДиаграммаПоследовательностей") Тогда
		Возврат;
	КонецЕсли;

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ЦветФона",
		НСтр("ru = 'Цвет фона'"),
		Новый ОписаниеТипов("Строка"),
		ОсновныеЦветаДляВыбора());

КонецПроцедуры // ПолучитьСвойстваГруппыПоследовательностей()

Процедура ПолучитьСвойстваОбъектаПоследовательностей(ТипДиаграммы, Свойства)

	Если Не ТипДиаграммыСовпадает(ТипДиаграммы, "ДиаграммаПоследовательностей") Тогда
		Возврат;
	КонецЕсли;

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ТипОбъекта",
		НСтр("ru = 'Тип объекта (диаграмма последовательностей)'"),
		Новый ОписаниеТипов("Строка"),
		ФормаПредставленияОбъекта());

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ЦветФона",
		НСтр("ru = 'Цвет объекта'"),
		Новый ОписаниеТипов("Строка"),
		ОсновныеЦветаДляВыбора());

КонецПроцедуры // ПолучитьСвойстваОбъектаПоследовательностей()

Процедура ПолучитьСвойстваСвязиПоследовательностей(ТипДиаграммы, Свойства)

	Если Не ТипДиаграммыСовпадает(ТипДиаграммы, "ДиаграммаПоследовательностей") Тогда
		Возврат;
	КонецЕсли;

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ТипСтрелки",
		НСтр("ru = 'Тип стрелки'"),
		Новый ОписаниеТипов("Строка"),
		ТипыСтрелок(),
		Истина);

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ПунктирнаяСтрелка",
		НСтр("ru = 'Выводить связь пунктирной стрелкой'"),
		Новый ОписаниеТипов("Булево"),
		СписокВыбораДаНет("true", "false"));	

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ЦветСтрелки",
		НСтр("ru = 'Цвет линии'"),
		Новый ОписаниеТипов("Строка"),
		ОсновныеЦветаДляВыбора());

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"АктивацияИсточника",
		НСтр("ru = 'Активация объекта-источника'"),
		Новый ОписаниеТипов("Строка"),
		ТипыАктивизацииОбъектов(),
		Истина);

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"АктивацияПриемника",
		НСтр("ru = 'Активация объекта-приемника'"),
		Новый ОписаниеТипов("Строка"),
		ТипыАктивизацииОбъектов(),
		Истина);

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ВидСообщения",
		НСтр("ru = 'Вид связи'"),
		Новый ОписаниеТипов("Строка"),
		ВидыСообщений());

КонецПроцедуры // ПолучитьСвойстваСвязиПоследовательностей()

#КонецОбласти

#Область ДиаграммаКлассов

Процедура ПолучитьСвойстваДиаграммыКлассов(ТипДиаграммы, Свойства)

	Если Не ТипДиаграммыСовпадает(ТипДиаграммы, "ДиаграммаКлассов") Тогда
		Возврат;
	КонецЕсли;

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam backgroundColor",
		НСтр("ru = 'Цвет фона'"),
		Новый ОписаниеТипов("Строка"),
		ОсновныеЦветаДляВыбора());

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam ArrowColor",
		НСтр("ru = 'Цвет стрелок'"),
		Новый ОписаниеТипов("Строка"),
		ОсновныеЦветаДляВыбора());

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam classBackgroundColor",
		НСтр("ru = 'Цвет фона классов'"),
		Новый ОписаниеТипов("Строка"),
		ОсновныеЦветаДляВыбора());

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam groupInheritance",
		НСтр("ru = 'Максимальное количество объединения окончаний стрелок к классу'"),
		Новый ОписаниеТипов("Число"));

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ФорматКартинкиРезультата",
		НСтр("ru = 'Формат картинки результата'"),
		Новый ОписаниеТипов("Строка"),
		ФорматыКартинкиРезультата());

КонецПроцедуры // ПолучитьСвойстваДиаграммыКлассов()

Процедура ПолучитьСвойстваОбъектаКлассов(ТипДиаграммы, Свойства)

	Если Не ТипДиаграммыСовпадает(ТипДиаграммы, "ДиаграммаКлассов") Тогда
		Возврат;
	КонецЕсли;

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ТипОбъекта",
		НСтр("ru = 'Тип объекта (диаграмма классов)'"),
		Новый ОписаниеТипов("Строка"),
		ФормаПредставленияОбъектаКласса());

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"Дженерик",
		НСтр("ru = 'Дополнительное описание'"),
		Новый ОписаниеТипов("Строка"));	

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ЦветФона",
		НСтр("ru = 'Цвет объекта'"),
		Новый ОписаниеТипов("Строка"),
		ОсновныеЦветаДляВыбора());

КонецПроцедуры // ПолучитьСвойстваОбъектаПоследовательностей()

Процедура ПолучитьСвойстваСвязиКлассов(ТипДиаграммы, Свойства)

	Если Не ТипДиаграммыСовпадает(ТипДиаграммы, "ДиаграммаКлассов") Тогда
		Возврат;
	КонецЕсли;

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ТипСвязи",
		НСтр("ru = 'Тип связи'"),
		Новый ОписаниеТипов("Строка"),
		ТипыСвязейКлассов(),
		Истина);

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"НаконечникИсточника",
		НСтр("ru = 'Наконечник стрелки источника'"),
		Новый ОписаниеТипов("Строка"),
		ТипыСтрелокКлассовИсточник(),
		Истина);

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"НаконечникПриемника",
		НСтр("ru = 'Наконечник стрелки приемника'"),
		Новый ОписаниеТипов("Строка"),
		ТипыСтрелокКлассовПриемник(),
		Истина);

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"СтильСтрелки",
		НСтр("ru = 'Стиль линии'"),
		Новый ОписаниеТипов("Строка"),
		СтилиСтрелки());

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ТолщинаЛинии",
		НСтр("ru = 'Толщина линии'"),
		Новый ОписаниеТипов("Число"));

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"МеткаИсточник",
		НСтр("ru = 'Метка к источнику'"),
		Новый ОписаниеТипов("Строка"));

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"МеткаПриемник",
		НСтр("ru = 'Метка к приемнику'"),
		Новый ОписаниеТипов("Строка"));

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ЦветСтрелки",
		НСтр("ru = 'Цвет линии'"),
		Новый ОписаниеТипов("Строка"),
		ОсновныеЦветаДляВыбора());

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ВидимостьПоля",
		НСтр("ru = 'Видимость поля/метода'"),
		Новый ОписаниеТипов("Строка"),
		ВариантыВидимостиПолейОбъекта());

КонецПроцедуры // ПолучитьСвойстваСвязиПоследовательностей()

Процедура ПолучитьСвойстваГруппыКлассов(ТипДиаграммы, Свойства)

	Если Не ТипДиаграммыСовпадает(ТипДиаграммы, "ДиаграммаКлассов") Тогда
		Возврат;
	КонецЕсли;

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ЦветФона",
		НСтр("ru = 'Цвет фона'"),
		Новый ОписаниеТипов("Строка"),
		ОсновныеЦветаДляВыбора());

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ТипГруппы",
		НСтр("ru = 'Стиль'"),
		Новый ОписаниеТипов("Строка"),
		СтилиПакетов());

КонецПроцедуры // ПолучитьСвойстваГруппыКлассов()

#КонецОбласти

#Область ДиаграммаДеятельности

Процедура ПолучитьСвойстваДиаграммыДеятельности(ТипДиаграммы, Свойства)

	Если Не ТипДиаграммыСовпадает(ТипДиаграммы, "ДиаграммаДеятельности") Тогда
		Возврат;
	КонецЕсли;

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"!pragma useVerticalIf on",
		НСтр("ru = 'Вывести вложенные условия вертикально'"),
		Новый ОписаниеТипов("Булево"),
		СписокВыбораДаНет("true", ""));

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"skinparam ArrowHeadColor none",
		НСтр("ru = 'Вывести стрелки линиями'"),
		Новый ОписаниеТипов("Булево"),
		СписокВыбораДаНет("true", ""));

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ФорматКартинкиРезультата",
		НСтр("ru = 'Формат картинки результата'"),
		Новый ОписаниеТипов("Строка"),
		ФорматыКартинкиРезультата());

КонецПроцедуры // ПолучитьСвойстваДиаграммыДеятельности()

Процедура ПолучитьСвойстваОбъектаДеятельности(ТипДиаграммы, Свойства)

	Если Не ТипДиаграммыСовпадает(ТипДиаграммы, "ДиаграммаДеятельности") Тогда
		Возврат;
	КонецЕсли;

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ТипОбъекта",
		НСтр("ru = 'Тип объекта (диаграмма деятальности)'"),
		Новый ОписаниеТипов("Строка"),
		ФормыПредставленияДляДиаграммыДеятельности());

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ЦветФона",
		НСтр("ru = 'Цвет объекта'"),
		Новый ОписаниеТипов("Строка"),
		ОсновныеЦветаДляВыбора());

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ВидДействия",
		НСтр("ru = 'Внешний вид действия'"),
		Новый ОписаниеТипов("Строка"),
		ВнешнийВидДействия());

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ВидОкончания",
		НСтр("ru = 'Вид окончания'"),
		Новый ОписаниеТипов("Строка"),
		ВидыОкончанияДиаграммы());

КонецПроцедуры // ПолучитьСвойстваОбъектаДеятельности()

Процедура ПолучитьСвойстваСвязиДеятельности(ТипДиаграммы, Свойства)

	Если Не ТипДиаграммыСовпадает(ТипДиаграммы, "ДиаграммаДеятельности") Тогда
		Возврат;
	КонецЕсли;

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"СтильСтрелки",
		НСтр("ru = 'Стиль линии'"),
		Новый ОписаниеТипов("Строка"),
		СтилиСтрелки());

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ЦветСтрелки",
		НСтр("ru = 'Цвет линии'"),
		Новый ОписаниеТипов("Строка"),
		ОсновныеЦветаДляВыбора());

КонецПроцедуры // ПолучитьСвойстваСвязиДеятельности()

Процедура ПолучитьСвойстваГруппыДеятельности(ТипДиаграммы, Свойства)

	Если Не ТипДиаграммыСовпадает(ТипДиаграммы, "ДиаграммаДеятельности") Тогда
		Возврат;
	КонецЕсли;

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ЦветФона",
		НСтр("ru = 'Цвет фона'"),
		Новый ОписаниеТипов("Строка"),
		ОсновныеЦветаДляВыбора());

	ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		"ТипГруппы",
		НСтр("ru = 'Стиль'"),
		Новый ОписаниеТипов("Строка"),
		СтилиГруппДеятельности());

КонецПроцедуры // ПолучитьСвойстваГруппыДеятельности()

#КонецОбласти

Процедура ДобавитьСвойство(
		Свойства,
		ТипДиаграммы,
		Имя,
		Представление,
		ТипЗначения,
		ДоступныеЗначения = Неопределено,
		ТолькоДоступныеЗначения = Ложь,
		ОграничениеИспользования = Неопределено)

	НоваяСтрока = Свойства.Добавить();
	НоваяСтрока.Свойство = Имя;
	НоваяСтрока.ТипДиаграммы = ТипДиаграммы;
	НоваяСтрока.Наименование = Представление;
	НоваяСтрока.ТипЗначения = ТипЗначения;
	НоваяСтрока.ДоступныеЗначения = ДоступныеЗначения;
	НоваяСтрока.ТолькоДоступныеЗначения = ТолькоДоступныеЗначения;
	НоваяСтрока.ОграничениеИспользования = ОграничениеИспользования;

КонецПроцедуры // ДобавитьСвойство()

Функция СписокВыбораДаНет(ЗначениеДа, ЗначениеНет)

	СписокВыбора = Новый СписокЗначений();
	СписокВыбора.Добавить(ЗначениеДа, НСтр("ru = 'Да'"));
	СписокВыбора.Добавить(ЗначениеНет, НСтр("ru = 'Нет'"));

	Возврат СписокВыбора;

КонецФункции // СписокВыбораДаНет()

Функция ОсновныеЦветаДляВыбора()

	Цвета = Новый СписокЗначений();
	Цвета.Добавить("", НСтр("ru = 'Авто'"));
	Цвета.Добавить("grey", НСтр("ru = 'Серый'"));
	Цвета.Добавить("red", НСтр("ru = 'Красный'"));
	Цвета.Добавить("blue", НСтр("ru = 'Синий'"));
	Цвета.Добавить("green", НСтр("ru = 'Зеленый'"));
	Цвета.Добавить("yellow", НСтр("ru = 'Желтый'"));

	Возврат Цвета;

КонецФункции // ОсновныеЦветаДляВыбора()

Функция СписокВыбораРасположения()

	Цвета = Новый СписокЗначений();
	Цвета.Добавить("", НСтр("ru = 'Авто'"));
	Цвета.Добавить("left", НСтр("ru = 'Лево'"));
	Цвета.Добавить("right", НСтр("ru = 'Право'"));
	Цвета.Добавить("center", НСтр("ru = 'Центр'"));

	Возврат Цвета;

КонецФункции // СписокВыбораРасположения()

Функция ФормаПредставленияОбъекта() Экспорт

	ФормыПредставления = Новый СписокЗначений();
	ФормыПредставления.Добавить("participant", НСтр("ru = 'Участник'"));
	ФормыПредставления.Добавить("actor", НСтр("ru = 'Пользователь (актор)'"));
	ФормыПредставления.Добавить("boundary", НСтр("ru = 'Граничный элемент'"));
	ФормыПредставления.Добавить("control", НСтр("ru = 'Управляющий элемент'"));
	ФормыПредставления.Добавить("entity", НСтр("ru = 'Сущность'"));
	ФормыПредставления.Добавить("database", НСтр("ru = 'База данных'"));
	ФормыПредставления.Добавить("collections", НСтр("ru = 'Коллекция'"));
	ФормыПредставления.Добавить("queue", НСтр("ru = 'Очередь'"));

	Возврат ФормыПредставления;

КонецФункции // ФормаПредставленияОбъекта()

Функция ФормаПредставленияОбъектаКласса() Экспорт

	ФормыПредставления = Новый СписокЗначений();
	ФормыПредставления.Добавить("abstract", НСтр("ru = 'Абстаракция'"));
	ФормыПредставления.Добавить("abstract class", НСтр("ru = 'Абстрактный класс'"));
	ФормыПредставления.Добавить("annotation", НСтр("ru = 'Аннотация'"));
	ФормыПредставления.Добавить("circle", НСтр("ru = 'Круг'"));
//	ФормыПредставления.Добавить("()", НСтр("ru = 'Круг (уменьшенная форма)'"));
	ФормыПредставления.Добавить("class", НСтр("ru = 'Класс'"));
	ФормыПредставления.Добавить("diamond", НСтр("ru = 'Ассоциация'"));
//	ФормыПредставления.Добавить("<>", НСтр("ru = 'Ассоциация (уменьшенная форма)'"));
	ФормыПредставления.Добавить("entity", НСтр("ru = 'Сущность'"));
	ФормыПредставления.Добавить("enum", НСтр("ru = 'Перечисление'"));
	ФормыПредставления.Добавить("interface", НСтр("ru = 'Интерфейс'"));
	ФормыПредставления.Добавить("protocol", НСтр("ru = 'Протокол'"));
	ФормыПредставления.Добавить("struct", НСтр("ru = 'Структура'"));

	Возврат ФормыПредставления;

КонецФункции // ФормаПредставленияОбъектаКласса()

Функция ТипыСтрелок()

	ТипыСтрелокСвязи = Новый СписокЗначений();
	ТипыСтрелокСвязи.Добавить("", НСтр("ru = 'Авто'"));
	ТипыСтрелокСвязи.Добавить("->", "->");
	ТипыСтрелокСвязи.Добавить("->>", "->>");
	ТипыСтрелокСвязи.Добавить("-\", "-\");
	ТипыСтрелокСвязи.Добавить("-\\", "-\\");
	ТипыСтрелокСвязи.Добавить("-/", "-/");
	ТипыСтрелокСвязи.Добавить("-//", "-//");
	ТипыСтрелокСвязи.Добавить("->x", "->x");
	ТипыСтрелокСвязи.Добавить("x->", "x->");
	ТипыСтрелокСвязи.Добавить("o->", "o->");
	ТипыСтрелокСвязи.Добавить("->o", "->o");
	ТипыСтрелокСвязи.Добавить("o->o", "o->o");
	ТипыСтрелокСвязи.Добавить("<->", "<->");
	ТипыСтрелокСвязи.Добавить("o<->o", "o<->o");
	ТипыСтрелокСвязи.Добавить("x<->x", "x<->x");
	ТипыСтрелокСвязи.Добавить("->>o", "->>o");
	ТипыСтрелокСвязи.Добавить("-\o", "-\o");
	ТипыСтрелокСвязи.Добавить("-\\o", "-\\o");
	ТипыСтрелокСвязи.Добавить("-/o", "-/o");
	ТипыСтрелокСвязи.Добавить("-//o", "-//o");
	ТипыСтрелокСвязи.Добавить("x->o", "x->o");

	Возврат ТипыСтрелокСвязи;

КонецФункции // ТипыСтрелок()

Функция ТипыСвязейКлассов() Экспорт

	ТипыСвязей = Новый СписокЗначений();
	ТипыСвязей.Добавить("Связь", НСтр("ru = 'Связь'"));
	ТипыСвязей.Добавить("Поле", НСтр("ru = 'Поле'"));
	ТипыСвязей.Добавить("Метод", НСтр("ru = 'Метод'"));

	Возврат ТипыСвязей;

КонецФункции // ТипыСвязейКлассов()

Функция ТипыСтрелокКлассовИсточник()

	ТипыСтрелокСвязи = Новый СписокЗначений();
	ТипыСтрелокСвязи.Добавить("", НСтр("ru = 'Авто'"));
	ТипыСтрелокСвязи.Добавить("<", НСтр("ru = 'Заостренный наконечник'"));
	ТипыСтрелокСвязи.Добавить("<|", НСтр("ru = 'Треугольник'"));
	ТипыСтрелокСвязи.Добавить("*", НСтр("ru = 'Ромб'"));
	ТипыСтрелокСвязи.Добавить("o", НСтр("ru = 'Полый ромб'"));
	ТипыСтрелокСвязи.Добавить("#", НСтр("ru = 'Полый квадрат'"));
	ТипыСтрелокСвязи.Добавить("x", НСтр("ru = 'Крестик'"));
	ТипыСтрелокСвязи.Добавить("}", НСтр("ru = 'Обратный треугольник'"));
	ТипыСтрелокСвязи.Добавить("+", НСтр("ru = 'Кружок с крестиком внутри'"));

	Возврат ТипыСтрелокСвязи;

КонецФункции // ТипыСтрелокКлассовИсточник()

Функция ТипыСтрелокКлассовПриемник()

	ТипыСтрелокСвязи = Новый СписокЗначений();
	ТипыСтрелокСвязи.Добавить("", НСтр("ru = 'Авто'"));
	ТипыСтрелокСвязи.Добавить(">", НСтр("ru = 'Заостренный наконечник'"));
	ТипыСтрелокСвязи.Добавить("|>", НСтр("ru = 'Треугольник'"));
	ТипыСтрелокСвязи.Добавить("*", НСтр("ru = 'Ромб'"));
	ТипыСтрелокСвязи.Добавить("o", НСтр("ru = 'Полый ромб'"));
	ТипыСтрелокСвязи.Добавить("#", НСтр("ru = 'Полый квадрат'"));
	ТипыСтрелокСвязи.Добавить("x", НСтр("ru = 'Крестик'"));
	ТипыСтрелокСвязи.Добавить("{", НСтр("ru = 'Обратный треугольник'"));
	ТипыСтрелокСвязи.Добавить("+", НСтр("ru = 'Кружок с крестиком внутри'"));

	Возврат ТипыСтрелокСвязи;

КонецФункции // ТипыСтрелокКлассовПриемник()

Функция ВидыСообщений()

	ВидыСообщений = Новый СписокЗначений();
	ВидыСообщений.Добавить("", НСтр("ru = 'Авто'"));
	ВидыСообщений.Добавить("[", НСтр("ru = 'Входящее'"));
	ВидыСообщений.Добавить("]", НСтр("ru = 'Исходящее'"));

	Возврат ВидыСообщений;

КонецФункции // ВидыСообщений()

Функция ТипыАктивизацииОбъектов()

	ТипыАктивизации = Новый СписокЗначений();
	ТипыАктивизации.Добавить("", НСтр("ru = 'Авто'"));
	ТипыАктивизации.Добавить("activate", НСтр("ru = 'Активировать'"));
	ТипыАктивизации.Добавить("deactivate", НСтр("ru = 'Деактивировать'"));
	ТипыАктивизации.Добавить("destroy", НСтр("ru = 'Конец существования'"));

	Возврат ТипыАктивизации;

КонецФункции // ТипыАктивизацииОбъектов()

Функция СтилиПакетов()

	СтилиПакетов = Новый СписокЗначений();
	СтилиПакетов.Добавить("", НСтр("ru = 'Авто'"));
	СтилиПакетов.Добавить("Node", НСтр("ru = 'Куб'"));
	СтилиПакетов.Добавить("Rectangle", НСтр("ru = 'Прямоугольник'"));
	СтилиПакетов.Добавить("Folder", НСтр("ru = 'Папка'"));
	СтилиПакетов.Добавить("Frame", НСтр("ru = 'Рамка'"));
	СтилиПакетов.Добавить("Cloud", НСтр("ru = 'Облако'"));
	СтилиПакетов.Добавить("Database", НСтр("ru = 'База данных'"));

	Возврат СтилиПакетов;

КонецФункции // СтилиПакетов()

Функция СтилиСтрелки()

	СтилиСтрелки = Новый СписокЗначений();
	СтилиСтрелки.Добавить("", НСтр("ru = 'Авто'"));
	СтилиСтрелки.Добавить("bold", НСтр("ru = 'Жирный'"));
	СтилиСтрелки.Добавить("dashed", НСтр("ru = 'Штриховой'"));
	СтилиСтрелки.Добавить("dotted", НСтр("ru = 'Пунктирный'"));
	СтилиСтрелки.Добавить("hidden", НСтр("ru = 'Скрытый'"));
	СтилиСтрелки.Добавить("plain", НСтр("ru = 'Непрерывный'"));

	Возврат СтилиСтрелки;

КонецФункции // СтилиСтрелки()

Функция ВариантыВидимостиПолейОбъекта()

	СтилиСтрелки = Новый СписокЗначений();
	СтилиСтрелки.Добавить("", НСтр("ru = 'Авто'"));
	СтилиСтрелки.Добавить("-", НСтр("ru = 'Закрытый'"));
	СтилиСтрелки.Добавить("#", НСтр("ru = 'Защищенный'"));
	СтилиСтрелки.Добавить("~", НСтр("ru = 'Доступный внутри пакета'"));
	СтилиСтрелки.Добавить("+", НСтр("ru = 'Общедоступный'"));

	Возврат СтилиСтрелки;

КонецФункции // ВариантыВидимостиПолейОбъекта()

Функция СтилиГруппДеятельности()

	СтилиГрупп = Новый СписокЗначений();
	СтилиГрупп.Добавить("", НСтр("ru = 'Авто'"));
	СтилиГрупп.Добавить("partition", НСтр("ru = 'Раздел'"));
	СтилиГрупп.Добавить("package", НСтр("ru = 'Пакет'"));
	СтилиГрупп.Добавить("rectangle", НСтр("ru = 'Прямоугольник'"));
	СтилиГрупп.Добавить("card", НСтр("ru = 'Карточка'"));

	Возврат СтилиГрупп;

КонецФункции // СтилиГруппДеятельности()

Функция ВнешнийВидДействия()

	ВидДействия = Новый СписокЗначений();
	ВидДействия.Добавить("", НСтр("ru = 'Авто'"));
	ВидДействия.Добавить(";", НСтр("ru = 'Состояние'"));
	ВидДействия.Добавить("|", НСтр("ru = 'Вызов процедуры'"));
	ВидДействия.Добавить("<", НСтр("ru = 'Ввод'"));
	ВидДействия.Добавить(">", НСтр("ru = 'Вывод'"));
	ВидДействия.Добавить("/", НСтр("ru = 'Сохранение'"));
	ВидДействия.Добавить("]", НСтр("ru = 'Задача'"));
	ВидДействия.Добавить("}", НСтр("ru = 'Решение'"));

	Возврат ВидДействия;

КонецФункции // ВнешнийВидДействия()

Функция ВидыОкончанияДиаграммы()

	ВидДействия = Новый СписокЗначений();
	ВидДействия.Добавить("", НСтр("ru = 'Авто'"));
	ВидДействия.Добавить("end", НСтр("ru = 'Конец'"));
	ВидДействия.Добавить("stop", НСтр("ru = 'Стоп'"));

	Возврат ВидДействия;

КонецФункции // ВидыОкончанияДиаграммы()

Функция ФорматыКартинкиРезультата()

	ФорматКартинкиДляРезультата = Новый СписокЗначений();
	ФорматКартинкиДляРезультата.Добавить("", НСтр("ru = 'Авто'"));
	ФорматКартинкиДляРезультата.Добавить("PNG", НСтр("ru = 'PNG'"));
	ФорматКартинкиДляРезультата.Добавить("SVG", НСтр("ru = 'SVG'"));

	Возврат ФорматКартинкиДляРезультата;

КонецФункции // ФорматыКартинкиРезультата()

Функция ФормыПредставленияДляДиаграммыДеятельности() Экспорт

	ФормыПредставления = Новый СписокЗначений();
	ФормыПредставления.Добавить("start", НСтр("ru = 'Старт'"));
	ФормыПредставления.Добавить("do", НСтр("ru = 'Действие'"));
	ФормыПредставления.Добавить("if", НСтр("ru = 'Условие (if)'"));
	ФормыПредставления.Добавить("switch", НСтр("ru = 'Условие (switch)'"));
	ФормыПредставления.Добавить("while", НСтр("ru = 'Цикл (while)'"));
	ФормыПредставления.Добавить("break", НСтр("ru = 'Прервать цикл (break)'"));
	ФормыПредставления.Добавить("fork", НСтр("ru = 'Паралелльное выполнение'"));
	ФормыПредставления.Добавить("end", НСтр("ru = 'Конец'"));

	Возврат ФормыПредставления;

КонецФункции // ФормыПредставленияДляДиаграммыДеятельности()

#КонецОбласти

#КонецЕсли
